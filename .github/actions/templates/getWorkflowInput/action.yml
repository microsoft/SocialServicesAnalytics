name: 'Get Workflow Input'
description: 'Get Workflow Input'

inputs:
  workflowPath:
    description: 'The path to the workflow file used to retrieve default workflow input parameters.'
    required: true

outputs:
  removeDeployment:
    description: 'Remove deployed module'
    value: ${{ steps.get-input-param-action.outputs.removeDeployment }}
  versioningOption:
    description: 'The mode to handle the version increments [major|minor|patch]'
    value: ${{ steps.get-input-param-action.outputs.versioningOption }}
  customVersion:
    description: 'Custom version to apply. Used only if higher than latest'
    value: ${{ steps.get-input-param-action.outputs.customVersion }}

runs:
  using: 'composite'
  steps:
    - name: Get workflow input parameters
      id: get-input-param-action
      run: |
        Write-Verbose "The workflow trigger is: ${{ github.event_name }}" -Verbose

        # When running from workflow_dispatch event get input values
        if ('${{ github.event_name }}' -eq 'workflow_dispatch') {

          $removeDeployment='${{ github.event.inputs.removeDeployment }}'
          $versioningOption='${{ github.event.inputs.versioningOption }}'
          $customVersion='${{ github.event.inputs.customVersion }}'
        }
        # Otherwise retrieve default values
        else {
          # Load used functions
          . "$env:GITHUB_ACTION_PATH/scripts/Get-WorkflowDefaultInput.ps1"

          $functionInput = @{
            workflowPath = '${{ inputs.workflowPath }}'
          }

          Write-Verbose "Invoke task with" -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          $workflowParameters = Get-WorkflowDefaultInput @functionInput -Verbose
          $removeDeployment = $workflowParameters.removeDeployment
          $versioningOption = $workflowParameters.versioningOption
          $customVersion = $workflowParameters.customVersion
        }

        # Output values to be accessed by next jobs
        Write-Output "::set-output name=removeDeployment::$removeDeployment"
        Write-Output "::set-output name=versioningOption::$versioningOption"
        Write-Output "::set-output name=customVersion::$customVersion"
      shell: pwsh
