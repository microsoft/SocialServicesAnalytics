{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-swis-socialservices-we-dev-001"
		},
		"sqldb_swis_contoso_uks_01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqldb_swis_contoso_uks_01'"
		},
		"synapse-swis-socialservices-we-dev-001-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-swis-socialservices-we-dev-001-WorkspaceDefaultSqlServer'"
		},
		"synapsedwh_swis_contoso_uks_001_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapsedwh_swis_contoso_uks_001'"
		},
		"dls_gdp_contoso_enriched_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsrefgdpcontoso.dfs.core.windows.net"
		},
		"kv_swis_contoso_01_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://akv-swis-we-dev-001.vault.azure.net/"
		},
		"synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsrawsocialservices.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_CapitaOne')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "R-TblEvCatType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblPupilMetricType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventCategoryType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceAllocation": {},
									"SourceLookUp": {},
									"TblEvCatTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "Staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblPupilAttendanceType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblPersonStatusType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPupilAttendanceType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceAllocation": {},
									"TblPupilAttendanceType": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblPupilMetricType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblPupilAttendanceType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPupilMetricTypeCode",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceAllocation": {},
									"TblPupilMetricType": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblEvRsnType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblEvMtrTyp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventReasonType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"InternalReferenceData": {},
									"TblEvRsnType": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblAttndSumryTyp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "I-TblInstitution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblAttendanceSummaryType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"INST": {},
									"TblAttndSumry": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblEvMtrTyp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblAttndSumryTyp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventMetricType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"TblEvMtrTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblEvStsTyp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblEvRsnType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventStatusType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"EvStsTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblEvTyp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblEvStsTyp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"TblEvTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblInstitutionType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblEvTyp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblInstitutionType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SchoolAllocation": {},
									"InstitutionalType": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "R-TblPersonStatusType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblInstitutionType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPersonStatusType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"LookUpFull": {},
									"TblPersonStatusType": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "I-TblInstitution",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EmptyTblEv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblInstitution",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CityMasterSchoolInformation": {},
									"TblInstitution": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "I-TblInstitutionToInstitutionType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "R-TblEvCatType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblInstitutionToInstitutionType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EducationDetails": {},
									"TblInstitution": {},
									"TblInstitutionType": {},
									"TblInstitutionToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblEv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-PupToSts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEvent",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ExclusionsSource": {},
									"EvTypSource": {},
									"EvRsnTypSource": {},
									"EvCatTypSource": {},
									"StudHistSource": {},
									"SinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EmptyTblPupil",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EmptyTblEvTyp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblPupil",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EmptyTblEvCatTyp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblEventCategoryType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EmptyTblEvRsnTyp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EmptyTblEvCatTyp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblEventReasonType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EmptyTblEvTyp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EmptyTblEvRsnTyp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblEventType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EmptyTblInstitution",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EmptyTblPupil",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblInstitution",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"SinkToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EmptyTblEv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EmptyTblInstitutionType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblEvent",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblPupil",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblPerson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPupil",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EducationDetails": {},
									"People": {},
									"TblPerson": {},
									"People2": {},
									"TblPupil": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblPerson",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "I-TblInstitutionToInstitutionType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPerson",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EducationDetails": {},
									"People": {},
									"TblPerson": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblEvToInst",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblEv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ExclusionsSource": {},
									"StudHistSource": {},
									"EvSource": {},
									"InstSource": {},
									"EvTypSource": {},
									"SinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblEvToMtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblEvToInst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToMetric",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ExclusionsSource": {},
									"StudHistSource": {},
									"EvSource": {},
									"EvMtrTypSource": {},
									"SinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblEvToSts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblEvToPup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"TblEv": {},
									"TblEvStsTyp": {},
									"Sink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblEvToPup",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblEvToMtr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Exclusions": {},
									"TblEv": {},
									"TblPupil": {},
									"StudHist": {},
									"TblEvTyp": {},
									"EvToTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblPersonToPupil",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblEvToSts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPersonToPupil",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EducationDetails": {},
									"TblPerson": {},
									"TblPupil": {},
									"TblPersonToPupil": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-TblPupilToMetric",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblPersonToPupil",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPupilToMetric",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Pup": {},
									"Ev": {},
									"Inst": {},
									"PupMtrTyp": {},
									"TblPupilToMetric": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-PupToSts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-PupAttnd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPupilToStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EducationDetails": {},
									"TblPupil": {},
									"TblPersonStatusType": {},
									"People": {},
									"PupToSts": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "P-PupAttnd",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "P-TblPupil",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblPupilAttendance",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StudentAttendance": {},
									"TblPupil": {},
									"TblAttndSumryTyp": {},
									"TblPupilAttendanceType": {},
									"TblInstitution": {},
									"PupAttnd": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EmptyTblInstitutionType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EmptyTblInstitution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblInstitutionType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventCategoryType')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPupilAttendanceType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPupilMetricTypeCode')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventReasonType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblAttendanceSummaryType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventMetricType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblInstitutionType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPersonStatusType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblInstitution')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblInstitutionToInstitutionType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEvent')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblPupil')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblEventCategoryType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblEventReasonType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblEventType')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblInstitution')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblEvent')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPupil')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPerson')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToMetric')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToStatus')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPersonToPupil')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPupilToMetric')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPupilToStatus')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblPupilAttendance')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblInstitutionType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_ClearTables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Clear and Initialize Database Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[uspDeleteAllData]"
						},
						"linkedServiceName": {
							"referenceName": "sqldb_swis_contoso_uks_01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqldb_swis_contoso_uks_01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_LL1_Assessment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TBL_DOC_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblDocumentType1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfAssessmentType": {},
									"sinkTblDocTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_STS_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_DOC_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventStatusType1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcewfpicklistitem": {},
									"TblEvStsTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_STS_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfassessment": {},
									"WfAssessmentType": {},
									"TblEvTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEvent1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsRefer": {},
									"sourcePpMark": {},
									"sourceWfAssessment": {},
									"sourceWfAssessmentType": {},
									"sourceEvTyp": {},
									"sinkTblEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_STS",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToStatus1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IcsRefer": {},
									"Ppmark": {},
									"Wfassessment": {},
									"WfAssessmentType": {},
									"TblEvTyp": {},
									"TblEvStsTyp": {},
									"TblEv": {},
									"TblEvToSts": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_DOC_TO_EV",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TO_STS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblDocumentToEvent1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IcsRefer": {},
									"Ppmark": {},
									"Wfassessment": {},
									"WfAssessmentType": {},
									"TblEvTyp": {},
									"TblEv": {},
									"TblDocTyp": {},
									"WfaAnswer": {},
									"WfaSession": {},
									"IsPerson": {},
									"TblEvToDoc": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_PUP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_DOC_TO_EV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Exclusions": {},
									"TblEv": {},
									"TblPupil": {},
									"StudHist": {},
									"TblEvTyp": {},
									"EvToTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_INST",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TO_PUP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TblEv": {},
									"TblEvTyp": {},
									"TblEvToPup": {},
									"TblEvToInst": {},
									"IcsRefer": {},
									"Wfassessment": {},
									"Isperson": {},
									"Ppmark": {},
									"Wfassessmenttype": {},
									"TblPupil": {},
									"TblEvTypEXT": {},
									"EvToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblDocumentType1')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventStatusType1')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType1')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEvent1')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToStatus1')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblDocumentToEvent1')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_LL2_Contacts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TBL_EV",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventLL2_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsContact": {},
									"sourceWfAssessment": {},
									"sourceEcafContact": {},
									"sourcePpMark": {},
									"sourceWfAssessmentTyp": {},
									"sourceEvTyp": {},
									"sinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_RSN_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventReasonType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Wfpicklistitem": {},
									"EvRsnTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_CAT_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_RSN_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventCategoryType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Wfpicklistitem": {},
									"EvCatTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_STS_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_CAT_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventStatusType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Wfpicklistitem": {},
									"TblEvStsTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_STS_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Wfpicklistitem": {},
									"TblEvTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventLL2_2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsContacts": {},
									"sourceWfAssessment": {},
									"sourceEcafContact": {},
									"sourceEvTyp": {},
									"sourceIsPerson": {},
									"sourceEvRsnTyp": {},
									"sourceEvCatTyp": {},
									"sinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_PUP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icscontact2": {},
									"Isperson": {},
									"Wfassessment": {},
									"Ecafcontact": {},
									"TblPupil": {},
									"TblEv": {},
									"TblEvTyp": {},
									"TblEvToPup": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_EvToInst2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TO_PUP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icscontact2": {},
									"Wfassessment": {},
									"Ecafcontact": {},
									"TblEv": {},
									"TblEvTyp": {},
									"TblEvToPup": {},
									"TblEvToInst": {},
									"Isperson": {},
									"TblPupil": {},
									"EvToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationshipType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_EvToInst2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationshipType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceInternalReferenceData": {},
									"sinkRelShpTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationship2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventRelationshipType2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationship2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsContact": {},
									"sourceWfAssessment": {},
									"sourceEcafContact": {},
									"sourceTblEv": {},
									"sourceTblEvTyp": {},
									"sourceRelshpTyp": {},
									"sinkRelshp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventLL2_1')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventReasonType2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventCategoryType2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventStatusType2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventLL2_2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationshipType2')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationship2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_LL3_Referral')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TBL_EV_RSN_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventReasonType3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfPicklistItem": {},
									"sinkRsnTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_CAT_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_RSN_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventCategoryType3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfPicklistItem": {},
									"sinkCatTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_CAT_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sinkEvTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventLL3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsRefer": {},
									"sourceWfAssessment": {},
									"sourcePpMark": {},
									"sourceEvRsnTyp": {},
									"sourceEvTyp": {},
									"sourceEvCatTyp": {},
									"sinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_PUP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsrefer": {},
									"Wfassessment": {},
									"Ppmark": {},
									"Isperson": {},
									"TblPupil": {},
									"TblEv": {},
									"TblEvTyp": {},
									"EvToPup": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_INST",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TO_PUP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TblEv": {},
									"TblEvTyp": {},
									"TblEvToPup": {},
									"TblEvToInst": {},
									"Icsrefer": {},
									"Wfassessment": {},
									"Ppmark": {},
									"IsPerson": {},
									"TblPupil": {},
									"EvToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationshipType3",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TO_INST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationshipType3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceInternalReferenceData": {},
									"sinkRelShpTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationship3",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventRelationshipType3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationship3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsrefer": {},
									"Ppmark": {},
									"Wfassessment": {},
									"Wfassessmenttyp": {},
									"Isperson": {},
									"TblPupil": {},
									"TblEv": {},
									"TblEvTyp": {},
									"TblRelshpTyp": {},
									"TblEvRelshp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventToPupil1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventRelationship3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IcsRefer": {},
									"Ppmark": {},
									"Wfassessment": {},
									"Wfassessmenttype": {},
									"TblEvTyp": {},
									"Isperson": {},
									"TblPupil": {},
									"TblEv": {},
									"TblEvToPup": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventReasonType3')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventCategoryType3')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType3')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventLL3')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil3')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution3')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationshipType3')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationship3')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_LL4_CPP')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TBL_EV_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"TblEvTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_CAT_TYP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventCategoryType4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"TblCatTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_CAT_TYP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEvent4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsRefer": {},
									"sourceIsPerson": {},
									"sourceIcsPreg": {},
									"sourceIcsCprchist": {},
									"sourceEvTyp": {},
									"sourceEvCatTyp": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_PUP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsRefer": {},
									"sourceIsPerson": {},
									"sourceIcsPreg": {},
									"sourceIcsCprchist": {},
									"sourceEvTyp": {},
									"sourceEv": {},
									"sourceTblPupil": {},
									"sinkEvToPup": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TBL_EV_TO_INST",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TO_PUP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsRefer": {},
									"sourceIsPerson": {},
									"sourceIcsPreg": {},
									"sourceIcsCprchist": {},
									"sourceEvTyp": {},
									"sourceEv": {},
									"sourceTblPupil": {},
									"sourceEvToInst": {},
									"sourceEvToPup": {},
									"sinkEvToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationshipType4",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TBL_EV_TO_INST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationshipType4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationship4",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventRelationshipType4",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationship4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceIcsRefer": {},
									"sourceIsPerson": {},
									"sourceIcsPreg": {},
									"sourceIcsCprchist": {},
									"sourceEvTyp": {},
									"sourceEvCatTyp": {},
									"sourceEv": {},
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType4')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventCategoryType4')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEvent4')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil4')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution4')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationshipType4')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationship4')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_LL5_CINP')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "flow_TblEventType5",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceInternalReferenceData": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEvent5",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventType5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEvent5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCpCarePlan": {},
									"sourceEvTyp": {},
									"sourceISPerson": {},
									"sourceIcsRefer": {},
									"sinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventToPupil5",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEvent5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CpCarePlan": {},
									"IcsRefer": {},
									"IsPerson": {},
									"EvTyp": {},
									"Ev": {},
									"Pup": {},
									"EvToPup": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventToInstitution5",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventToPupil5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TblEv": {},
									"TblEvTyp": {},
									"TblEvToPup": {},
									"TblEvToInst": {},
									"CpCarePlan": {},
									"IcsRefer": {},
									"IsPerson": {},
									"Pup": {},
									"EvToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationshipType5",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventToInstitution5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationshipType5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"EvRelshpTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationship5",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventRelationshipType5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationship5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCpCarePlan": {},
									"sourceEvTyp": {},
									"sourceISPerson": {},
									"sourceIcsRefer": {},
									"sourceEv": {},
									"sourceRelshpTyp": {},
									"sinkEvRelshp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType5')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEvent5')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil5')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution5')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationshipType5')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationship5')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_LL6_CIC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "flow_TblEventType6",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalReferenceData": {},
									"EvTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventReasonType6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventType6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventReasonType6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Wfpicklistitem": {},
									"EvRsnTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventStatusType6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventReasonType6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventStatusType6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Wfpicklistitem": {},
									"EvStsTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEvent6a",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventStatusType6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEvent61",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsplacement": {},
									"icsperiodcare": {},
									"Icslegalorders": {},
									"Wfpicklistitem": {},
									"EvTyp": {},
									"EvRsnTyp": {},
									"Ev": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventToStatus6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEvent6a",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToStatus6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsplacement": {},
									"Icsperiodcare": {},
									"Icslegalorders": {},
									"Wfpicklistitem": {},
									"Ev": {},
									"EvTyp": {},
									"EvStsTyp": {},
									"EvToSts": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_EvToPup6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventToStatus6",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsplacement": {},
									"Icsperiodcare": {},
									"Icslegalorders": {},
									"Wfpicklistitem": {},
									"Isperson": {},
									"TblPupil": {},
									"TblEv": {},
									"TblEvTyp": {},
									"EvToPup": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_EvToInst6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_EvToPup6",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsplacement": {},
									"Icsperiodcare": {},
									"Icslegalorders": {},
									"Wfpicklistitem": {},
									"Isperson": {},
									"TblPupil": {},
									"TblEv": {},
									"TblEvTyp": {},
									"TblEv1": {},
									"TblEvTyp2": {},
									"TblEvToPup": {},
									"TblEvToInst": {},
									"EvToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEvent6b",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_EvToInst6",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEvent62",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsplacement": {},
									"Icsperiodcare": {},
									"Icslegalorders": {},
									"Wfpicklistitem": {},
									"Wfassessment": {},
									"Wfassessmenttype": {},
									"Wfasession": {},
									"Wfaanswer": {},
									"Wfpicklistitem1": {},
									"EvTyp": {},
									"TblEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationshipType6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEvent6b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationshipType6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InternalRefData": {},
									"EvRelshpTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventRelationship6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventRelationshipType6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventRelationship6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Icsplacement": {},
									"icsperiodcare": {},
									"Icslegalorders": {},
									"Wfpicklistitem": {},
									"EvTyp": {},
									"sourceEv": {},
									"sourceWfAssessment": {},
									"sourceWfaAssessmentType": {},
									"sourceWfaSession": {},
									"sourceWfaAnswer": {},
									"sourceWfPicklistitem": {},
									"sourceRelshpTyp": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType6')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventReasonType6')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventStatusType6')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEvent61')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToStatus6')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil6')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution6')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEvent62')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationshipType6')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventRelationship6')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_LL7_CPC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "flow_TblEventType7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventStatusType7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventType7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sinkEvStsTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventStatusType7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_EmptyTblEventStatusType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventStatusType7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sinkEvStsTyp": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEvent7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventType7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEvent7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfAssessment": {},
									"sourceWfAssessmentType": {},
									"sourcePpMark": {},
									"sourceEvTyp": {},
									"sinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventToStatus7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEvent7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToStatus7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfAssessment": {},
									"sourceWfAssessmentType": {},
									"sourcePpMark": {},
									"sourceEvTyp": {},
									"sourceWfAssessmentArchive": {},
									"sourceTblEv": {},
									"sourceEvStsTyp": {},
									"sinkEv": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventToPupil7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventToStatus7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToPupil7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfAssessment": {},
									"sourceWfAssessmentType": {},
									"sourcePpMark": {},
									"sourceEvTyp": {},
									"sourceWfAssessmentArchive": {},
									"sourceTblEv": {},
									"sourceEvStsTyp": {},
									"sourceIsPerson": {},
									"sourcePup": {},
									"sinkEvToPup": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblEventToInstitution7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventToPupil7",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblEventToInstitution7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfAssessment": {},
									"sourceWfAssessmentType": {},
									"sourcePpMark": {},
									"sourceEvTyp": {},
									"sourceWfAssessmentArchive": {},
									"sourceTblEv": {},
									"sourceEvStsTyp": {},
									"sourceIsPerson": {},
									"sourcePup": {},
									"sourceEvtoPup": {},
									"sourceEvtoInst": {},
									"sinkEvToInst": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_TblDocumentumentToEvent7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "flow_TblEventToInstitution7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_TblDocumentToEvent7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceWfAssessment": {},
									"sourceWfAssessmentType": {},
									"sourcePpMark": {},
									"sourceEvTyp": {},
									"sourceTblEv": {},
									"sourceEvStsTyp": {},
									"sourceDocTyp": {},
									"sourceIsperson": {},
									"sourceWfaSession": {},
									"sourceWfaAnswer": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "flow_EmptyTblEventStatusType",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flow_EmptyTblEventStatusType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventType7')]",
				"[concat(variables('workspaceId'), '/linkedServices/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventStatusType7')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEvent7')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToStatus7')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToPupil7')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblEventToInstitution7')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_TblDocumentToEvent7')]",
				"[concat(variables('workspaceId'), '/dataflows/flow_EmptyTblEventStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipe_SWIS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pipe_ClearTables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_ClearTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_CapitaOne",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_ClearTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_CapitaOne",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_LL1_Assessment",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_CapitaOne",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_LL1_Assessment",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_LL2_Contacts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_LL1_Assessment",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_LL2_Contacts",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_LL3_Referral",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_LL1_Assessment",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_LL3_Referral",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_LL5_CINP",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_LL1_Assessment",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_LL5_CINP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_LL6_CIC",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_LL1_Assessment",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_LL6_CIC",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_LL7_CPC",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_LL1_Assessment",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_LL7_CPC",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pipe_LL4_CPP",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pipe_LL1_Assessment",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_LL4_CPP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pipe_ClearTables')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_CapitaOne')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_LL1_Assessment')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_LL2_Contacts')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_LL3_Referral')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_LL5_CINP')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_LL6_CIC')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_LL7_CPC')]",
				"[concat(variables('workspaceId'), '/pipelines/pipe_LL4_CPP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblAttendanceSummaryType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "InstitutionSourceKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Code",
						"type": "varchar"
					},
					{
						"name": "Meaning",
						"type": "varchar"
					},
					{
						"name": "StatutoryMeaning",
						"type": "varchar"
					},
					{
						"name": "SchoolMeaning",
						"type": "varchar"
					},
					{
						"name": "TransactionalStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TransactionalEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "AttendanceSummaryTypeId",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblAttendanceSummaryType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblDocumentToEvent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DocumentToEventValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventCounter",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DocumentTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DocumentToEventDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventSourceId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DocumentToEventMarkerID",
						"type": "varchar"
					},
					{
						"name": "DocumentToEventPathReference",
						"type": "varchar"
					},
					{
						"name": "DocumentToEventFormEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventFormStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventFormDueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventFormCompleteDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentToEventFormAuthorisedEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentAuthorisedStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentAuthorisedEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblDocumentumentToEvent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblDocumentType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "DocumentTypeForm",
						"type": "varchar"
					},
					{
						"name": "DocumentTypeGroup",
						"type": "varchar"
					},
					{
						"name": "DocumentTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DocumentTypeCreator",
						"type": "varchar"
					},
					{
						"name": "DocumentTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentTypeDescription",
						"type": "varchar"
					},
					{
						"name": "DocumentTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DocumentTypeSourceKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DocumentTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentTypeValid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DocumentTypeValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentTypeValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DocumentTypeFileName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblDocumentType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEvent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventReasonTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventCategoryTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventSourceKey",
						"type": "varchar"
					},
					{
						"name": "EventValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventAcademicYear",
						"type": "varchar"
					},
					{
						"name": "EventDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventValidCreationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEvent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventCategoryType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventCategoryTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventCategoryTypeDescription",
						"type": "varchar"
					},
					{
						"name": "EventCategoryTypeGroup",
						"type": "varchar"
					},
					{
						"name": "EventCategoryTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventCategoryTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventCategoryTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventCategoryTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventCategoryTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventCategoryTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "EventCategoryTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "EventCategoryTypeExternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventCategoryType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventMetricType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventMetricTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventMetricTypeDescription",
						"type": "varchar"
					},
					{
						"name": "EventMetricTypeGroup",
						"type": "varchar"
					},
					{
						"name": "EventMetricTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventMetricTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventMetricTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventMetricTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventMetricTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventMetricTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "EventMetricTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "EventMetricTypeExternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventMetricType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventReasonType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventReasonTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventReasonTypeDescription",
						"type": "varchar"
					},
					{
						"name": "EventReasonTypeGroup",
						"type": "varchar"
					},
					{
						"name": "EventReasonTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventReasonTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventReasonTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventReasonTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventReasonTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventReasonTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "EventReasonTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "EventReasonTypeExternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventReasonType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventRelationship')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventRelationshipTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventRELATEDId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventRelationshipValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipTypeId",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventRelationship"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventRelationshipType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventRelationshipTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventRelationshipTypeGroup",
						"type": "varchar"
					},
					{
						"name": "EventRelationshipTypeDescription",
						"type": "varchar"
					},
					{
						"name": "EventRelationshipTypeExternalCode",
						"type": "varchar"
					},
					{
						"name": "EventRelationshipTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "EventRelationshipTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipTypeSourceCode",
						"type": "varchar"
					},
					{
						"name": "EventRelationshipTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventRelationshipTypeSubGroup",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventRelationshipType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventStatusType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventStatusTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventStatusTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventStatusTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventStatusTypeDescription",
						"type": "varchar"
					},
					{
						"name": "EventStatusTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventStatusTypeGroup",
						"type": "varchar"
					},
					{
						"name": "EventStatusTypeSourceId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventStatusTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventStatusTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "EventStatusTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "EventStatusTypeExternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventStatusType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventToInstitution')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "InstitutionId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventToInstitutionTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToInstitutionTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToInstitutionSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventToInstitutionDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToInstitutionValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToInstitutionValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToInstitutionRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToInstitutionCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventToInstitution"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventToMetric')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventToMetricTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToMetricValue",
						"type": "decimal",
						"precision": 12,
						"scale": 9
					},
					{
						"name": "EventMetricTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventToMetricTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToMetricValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToMetricValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToMetricSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventToMetricDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToMetricRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventToMetricCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventToMetric"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventToPupil')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventToPupilTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventToPupilSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventToPupilTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToPupilDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToPupilValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToPupilValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToPupilRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToPupilCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventToPupil"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventToStatus')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventStatusTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventToStatusTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToStatusFlag",
						"type": "bit"
					},
					{
						"name": "EventToStatusSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventToStatusTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToStatusValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToStatusValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToStatusDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToStatusRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventToStatusCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventToStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblEventType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "EventTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EventTypeDescription",
						"type": "varchar"
					},
					{
						"name": "EventTypeGroup",
						"type": "varchar"
					},
					{
						"name": "EventTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "EventTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "EventTypeExternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblEventType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblInstitution')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "InstitutionId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionURN",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InstitutionPhase",
						"type": "varchar"
					},
					{
						"name": "InstitutionName",
						"type": "varchar"
					},
					{
						"name": "InstitutionSourceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InstitutionDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionAgeRange",
						"type": "varchar"
					},
					{
						"name": "InstitutionDFE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InstitutionSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InstitutionRowInstitutionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionToHistory",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblInstitution"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblInstitutionToInstitutionType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "InstitutionId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionToInstitutionTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionToInstitutionTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionToInstitutionTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InstitutionToInstitutionTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionToInstitutionTypeValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionToInstitutionTypeValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionToInstitutionTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionToInstitutionTypeCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblInstitutionToInstitutionType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblInstitutionType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "InstitutionTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InstitutionTypeDescription",
						"type": "varchar"
					},
					{
						"name": "InstitutionTypeGroup",
						"type": "varchar"
					},
					{
						"name": "InstitutionTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "InstitutionTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "InstitutionTypeExternalCode",
						"type": "varchar"
					},
					{
						"name": "InstitutionTypeInternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblInstitutionType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPerson')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PersonId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PersonMdmId",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "PersonMiddleName",
						"type": "varchar"
					},
					{
						"name": "PersonSurname",
						"type": "varchar"
					},
					{
						"name": "PersonDateOfBirth",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonDateOfDeath",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonGender",
						"type": "varchar"
					},
					{
						"name": "PersonTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonForename",
						"type": "varchar"
					},
					{
						"name": "PersonTitle",
						"type": "varchar"
					},
					{
						"name": "PersonActive",
						"type": "bit"
					},
					{
						"name": "PersonKnownBy",
						"type": "varchar"
					},
					{
						"name": "PersonLegalSurname",
						"type": "varchar"
					},
					{
						"name": "PersonLegalForename",
						"type": "varchar"
					},
					{
						"name": "PersonSourceKey",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "PersonChecksum",
						"type": "varchar"
					},
					{
						"name": "PersonDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonSourceId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PersonRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonToHistory",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPerson"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPersonStatusType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PersonStatusTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PersonStatusTypeDescription",
						"type": "varchar"
					},
					{
						"name": "PersonStatusTypeGroup",
						"type": "varchar"
					},
					{
						"name": "PersonStatusTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonStatusTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonStatusTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonStatusTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PersonStatusTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonStatusTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "PersonStatusTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "PersonStatusTypeExternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPersonStatusType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPersonToPupil')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PersonId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PersonToPupilTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonToPupilSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PersonToPupilTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonToPupilDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonToPupilRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PersonToPupilCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPersonToPupil"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPupil')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilUPN",
						"type": "varchar"
					},
					{
						"name": "PupilCurrent",
						"type": "bit"
					},
					{
						"name": "PupilTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilActive",
						"type": "bit"
					},
					{
						"name": "PupilSourceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PupilSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PupilDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToHistory",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPupil"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPupilAttendance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilAttendanceTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceCounter",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilAttendanceDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceMarkDescription",
						"type": "varchar"
					},
					{
						"name": "PupilAttendanceTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilAttendanceSummarySourceId",
						"type": "char"
					},
					{
						"name": "AttendanceSummaryTypeId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPupilAttendance"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPupilAttendanceType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilAttendanceTypeDescription",
						"type": "varchar"
					},
					{
						"name": "PupilAttendanceTypeGroup",
						"type": "varchar"
					},
					{
						"name": "PupilAttendanceTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilAttendanceTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilAttendanceTypeSourceId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilAttendanceTypeInternalCode",
						"type": "varchar"
					},
					{
						"name": "PupilAttendanceTypeExternalCode",
						"type": "varchar"
					},
					{
						"name": "PupilAttendanceTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "PupilAttendanceTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPupilAttendanceType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPupilMetricType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilMetricTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilMetricTypeDescription",
						"type": "varchar"
					},
					{
						"name": "PupilMetricTypeGroup",
						"type": "varchar"
					},
					{
						"name": "PupilMetricTypeTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilMetricTypeTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilMetricTypeDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilMetricTypeSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PupilMetricTypeRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilMetricTypeSubGroup",
						"type": "varchar"
					},
					{
						"name": "PupilMetricTypeExternalCode",
						"type": "varchar"
					},
					{
						"name": "PupilMetricTypeInternalCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPupilMetricType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPupilToMetric')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilToMetricValue",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PupilToMetricTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToMetricSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PupilMetricTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilToMetricTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToMetricValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToMetricValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToMetricDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToMetricRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilToMetricCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPupilToMetric"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_TblPupilToStatus')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsedwh_swis_contoso_uks_001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PupilId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilToStatusFlag",
						"type": "bit"
					},
					{
						"name": "PupilToStatusTransactionEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToStatusSourceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PupilToStatusValidStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToStatusValidEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PersonStatusTypeId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilToStatusTransactionStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToStatusDeleted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PupilToStatusRowInsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InstitutionId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PupilToStatusCounter",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TblPupilToStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsedwh_swis_contoso_uks_001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dls_gdp_contoso_enriched')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dls_gdp_contoso_enriched_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "air-swis-contoso-dev-001",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/air-swis-contoso-dev-001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/kv_swis_contoso_01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('kv_swis_contoso_01_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqldb_swis_contoso_uks_01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sqldb_swis_contoso_uks_01_connectionString')]"
				},
				"connectVia": {
					"referenceName": "air-swis-contoso-dev-001",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/air-swis-contoso-dev-001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-swis-socialservices-we-dev-001-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-swis-socialservices-we-dev-001-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsedwh_swis_contoso_uks_001')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsedwh_swis_contoso_uks_001_connectionString')]"
				},
				"connectVia": {
					"referenceName": "air-swis-contoso-dev-001",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/air-swis-contoso-dev-001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/triggerPipeSWIS')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipe_SWIS",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-22T07:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pipe_SWIS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/air-swis-contoso-dev-001')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/air-swis-contoso-dev-01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"nodeSize": "Standard_D8_v3",
						"numberOfNodes": 2,
						"maxParallelExecutionsPerNode": 8
					},
					"ssisProperties": {
						"edition": "Standard",
						"licenseType": "LicenseIncluded"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblEvent')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nInternalReferenceData derive(EventTransactionStartDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventId = 0,\n\t\tEventTypeId = 0,\n\t\tEventReasonTypeId = 0,\n\t\tEventCategoryTypeId = 0,\n\t\tEV_TERM_TYP_ID = 0,\n\t\tEventTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventSourceId = 0,\n\t\tEventSourceKey = 0,\n\t\tEventValidStartDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventValidEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventAcademicYear = 0,\n\t\tEventDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventValidCreationDate = toDate('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tEventTransactionStartDate,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventCategoryTypeId,\n\t\tEV_TERM_TYP_ID,\n\t\tEventTransactionEndDate,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nSelect2 aggregate(groupBy(EventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventCategoryTypeId,\n\t\tEV_TERM_TYP_ID,\n\t\tEventTransactionEndDate,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate,\n\t\tEventId),\n\tCountAll = count(1)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV] OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate = EventTransactionEndDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblEventCategoryType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "FilterEmpty"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nAggregate1 derive(EV_CAT_TYP_TRNS_STR_DT = currentTimestamp(),\n\t\tEV_CAT_TYP_TRNS_END_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_DEL = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_SRC_ID = -1,\n\t\tEV_CAT_TYP_ROW_INST_DT = currentTimestamp(),\n\t\tEventCategoryTypeId = toLong(INTERNAL_CODE)) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tEV_CAT_TYP_INTRN_CD = INTERNAL_CODE,\n\t\tEventCategoryTypeId,\n\t\tEV_CAT_TYP_DESC = DESCRIPTION,\n\t\tEV_CAT_TYP_GRP = GROUP,\n\t\tEV_CAT_TYP_SUB_GRP = SUB_GROUP,\n\t\tEV_CAT_TYP_EXTRN_CD = EXTERNAL_CODE,\n\t\tEV_CAT_TYP_TRNS_STR_DT,\n\t\tEV_CAT_TYP_TRNS_END_DT,\n\t\tEV_CAT_TYP_DEL,\n\t\tEV_CAT_TYP_SRC_ID,\n\t\tEV_CAT_TYP_ROW_INST_DT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nInternalReferenceData aggregate(groupBy(INTERNAL_CODE,\n\t\tDESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> Aggregate1\nSelect2 filter(and(equals(EV_CAT_TYP_DESC, 'EMPTY_VALUE_PLACEHOLDER'), equals(EV_CAT_TYP_GRP, 'GLOBAL'))) ~> FilterEmpty\nFilterEmpty alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventCategoryTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_CAT_TYP] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_CAT_TYP] OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventCategoryTypeId,\n\t\tEventCategoryTypeDescription = EV_CAT_TYP_DESC,\n\t\tEventCategoryTypeGroup = EV_CAT_TYP_GRP,\n\t\tEventCategoryTypeTransactionStartDate = EV_CAT_TYP_TRNS_STR_DT,\n\t\tEventCategoryTypeTransactionEndDate = EV_CAT_TYP_TRNS_END_DT,\n\t\tEventCategoryTypeDeleted = EV_CAT_TYP_DEL,\n\t\tEventCategoryTypeSourceId = EV_CAT_TYP_SRC_ID,\n\t\tEventCategoryTypeRowInsertedDate = EV_CAT_TYP_ROW_INST_DT,\n\t\tEventCategoryTypeSubGroup = EV_CAT_TYP_SUB_GRP,\n\t\tEventCategoryTypeInternalCode = EV_CAT_TYP_INTRN_CD,\n\t\tEventCategoryTypeExternalCode = EV_CAT_TYP_EXTRN_CD\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblEventReasonType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "FilterEmpty"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "FilterError"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nAggregate1 derive(EventReasonTypeTransactionStartDate = currentTimestamp(),\n\t\tEventReasonTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = -1,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp(),\n\t\tEventReasonTypeId = toLong(INTERNAL_CODE)) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tEventReasonTypeInternalCode = INTERNAL_CODE,\n\t\tEventReasonTypeId,\n\t\tEventReasonTypeDescription = DESCRIPTION,\n\t\tEventReasonTypeGroup = GROUP,\n\t\tEventReasonTypeSubGroup = SUB_GROUP,\n\t\tEventReasonTypeExternalCode = EXTERNAL_CODE,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nInternalReferenceData aggregate(groupBy(INTERNAL_CODE,\n\t\tDESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> Aggregate1\nSelect2 filter(and(equals(EventReasonTypeDescription, 'EMPTY_VALUE_PLACEHOLDER'), equals(EventReasonTypeGroup, 'GLOBAL'))) ~> FilterEmpty\nUnion1 alterRow(upsertIf(true())) ~> AlterRow1\nSelect2 filter(and(equals(EventReasonTypeDescription, 'ERROR_VALUE_PLACEHOLDER'), equals(EventReasonTypeGroup, 'GLOBAL'))) ~> FilterError\nFilterEmpty, FilterError union(byName: true)~> Union1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventReasonTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_RSN_TYP] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_RSN_TYP] OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventReasonTypeId,\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeExternalCode\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblEventStatusType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> source1\nSelect1 derive(EventStatusTypeId = -1,\n\t\tEventStatusTypeTransactionStartDate = currentTimestamp(),\n\t\tEventStatusTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeDescription = 'CHILD_PROTECTION_CONFERENCE',\n\t\tEventStatusTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeGroup = 'CHILD_PROTECTION_CONFERENCE',\n\t\tEventStatusTypeSourceId = 3,\n\t\tEventStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tEventStatusTypeSubGroup = 'CHILD_PROTECTION_CONFERENCE_OUTCOMES',\n\t\tEventStatusTypeInternalCode = 'No Oucomes Found in Source',\n\t\tEventStatusTypeExternalCode = 'No Oucomes Found in Source') ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tENRICH_SOURCE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn1 select(mapColumn(\n\t\tEventStatusTypeId,\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 aggregate(groupBy(EventStatusTypeDescription,\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeId,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventStatusTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_STS_TYP] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_STS_TYP] OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeId,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblEventType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "FilterEmpty"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nAggregate1 derive(EventTypeTransactionStartDate = currentTimestamp(),\n\t\tEventTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeSourceId = -1,\n\t\tEventTypeRowInsertedDate = currentTimestamp(),\n\t\tEventTypeId = toLong(INTERNAL_CODE)) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tEventTypeInternalCode = INTERNAL_CODE,\n\t\tEventTypeDescription = DESCRIPTION,\n\t\tEventTypeGroup = GROUP,\n\t\tEventTypeSubGroup = SUB_GROUP,\n\t\tEventTypeExternalCode = EXTERNAL_CODE,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nInternalReferenceData aggregate(groupBy(INTERNAL_CODE,\n\t\tDESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> Aggregate1\nSelect2 filter(and(\r\nequals(EventTypeGroup,\"GLOBAL\"),\r\nequals(EventTypeDescription,\"EMPTY_VALUE_PLACEHOLDER\")\r\n)) ~> FilterEmpty\nFilterEmpty alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_TYP] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TBL_EV_TYP] OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblInstitution')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblInstitution",
								"type": "DatasetReference"
							},
							"name": "SinkToInst"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nInternalReferenceData derive(InstitutionURN = -1,\n\t\tInstitutionPhase = 'N/A',\n\t\tInstitutionName = 'N/A',\n\t\tInstitutionSourceKey = -1,\n\t\tInstitutionDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionTransactionStartDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionAgeRange = 'N/A',\n\t\tInstitutionDFE = 0,\n\t\tInstitutionSourceId = 0,\n\t\tInstitutionRowInstitutionDate = currentTimestamp(),\n\t\tInstitutionToHistory = -1,\n\t\tInstitutionId = 0) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tInstitutionURN,\n\t\tInstitutionPhase,\n\t\tInstitutionName,\n\t\tInstitutionSourceKey,\n\t\tInstitutionDeleted,\n\t\tInstitutionTransactionStartDate,\n\t\tInstitutionTransactionEndDate,\n\t\tInstitutionAgeRange,\n\t\tInstitutionDFE,\n\t\tInstitutionSourceId,\n\t\tInstitutionRowInstitutionDate,\n\t\tInstitutionToHistory,\n\t\tInstitutionId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 aggregate(groupBy(InstitutionURN,\n\t\tInstitutionPhase,\n\t\tInstitutionName,\n\t\tInstitutionSourceKey,\n\t\tInstitutionDeleted,\n\t\tInstitutionTransactionStartDate,\n\t\tInstitutionTransactionEndDate,\n\t\tInstitutionAgeRange,\n\t\tInstitutionDFE,\n\t\tInstitutionSourceId,\n\t\tInstitutionRowInstitutionDate,\n\t\tInstitutionToHistory,\n\t\tInstitutionId),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tInstitutionURN as integer,\n\t\tInstitutionPhase as string,\n\t\tInstitutionName as string,\n\t\tInstitutionSourceKey as integer,\n\t\tInstitutionDeleted as timestamp,\n\t\tInstitutionTransactionStartDate as timestamp,\n\t\tInstitutionTransactionEndDate as timestamp,\n\t\tInstitutionAgeRange as string,\n\t\tInstitutionDFE as integer,\n\t\tInstitutionSourceId as integer,\n\t\tInstitutionRowInstitutionDate as timestamp,\n\t\tInstitutionToHistory as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TBL_INST] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TBL_INST] OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tInstitutionURN,\n\t\tInstitutionPhase,\n\t\tInstitutionName,\n\t\tInstitutionSourceKey,\n\t\tInstitutionDeleted,\n\t\tInstitutionTransactionStartDate,\n\t\tInstitutionTransactionEndDate,\n\t\tInstitutionAgeRange,\n\t\tInstitutionDFE,\n\t\tInstitutionSourceId,\n\t\tInstitutionRowInstitutionDate,\n\t\tInstitutionToHistory\n\t)) ~> SinkToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitution')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblInstitutionType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblInstitutionType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "FilterEmpty"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nAggregate1 derive(InstitutionTypeTransactionStartDate = currentTimestamp(),\n\t\tInstitutionTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionTypeSourceId = -1,\n\t\tInstitutionTypeRowInsertedDate = currentTimestamp(),\n\t\tInstitutionTypeId = 0) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tInstitutionTypeInternalCode = INTERNAL_CODE,\n\t\tInstitutionTypeDescription = DESCRIPTION,\n\t\tInstitutionTypeGroup = GROUP,\n\t\tInstitutionTypeSubGroup = SUB_GROUP,\n\t\tInstitutionTypeExternalCode = EXTERNAL_CODE,\n\t\tInstitutionTypeTransactionStartDate,\n\t\tInstitutionTypeTransactionEndDate,\n\t\tInstitutionTypeDeleted,\n\t\tInstitutionTypeSourceId,\n\t\tInstitutionTypeRowInsertedDate,\n\t\tInstitutionTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nInternalReferenceData aggregate(groupBy(INTERNAL_CODE,\n\t\tDESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> Aggregate1\nSelect2 filter(and(\r\nequals(InstitutionTypeGroup,\"SCHOOL_ALLOCATION_TYPE\"),\r\nequals(InstitutionTypeDescription,\"EMPTY_VALUE_PLACEHOLDER\")\r\n)) ~> FilterEmpty\nFilterEmpty alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionTypeDeleted as timestamp,\n\t\tInstitutionTypeSourceId as integer,\n\t\tInstitutionTypeDescription as string,\n\t\tInstitutionTypeGroup as string,\n\t\tInstitutionTypeTransactionStartDate as timestamp,\n\t\tInstitutionTypeTransactionEndDate as timestamp,\n\t\tInstitutionTypeId as long,\n\t\tInstitutionTypeRowInsertedDate as timestamp,\n\t\tInstitutionTypeSubGroup as string,\n\t\tInstitutionTypeExternalCode as string,\n\t\tInstitutionTypeInternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TBL_INST_TYP] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TBL_INST_TYP] OFF'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionTypeDeleted,\n\t\tInstitutionTypeSourceId,\n\t\tInstitutionTypeDescription,\n\t\tInstitutionTypeGroup,\n\t\tInstitutionTypeTransactionStartDate,\n\t\tInstitutionTypeTransactionEndDate,\n\t\tInstitutionTypeId,\n\t\tInstitutionTypeRowInsertedDate,\n\t\tInstitutionTypeSubGroup,\n\t\tInstitutionTypeExternalCode,\n\t\tInstitutionTypeInternalCode\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitutionType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_EmptyTblPupil')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EmptyPlaceholders"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectCols"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nInternalReferenceData derive(PupilId = -1,\n\t\tPupilUPN = 'N/A',\n\t\tPupilCurrent = 0,\n\t\tPupilTransactionStartDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilActive = -1,\n\t\tPupilSourceKey = -1,\n\t\tPupilSourceId = -1,\n\t\tPupilDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilRowInsertedDate = currentTimestamp(),\n\t\tPupilToHistory = -1) ~> DerivedColumns\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumns select(mapColumn(\n\t\tPupilId,\n\t\tPupilUPN,\n\t\tPupilCurrent,\n\t\tPupilTransactionStartDate,\n\t\tPupilTransactionEndDate,\n\t\tPupilActive,\n\t\tPupilSourceKey,\n\t\tPupilSourceId,\n\t\tPupilDeleted,\n\t\tPupilRowInsertedDate,\n\t\tPupilToHistory\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCols\nSelectCols aggregate(groupBy(PupilId,\n\t\tPupilUPN,\n\t\tPupilCurrent,\n\t\tPupilTransactionStartDate,\n\t\tPupilTransactionEndDate,\n\t\tPupilActive,\n\t\tPupilSourceKey,\n\t\tPupilSourceId,\n\t\tPupilDeleted,\n\t\tPupilRowInsertedDate,\n\t\tPupilToHistory),\n\tcountAll = count(1)) ~> Aggregate2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tPupilUPN,\n\t\tPupilCurrent,\n\t\tPupilTransactionStartDate,\n\t\tPupilTransactionEndDate,\n\t\tPupilActive,\n\t\tPupilSourceKey,\n\t\tPupilSourceId,\n\t\tPupilDeleted,\n\t\tPupilRowInsertedDate,\n\t\tPupilToHistory\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblAttendanceSummaryType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_TblInstitution",
								"type": "DatasetReference"
							},
							"name": "INST"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblAttendanceSummaryType",
								"type": "DatasetReference"
							},
							"name": "TblAttndSumry"
						}
					],
					"transformations": [
						{
							"name": "GroupBy"
						},
						{
							"name": "Filter"
						},
						{
							"name": "Join1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tBASE_ID as decimal(38,18),\n\t\tCODE as string,\n\t\tMEANING as string,\n\t\tSTAT_MEANING as string,\n\t\tSCHOOL_MEANING as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/attendance_summary') ~> Source\nsource(output(\n\t\tInstitutionId as long,\n\t\tInstitutionURN as integer,\n\t\tInstitutionPhase as string,\n\t\tInstitutionName as string,\n\t\tInstitutionSourceKey as integer,\n\t\tInstitutionDeleted as timestamp,\n\t\tInstitutionTransactionStartDate as timestamp,\n\t\tInstitutionTransactionEndDate as timestamp,\n\t\tInstitutionAgeRange as string,\n\t\tInstitutionDFE as integer,\n\t\tInstitutionSourceId as integer,\n\t\tInstitutionRowInstitutionDate as timestamp,\n\t\tInstitutionToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> INST\nSource aggregate(groupBy(BASE_ID,\n\t\tCODE,\n\t\tMEANING,\n\t\tSTAT_MEANING,\n\t\tSCHOOL_MEANING),\n\tCountAll = count(1)) ~> GroupBy\nDerivedColumn1 filter(equals(isNull(BASE_ID), false())) ~> Filter\nFilter, INST join(BASE_ID == InstitutionSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nGroupBy derive(TRNS_STR_DT = currentTimestamp(),\n\t\tTRNS_END_DT = toDate('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn1\nJoin1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionSourceKey as long,\n\t\tCode as string,\n\t\tMeaning as string,\n\t\tStatutoryMeaning as string,\n\t\tSchoolMeaning as string,\n\t\tTransactionalStartDate as timestamp,\n\t\tTransactionalEndDate as timestamp,\n\t\tInstitutionId as long,\n\t\tAttendanceSummaryTypeId as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','Code'],\n\tformat: 'table',\n\tstaged: true,\n\tpreSQLs:[('DELETE FROM [dbo].[TBL_ATTND_SUMRY_TYP]')],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionSourceKey,\n\t\tCode = CODE,\n\t\tMeaning = MEANING,\n\t\tStatutoryMeaning = STAT_MEANING,\n\t\tSchoolMeaning = SCHOOL_MEANING,\n\t\tTransactionalStartDate = TRNS_STR_DT,\n\t\tTransactionalEndDate = TRNS_END_DT,\n\t\tInstitutionId\n\t)) ~> TblAttndSumry"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitution')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblAttendanceSummaryType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblDocumentToEvent1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ppmark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "WfAssessmentType"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblDocumentType",
								"type": "DatasetReference"
							},
							"name": "TblDocTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "WfaAnswer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "WfaSession"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IsPerson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblDocumentToEvent",
								"type": "DatasetReference"
							},
							"name": "TblEvToDoc"
						}
					],
					"transformations": [
						{
							"name": "Joinppmark"
						},
						{
							"name": "Joinwfassessment"
						},
						{
							"name": "Joinwfassessmenttype"
						},
						{
							"name": "Joinevtyp"
						},
						{
							"name": "Joinev"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "SelectTemplateID"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "JoinDocTyp"
						},
						{
							"name": "JoinWfaSession"
						},
						{
							"name": "JoinWfaAsnwer"
						},
						{
							"name": "FilterStartDate"
						},
						{
							"name": "SelectStartDate"
						},
						{
							"name": "FilterEndDate"
						},
						{
							"name": "FilterDueDate"
						},
						{
							"name": "FilterCompletedDate"
						},
						{
							"name": "SelectCompletedDate"
						},
						{
							"name": "SelectDueDate"
						},
						{
							"name": "SelectEndDate"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectPersonID"
						},
						{
							"name": "JoinStartDate"
						},
						{
							"name": "JoinCompletedDate"
						},
						{
							"name": "JoinDueDate"
						},
						{
							"name": "JoinEndDate"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "Aggregate4"
						},
						{
							"name": "Aggregate5"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> IcsRefer\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> Ppmark\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> WfAssessmentType\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tDocumentTypeForm as string,\n\t\tDocumentTypeGroup as string,\n\t\tDocumentTypeId as long,\n\t\tDocumentTypeCreator as string,\n\t\tDocumentTypeDeleted as timestamp,\n\t\tDocumentTypeDescription as string,\n\t\tDocumentTypeSourceId as integer,\n\t\tDocumentTypeSourceKey as long,\n\t\tDocumentTypeTransactionStartDate as timestamp,\n\t\tDocumentTypeTransactionEndDate as timestamp,\n\t\tDocumentTypeValid as integer,\n\t\tDocumentTypeValidStartDate as timestamp,\n\t\tDocumentTypeValidEndDate as timestamp,\n\t\tDocumentTypeFileName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblDocTyp\nsource(output(\n\t\tAnswerNo as integer,\n\t\tFormSessionNo as integer,\n\t\tQuestionID as string,\n\t\tAnswerCode as string,\n\t\tSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfaanswer') ~> WfaAnswer\nsource(output(\n\t\tSessionNo as integer,\n\t\tProcessNo as integer,\n\t\tFormNo as integer,\n\t\tSessionDate as timestamp,\n\t\tTimeframe as timestamp,\n\t\tSessionCreator as string,\n\t\tStatus as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentSessionNo as integer,\n\t\tReassignedBy as string,\n\t\tRole as string,\n\t\tMarkerID as integer,\n\t\tModDate as timestamp,\n\t\tRetractReason as string,\n\t\tRejectReason as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfasession') ~> WfaSession\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> IsPerson\nSelect2, Filter4 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1)),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinppmark\nJoinppmark, Filter5 join(Select3@MarkerID == Select4@MarkerID\n\t&& left(MainRef, instr(MainRef, '/')-1) == FormLinkKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfassessment\nJoinwfassessment, WfAssessmentType join(Select4@TemplateID == WfAssessmentType@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfassessmenttype\nJoinwfassessmenttype, Filter2 join(toString(Select4@TemplateID) == EventTypeInternalCode,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinevtyp\nJoinevtyp, TblEv join(toString(Select4@FormNo) == EventSourceKey\n\t&& toDate(DerivedColumn2@StartDate) == toDate(EventValidStartDate)\n\t&& TblEvTyp@EventTypeId == TblEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinev\nJoinIsPerson filter(in(['C','D','E'], Select4@Status)) ~> Filter1\nTblEvTyp filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_ASSESSMENT'),\r\n    notEquals(EventTypeInternalCode, 'PUPIL_ASSESSMENT')\r\n)) ~> Filter2\nSelect3 filter(and(\r\n    equals(right(UnitRef, minus(length(UnitRef),instr(UnitRef, '/'))+1), '/com.liquidlogic.assessment.DBAssessment'),\r\n    notEquals(SubStatus, 'X')\r\n)) ~> Filter4\nDerivedColumn2 filter(notEquals(Status, 'X')) ~> Filter5\nFilter1 select(mapColumn(\n\t\tEventId,\n\t\tDOC_TO_EventTransactionStartDate = EventTransactionStartDate,\n\t\tDOC_TO_EV_MRKER_ID = MarkerKey,\n\t\tDOC_TO_EventValidStartDate = EventValidStartDate,\n\t\tDOC_TO_EventValidEndDate = EventValidEndDate,\n\t\tDOC_TO_EventTransactionEndDate = EventTransactionEndDate,\n\t\tDOC_TO_EV_PATH_REF = PathRef,\n\t\tDOC_TYP_ID = DocumentTypeId,\n\t\tFormNo = Select2@FormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(DOC_TO_EventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tDOC_TO_EventSourceId = 3,\n\t\tDOC_TO_EventValidEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tDOC_TO_EventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tDOC_TO_EventRowInsertedDate = currentTimestamp(),\n\t\tDOC_TO_EV_COUNT = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)),toLong(0)),\n\t\tDOC_AUTHRSD_STR_DT = toDate(null()),\n\t\tDOC_AUTHRSD_END_DT = toDate(null()),\n\t\tDOC_TO_EV_FRM_END_DT = toDate(null())) ~> AddFixedCols\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tStartDate,\n\t\tEndDate,\n\t\tInitialContactID,\n\t\tFormNo,\n\t\tAuditDate,\n\t\tSyncDate,\n\t\tProfTelOutSystem,\n\t\tStatus,\n\t\tCategoryType,\n\t\tSubCategory,\n\t\tSuggDate,\n\t\tReasonCode,\n\t\tCreationDate,\n\t\tEndReason\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nPpmark select(mapColumn(\n\t\tMarkerID,\n\t\tPathRef,\n\t\tMarkerKey,\n\t\tMainRef,\n\t\tUnitRef,\n\t\tStatusCode,\n\t\tSubStatus,\n\t\tStartDate,\n\t\tEndDate,\n\t\tDueDate,\n\t\tStartedBy,\n\t\tCompBy,\n\t\tReasons,\n\t\tStartedByDept,\n\t\tCompByDept,\n\t\tDataEntryDate,\n\t\tDataEntryBy,\n\t\tDataEntryByDept,\n\t\tSubKey,\n\t\tCancelReason,\n\t\tRealParentMarkerID,\n\t\tConsolidatedID,\n\t\tStartedStaffHistoryID,\n\t\tCompStaffHistoryID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nWfassessment select(mapColumn(\n\t\tFormNo,\n\t\tFormDate,\n\t\tFormCreator,\n\t\tTemplateID,\n\t\tMarkerID,\n\t\tGroupedFormNo,\n\t\tFormType,\n\t\tFormLink,\n\t\tFormLinkKey,\n\t\tStatus,\n\t\tCompletionDate,\n\t\tParentFormNo,\n\t\tModDate,\n\t\tSyncDate,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tEndReason,\n\t\tRevisionNo,\n\t\tOriginalFormNo,\n\t\tIDENTIFIER_ICSREFER\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nWfAssessmentType select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTemplateID\nDerivedColumn1 aggregate(groupBy(EventId,\n\t\tDOC_TYP_ID,\n\t\tDOC_TO_EventTransactionStartDate),\n\tDOC_TO_EventSourceId = max(DOC_TO_EventSourceId),\n\t\tDOC_TO_EV_FRM_STR_DT = max(DOC_TO_EV_FRM_STR_DT),\n\t\tDOC_TO_EV_FRM_DUE_DT = max(DOC_TO_EV_FRM_DUE_DT),\n\t\tDOC_TO_EV_FRM_CMPLT_DT = max(DOC_TO_EV_FRM_CMPLT_DT),\n\t\tDOC_TO_EventValidStartDate = max(DOC_TO_EventValidStartDate),\n\t\tDOC_TO_EV_FRM_AUTHRSD_END_DT = max(DOC_TO_EV_FRM_AUTHRSD_END_DT),\n\t\tDOC_TO_EventTransactionEndDate = max(DOC_TO_EventTransactionEndDate),\n\t\tDOC_TO_EventValidEndDate = max(DOC_TO_EventValidEndDate),\n\t\tDOC_TO_EV_MRKER_ID = max(DOC_TO_EV_MRKER_ID),\n\t\tDOC_TO_EV_PATH_REF = max(DOC_TO_EV_PATH_REF),\n\t\tDOC_TO_EventDeleted = max(DOC_TO_EventDeleted),\n\t\tDOC_TO_EventRowInsertedDate = max(DOC_TO_EventRowInsertedDate),\n\t\tDOC_TO_EV_COUNT = max(DOC_TO_EV_COUNT),\n\t\tDOC_AUTHRSD_STR_DT = max(DOC_AUTHRSD_STR_DT),\n\t\tDOC_AUTHRSD_END_DT = max(DOC_AUTHRSD_END_DT),\n\t\tDOC_TO_EV_FRM_END_DT = max(DOC_TO_EV_FRM_END_DT)) ~> Aggregate1\nJoinev, TblDocTyp join(Select4@TemplateID == toInteger(DocumentTypeSourceKey),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinDocTyp\nSelect5, WfaSession join(Select5@FormNo == WfaSession@FormNo,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinWfaSession\nJoinWfaSession, WfaAnswer join(SessionNo == FormSessionNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfaAsnwer\nJoinWfaAsnwer filter(equals(QuestionID, 'FormStartDate')) ~> FilterStartDate\nFilterStartDate select(mapColumn(\n\t\tFormNoFormStart = Select5@FormNo,\n\t\tAnswerCodeFormStart = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectStartDate\nJoinWfaAsnwer filter(equals(QuestionID, 'FormEndDate')) ~> FilterEndDate\nJoinWfaAsnwer filter(equals(QuestionID, 'FormDueDate')) ~> FilterDueDate\nJoinWfaAsnwer filter(equals(QuestionID, 'CompletedDate')) ~> FilterCompletedDate\nFilterCompletedDate select(mapColumn(\n\t\tFormNoCompletedDate = Select5@FormNo,\n\t\tAnswerCodeCompletedDate = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCompletedDate\nFilterDueDate select(mapColumn(\n\t\tFormNoDueDate = Select5@FormNo,\n\t\tAnswerCodeDueDate = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDueDate\nFilterEndDate select(mapColumn(\n\t\tFormNoEndDate = Select5@FormNo,\n\t\tAnswerCodeEndDate = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEndDate\nJoinDocTyp, SelectPersonID join(Select2@PersonID == SelectPersonID@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nIsPerson select(mapColumn(\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPersonID\nAddFixedCols, Aggregate2 join(FormNo == FormNoFormStart,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinStartDate\nJoinStartDate, Aggregate3 join(FormNo == FormNoCompletedDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCompletedDate\nJoinCompletedDate, Aggregate4 join(FormNo == FormNoDueDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDueDate\nJoinDueDate, Aggregate5 join(FormNo == FormNoEndDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEndDate\nJoinEndDate derive(DOC_TO_EV_FRM_STR_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerCodeFormStart), toString(null()), \r\n        iif(equals(AnswerCodeFormStart, 'NULL'), toString(null()), AnswerCodeFormStart)\r\n    ) \r\n),\n\t\tDOC_TO_EV_FRM_DUE_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerCodeDueDate), toString(null()), \r\n        iif(equals(AnswerCodeDueDate, 'NULL'), toString(null()), AnswerCodeDueDate)\r\n    ) \r\n),\n\t\tDOC_TO_EV_FRM_CMPLT_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerCodeCompletedDate), toString(null()), \r\n        iif(equals(AnswerCodeCompletedDate, 'NULL'), toString(null()), AnswerCodeCompletedDate)\r\n    ) \r\n),\n\t\tDOC_TO_EV_FRM_AUTHRSD_END_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerCodeEndDate), toString(null()), \r\n        iif(equals(AnswerCodeEndDate, 'NULL'), toString(null()), AnswerCodeEndDate)\r\n    ) \r\n)) ~> DerivedColumn1\nWfassessment select(mapColumn(\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelectStartDate aggregate(groupBy(FormNoFormStart,\n\t\tAnswerCodeFormStart),\n\tCountAll = count(1)) ~> Aggregate2\nSelectCompletedDate aggregate(groupBy(FormNoCompletedDate,\n\t\tAnswerCodeCompletedDate),\n\tCountAll = count(1)) ~> Aggregate3\nSelectDueDate aggregate(groupBy(FormNoDueDate,\n\t\tAnswerCodeDueDate),\n\tCountAll = count(1)) ~> Aggregate4\nSelectEndDate aggregate(groupBy(FormNoEndDate,\n\t\tAnswerCodeEndDate),\n\tCountAll = count(1)) ~> Aggregate5\nSelect4 derive(StartDate = iif(isNull(StartDate), toTimestamp('31-12-9999','dd-MM-yyyy'), StartDate)) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tDocumentToEventValidStartDate as timestamp,\n\t\tDocumentToEventValidEndDate as timestamp,\n\t\tDocumentToEventTransactionEndDate as timestamp,\n\t\tDocumentToEventTransactionStartDate as timestamp,\n\t\tDocumentToEventCounter as long,\n\t\tDocumentTypeId as long,\n\t\tDocumentToEventDeleted as timestamp,\n\t\tDocumentToEventRowInsertedDate as timestamp,\n\t\tDocumentToEventSourceId as long,\n\t\tDocumentToEventMarkerID as string,\n\t\tDocumentToEventPathReference as string,\n\t\tDocumentToEventFormEndDate as timestamp,\n\t\tDocumentToEventFormStartDate as timestamp,\n\t\tDocumentToEventFormDueDate as timestamp,\n\t\tDocumentToEventFormCompleteDate as timestamp,\n\t\tDocumentToEventFormAuthorisedEndDate as timestamp,\n\t\tDocumentAuthorisedStartDate as timestamp,\n\t\tDocumentAuthorisedEndDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','DocumentTypeId','DocumentToEventTransactionStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventId,\n\t\tDocumentToEventValidStartDate = DOC_TO_EventValidStartDate,\n\t\tDocumentToEventValidEndDate = DOC_TO_EventValidEndDate,\n\t\tDocumentToEventTransactionEndDate = DOC_TO_EventTransactionEndDate,\n\t\tDocumentToEventTransactionStartDate = DOC_TO_EventTransactionStartDate,\n\t\tDocumentToEventCounter = DOC_TO_EV_COUNT,\n\t\tDocumentTypeId = DOC_TYP_ID,\n\t\tDocumentToEventDeleted = DOC_TO_EventDeleted,\n\t\tDocumentToEventRowInsertedDate = DOC_TO_EventRowInsertedDate,\n\t\tDocumentToEventSourceId = DOC_TO_EventSourceId,\n\t\tDocumentToEventMarkerID = DOC_TO_EV_MRKER_ID,\n\t\tDocumentToEventPathReference = DOC_TO_EV_PATH_REF,\n\t\tDocumentToEventFormEndDate = DOC_TO_EV_FRM_END_DT,\n\t\tDocumentToEventFormStartDate = DOC_TO_EV_FRM_STR_DT,\n\t\tDocumentToEventFormDueDate = DOC_TO_EV_FRM_DUE_DT,\n\t\tDocumentToEventFormCompleteDate = DOC_TO_EV_FRM_CMPLT_DT,\n\t\tDocumentToEventFormAuthorisedEndDate = DOC_TO_EV_FRM_AUTHRSD_END_DT,\n\t\tDocumentAuthorisedStartDate = DOC_AUTHRSD_STR_DT,\n\t\tDocumentAuthorisedEndDate = DOC_AUTHRSD_END_DT\n\t)) ~> TblEvToDoc"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblDocumentType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblDocumentToEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblDocumentToEvent7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/7_CPC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentType"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceTblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "sourceEvStsTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblDocumentType",
								"type": "DatasetReference"
							},
							"name": "sourceDocTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsperson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfaSession"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfaAnswer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblDocumentToEvent",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectAss"
						},
						{
							"name": "SelectAssTyp"
						},
						{
							"name": "JoinAss"
						},
						{
							"name": "JoinPp"
						},
						{
							"name": "SelectPp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "FilterEvTyp"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "SelectEvStsTyp"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "SelectDocTyp"
						},
						{
							"name": "JoinDocTyp"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "Select1"
						},
						{
							"name": "JoinWfaSession"
						},
						{
							"name": "Join1"
						},
						{
							"name": "FilterCompleted"
						},
						{
							"name": "FilterDueDate"
						},
						{
							"name": "FilterEndDate"
						},
						{
							"name": "FilterStartDate"
						},
						{
							"name": "SelectCompleted"
						},
						{
							"name": "SelectStartDate"
						},
						{
							"name": "SelectEndDate"
						},
						{
							"name": "SelectDueDate"
						},
						{
							"name": "JoinCompleted"
						},
						{
							"name": "JoinEndDate"
						},
						{
							"name": "JoinStartDate"
						},
						{
							"name": "JoinDueDate"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentType\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblEv\nsource(output(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvStsTyp\nsource(output(\n\t\tDocumentTypeForm as string,\n\t\tDocumentTypeGroup as string,\n\t\tDocumentTypeId as long,\n\t\tDocumentTypeCreator as string,\n\t\tDocumentTypeDeleted as timestamp,\n\t\tDocumentTypeDescription as string,\n\t\tDocumentTypeSourceId as integer,\n\t\tDocumentTypeSourceKey as long,\n\t\tDocumentTypeTransactionStartDate as timestamp,\n\t\tDocumentTypeTransactionEndDate as timestamp,\n\t\tDocumentTypeValid as integer,\n\t\tDocumentTypeValidStartDate as timestamp,\n\t\tDocumentTypeValidEndDate as timestamp,\n\t\tDocumentTypeFileName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceDocTyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsperson\nsource(output(\n\t\tSessionNo as integer,\n\t\tProcessNo as integer,\n\t\tFormNo as integer,\n\t\tSessionDate as timestamp,\n\t\tTimeframe as timestamp,\n\t\tSessionCreator as string,\n\t\tStatus as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentSessionNo as integer,\n\t\tReassignedBy as string,\n\t\tRole as string,\n\t\tMarkerID as integer,\n\t\tModDate as timestamp,\n\t\tRetractReason as string,\n\t\tRejectReason as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfasession') ~> sourceWfaSession\nsource(output(\n\t\tAnswerNo as integer,\n\t\tFormSessionNo as integer,\n\t\tQuestionID as string,\n\t\tAnswerCode as string,\n\t\tSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfaanswer') ~> sourceWfaAnswer\nsourceWfAssessmentType filter(and(\r\n    equals(Description, 'CP Conference Outcomes and Outline Plan'),\r\n    not(like('XX%', FormType))\r\n)) ~> Filter1\nsourceWfAssessment filter(notEquals(Status, 'X')) ~> Filter2\nFilter2 select(mapColumn(\n\t\tTemplateID,\n\t\tFormNo,\n\t\tMarkerID,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tCompletionDate,\n\t\tFormLinkKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAss\nFilter1 select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssTyp\nSelectAssTyp, SelectAss join(SelectAssTyp@TemplateID == SelectAss@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAss\nJoinAss, SelectPp join(SelectAss@MarkerID == SelectPp@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPp\nsourcePpMark select(mapColumn(\n\t\tMarkerID,\n\t\tMarkerKey,\n\t\tPathRef\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPp\nJoinIsPerson derive(CHILD_PROTECTION_CONFERENCE = 'CHILD_PROTECTION_CONFERENCE') ~> DerivedColumn1\nDerivedColumn1, FilterEvTyp join(CHILD_PROTECTION_CONFERENCE == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup,\n\t\tEventTypeSubGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nSelectEvTyp filter(isNull(EventTypeSubGroup)) ~> FilterEvTyp\nsourceTblEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nFilter4 select(mapColumn(\n\t\tEventStatusTypeId,\n\t\tEventStatusTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvStsTyp\nsourceEvStsTyp filter(equals(EventStatusTypeGroup, 'CHILD_PROTECTION_CONFERENCE')) ~> Filter4\nJoinEvTyp, SelectEv join(FormNo == toInteger(EventSourceKey)\n\t&& SelectEvTyp@EventTypeId == SelectEv@EventTypeId\n\t&& toDate(StartDate) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nsourceDocTyp select(mapColumn(\n\t\tDOC_TYP_ID = DocumentTypeId,\n\t\tDOC_TYP_SRC_KEY = DocumentTypeSourceKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDocTyp\nJoinEv, SelectDocTyp join(SelectAss@TemplateID == DOC_TYP_SRC_KEY,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinDocTyp\nDerivedColumn2 aggregate(groupBy(EventId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEV_COUNT,\n\t\tDOC_TYP_ID,\n\t\tEventRowInsertedDate,\n\t\tEventSourceId,\n\t\tSelectPp@MarkerID,\n\t\tPathRef,\n\t\tPersonID,\n\t\tFormNo,\n\t\tMarkerKey),\n\tEventDeleted = max(EventDeleted)) ~> Aggregate1\nJoinDocTyp derive(EV_COUNT = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)), toLong(0)),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventSourceId = 3) ~> DerivedColumn2\nJoinPp, SelectIsPerson join(toInteger(FormLinkKey) == PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceIsperson select(mapColumn(\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nsourceWfAssessment select(mapColumn(\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, sourceWfaSession join(Select1@FormNo == sourceWfaSession@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfaSession\nJoinWfaSession, sourceWfaAnswer join(SessionNo == FormSessionNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 filter(equals(QuestionID, 'CompletedDate')) ~> FilterCompleted\nJoin1 filter(equals(QuestionID, 'FormDueDate')) ~> FilterDueDate\nJoin1 filter(equals(QuestionID, 'FormEndDate')) ~> FilterEndDate\nJoin1 filter(equals(QuestionID, 'FormStartDate')) ~> FilterStartDate\nFilterCompleted select(mapColumn(\n\t\tFormNoCompleted = Select1@FormNo,\n\t\tAnswerCodeCompleted = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCompleted\nFilterStartDate select(mapColumn(\n\t\tFormNoStartDate = Select1@FormNo,\n\t\tAnswerNoStartDate = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectStartDate\nFilterEndDate select(mapColumn(\n\t\tFormNoEndDate = Select1@FormNo,\n\t\tAnswerCodeEndDate = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEndDate\nFilterDueDate select(mapColumn(\n\t\tFormNoDueDate = Select1@FormNo,\n\t\tAnswerCodeDueDate = AnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDueDate\nAggregate1, SelectCompleted join(FormNo == FormNoCompleted,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCompleted\nJoinCompleted, SelectEndDate join(FormNo == FormNoEndDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEndDate\nJoinEndDate, SelectStartDate join(FormNo == FormNoStartDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinStartDate\nJoinStartDate, SelectDueDate join(FormNo == FormNoDueDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDueDate\nJoinDueDate derive(DOC_TO_EV_FRM_STR_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerNoStartDate), toString(null()), \r\n        iif(equals(AnswerNoStartDate, 'NULL'), toString(null()), AnswerNoStartDate)\r\n    ) \r\n),\n\t\tDOC_TO_EV_FRM_DUE_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerCodeDueDate), toString(null()), \r\n        iif(equals(AnswerCodeDueDate, 'NULL'), toString(null()), AnswerCodeDueDate)\r\n    ) \r\n),\n\t\tDOC_TO_EV_FRM_CMPLT_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerCodeCompleted), toString(null()), \r\n        iif(equals(AnswerCodeCompleted, 'NULL'), toString(null()), AnswerCodeCompleted)\r\n    ) \r\n),\n\t\tDOC_TO_EV_FRM_AUTHRSD_END_DT = toTimestamp(\r\n    iif(\r\n        isNull(AnswerCodeEndDate), toString(null()), \r\n        iif(equals(AnswerCodeEndDate, 'NULL'), toString(null()), AnswerCodeEndDate)\r\n    ) \r\n),\n\t\tDOC_AUTHRSD_STR_DT = toDate(null()),\n\t\tDOC_AUTHRSD_END_DT = toDate(null()),\n\t\tDOC_TO_EV_FRM_END_DT = toDate(null())) ~> DerivedColumn3\nDerivedColumn3 select(mapColumn(\n\t\tEventId,\n\t\tDOC_TO_EventValidStartDate = EventValidStartDate,\n\t\tDOC_TO_EventValidEndDate = EventValidEndDate,\n\t\tDOC_TO_EventTransactionStartDate = EventTransactionStartDate,\n\t\tDOC_TO_EventTransactionEndDate = EventTransactionEndDate,\n\t\tDOC_TO_EV_COUNT = EV_COUNT,\n\t\tDOC_TYP_ID,\n\t\tDOC_TO_EventDeleted = EventDeleted,\n\t\tDOC_TO_EventRowInsertedDate = EventRowInsertedDate,\n\t\tDOC_TO_EventSourceId = EventSourceId,\n\t\tDOC_TO_EV_MRKER_ID = MarkerKey,\n\t\tDOC_TO_EV_PATH_REF = PathRef,\n\t\tDOC_AUTHRSD_STR_DT,\n\t\tDOC_AUTHRSD_END_DT,\n\t\tDOC_TO_EV_FRM_END_DT,\n\t\tDOC_TO_EV_FRM_STR_DT,\n\t\tDOC_TO_EV_FRM_DUE_DT,\n\t\tDOC_TO_EV_FRM_CMPLT_DT,\n\t\tDOC_TO_EV_FRM_AUTHRSD_END_DT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 aggregate(groupBy(EventId,\n\t\tDOC_TO_EventValidStartDate,\n\t\tDOC_TO_EventValidEndDate,\n\t\tDOC_TO_EventTransactionStartDate,\n\t\tDOC_TO_EventTransactionEndDate,\n\t\tDOC_TO_EV_COUNT,\n\t\tDOC_TYP_ID,\n\t\tDOC_TO_EventDeleted,\n\t\tDOC_TO_EventRowInsertedDate,\n\t\tDOC_TO_EventSourceId,\n\t\tDOC_TO_EV_MRKER_ID,\n\t\tDOC_TO_EV_PATH_REF,\n\t\tDOC_AUTHRSD_STR_DT,\n\t\tDOC_AUTHRSD_END_DT,\n\t\tDOC_TO_EV_FRM_END_DT,\n\t\tDOC_TO_EV_FRM_STR_DT,\n\t\tDOC_TO_EV_FRM_DUE_DT,\n\t\tDOC_TO_EV_FRM_CMPLT_DT,\n\t\tDOC_TO_EV_FRM_AUTHRSD_END_DT),\n\tCountAll = count(1)) ~> Aggregate2\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tDocumentToEventValidStartDate as timestamp,\n\t\tDocumentToEventValidEndDate as timestamp,\n\t\tDocumentToEventTransactionEndDate as timestamp,\n\t\tDocumentToEventTransactionStartDate as timestamp,\n\t\tDocumentToEventCounter as long,\n\t\tDocumentTypeId as long,\n\t\tDocumentToEventDeleted as timestamp,\n\t\tDocumentToEventRowInsertedDate as timestamp,\n\t\tDocumentToEventSourceId as long,\n\t\tDocumentToEventMarkerID as string,\n\t\tDocumentToEventPathReference as string,\n\t\tDocumentToEventFormEndDate as timestamp,\n\t\tDocumentToEventFormStartDate as timestamp,\n\t\tDocumentToEventFormDueDate as timestamp,\n\t\tDocumentToEventFormCompleteDate as timestamp,\n\t\tDocumentToEventFormAuthorisedEndDate as timestamp,\n\t\tDocumentAuthorisedStartDate as timestamp,\n\t\tDocumentAuthorisedEndDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','DocumentToEventTransactionStartDate','DocumentTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventId,\n\t\tDocumentToEventValidStartDate = DOC_TO_EventValidStartDate,\n\t\tDocumentToEventTransactionEndDate = DOC_TO_EventValidEndDate,\n\t\tDocumentToEventTransactionEndDate = DOC_TO_EventTransactionEndDate,\n\t\tDocumentToEventTransactionStartDate = DOC_TO_EventTransactionStartDate,\n\t\tDocumentToEventCounter = DOC_TO_EV_COUNT,\n\t\tDocumentTypeId = DOC_TYP_ID,\n\t\tDocumentToEventDeleted = DOC_TO_EventDeleted,\n\t\tDocumentToEventRowInsertedDate = DOC_TO_EventRowInsertedDate,\n\t\tDocumentToEventSourceId = DOC_TO_EventSourceId,\n\t\tDocumentToEventMarkerID = DOC_TO_EV_MRKER_ID,\n\t\tDocumentToEventPathReference = DOC_TO_EV_PATH_REF,\n\t\tDocumentToEventFormEndDate = DOC_TO_EV_FRM_END_DT,\n\t\tDocumentToEventFormStartDate = DOC_TO_EV_FRM_STR_DT,\n\t\tDocumentToEventFormDueDate = DOC_TO_EV_FRM_DUE_DT,\n\t\tDocumentToEventFormCompleteDate = DOC_TO_EV_FRM_CMPLT_DT,\n\t\tDocumentToEventFormAuthorisedEndDate = DOC_TO_EV_FRM_AUTHRSD_END_DT,\n\t\tDocumentAuthorisedStartDate = DOC_AUTHRSD_STR_DT,\n\t\tDocumentAuthorisedEndDate = DOC_AUTHRSD_END_DT\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblDocumentType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblDocumentToEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblDocumentType1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblDocumentType",
								"type": "DatasetReference"
							},
							"name": "sinkTblDocTyp"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "RenameAndChangeColumns"
						}
					],
					"script": "source(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentType\nsourceWfAssessmentType aggregate(groupBy(FormType,\n\t\tFormCreator,\n\t\tDescription,\n\t\tFilename,\n\t\tTemplateID,\n\t\tValid,\n\t\tReleaseDate),\n\tCountall = count(1)) ~> Aggregate1\nRenameAndChangeColumns derive(DOC_TYP_GRP = 'ASSESSMENT_TYPE',\n\t\tDOC_TYP_DEL = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tDOC_TYP_SRC_ID = 3,\n\t\tDOC_TYP_TRNS_STR_DT = currentTimestamp(),\n\t\tDOC_TYP_TRNS_END_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tDOC_TYP_VLD_END_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tDOC_TYP_SRC_KEY = toInteger(DOC_TYP_SRC_KEY),\n\t\tDOC_TYP_VLD = iif(isNull(DOC_TYP_VLD), 1, \r\n    iif(equals(DOC_TYP_VLD, 'Y'), 1, 0)\r\n    ),\n\t\tDOC_TYP_VLD_STR_DT = iif(isNull(DOC_TYP_VLD_STR_DT), \r\n    toDate('31-12-9999','dd-MM-yyyy'), \r\n    toDate(DOC_TYP_VLD_STR_DT)\r\n)) ~> AddFixedCols\nAggregate1 select(mapColumn(\n\t\tDOC_TYP_FRM = FormType,\n\t\tDOC_TYP_CREATOR = FormCreator,\n\t\tDOC_TYP_DESC = Description,\n\t\tDOC_TYP_FILENAM = Filename,\n\t\tDOC_TYP_SRC_KEY = TemplateID,\n\t\tDOC_TYP_VLD = Valid,\n\t\tDOC_TYP_VLD_STR_DT = ReleaseDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameAndChangeColumns\nAddFixedCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDocumentTypeForm as string,\n\t\tDocumentTypeGroup as string,\n\t\tDocumentTypeId as long,\n\t\tDocumentTypeCreator as string,\n\t\tDocumentTypeDeleted as timestamp,\n\t\tDocumentTypeDescription as string,\n\t\tDocumentTypeSourceId as integer,\n\t\tDocumentTypeSourceKey as long,\n\t\tDocumentTypeTransactionStartDate as timestamp,\n\t\tDocumentTypeTransactionEndDate as timestamp,\n\t\tDocumentTypeValid as integer,\n\t\tDocumentTypeValidStartDate as timestamp,\n\t\tDocumentTypeValidEndDate as timestamp,\n\t\tDocumentTypeFileName as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tDocumentTypeForm = DOC_TYP_FRM,\n\t\tDocumentTypeGroup = DOC_TYP_GRP,\n\t\tDocumentTypeCreator = DOC_TYP_CREATOR,\n\t\tDocumentTypeDeleted = DOC_TYP_DEL,\n\t\tDocumentTypeDescription = DOC_TYP_DESC,\n\t\tDocumentTypeSourceId = DOC_TYP_SRC_ID,\n\t\tDocumentTypeSourceKey = DOC_TYP_SRC_KEY,\n\t\tDocumentTypeTransactionStartDate = DOC_TYP_TRNS_STR_DT,\n\t\tDocumentTypeTransactionEndDate = DOC_TYP_VLD_STR_DT,\n\t\tDocumentTypeValid = DOC_TYP_VLD,\n\t\tDocumentTypeValidStartDate = DOC_TYP_VLD_STR_DT,\n\t\tDocumentTypeValidEndDate = DOC_TYP_VLD_END_DT,\n\t\tDocumentTypeFileName = DOC_TYP_FILENAM\n\t)) ~> sinkTblDocTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblDocumentType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEvent')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "ExclusionsSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTypSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "EvRsnTypSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "EvCatTypSource"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "StudHistSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "SinkEv"
						}
					],
					"transformations": [
						{
							"name": "GroupByDistinctRows"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "AddJoinCol"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinRJoin"
						},
						{
							"name": "Select1"
						},
						{
							"name": "JoinRLeave"
						},
						{
							"name": "JoinLeave"
						},
						{
							"name": "JoinJoin"
						},
						{
							"name": "JoinEmpty"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Aggregate3"
						}
					],
					"script": "source(output(\n\t\tLEA_DECISION as string,\n\t\tEXCL_ID as decimal(38,18),\n\t\tA_YEAR as string,\n\t\tTERM as string,\n\t\tBASE_ID as decimal(38,18),\n\t\tCATEGORY as string,\n\t\tREASON as string,\n\t\tSTART_DATE as timestamp,\n\t\tEXCL_DAYS as decimal(38,18),\n\t\tSTUD_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tEXCL_MEMO as decimal(38,18),\n\t\tRESULT as string,\n\t\tNO_SUP_OFF as decimal(38,18),\n\t\tGOV_CON_DT as timestamp,\n\t\tOFF_ATTEND as decimal(38,18),\n\t\tUPHELD as string,\n\t\tAPPEAL_DT as timestamp,\n\t\tMEETING_DT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tSCH_APPEAL_RECVD as string,\n\t\tAM_PM as string,\n\t\tREFERRED_DC as string,\n\t\tDC_MEETING_DT as timestamp,\n\t\tDC_DECISION as string,\n\t\tREINSTATE_DATE as timestamp,\n\t\tREINSTATE_REASON as string,\n\t\tDATE_OFF_ROLL as timestamp,\n\t\tPASTORAL_RECD as string,\n\t\tEND_MONITOR_DATE as timestamp,\n\t\tMOTIVATION as string,\n\t\tSTAGE_WHEN_EXCLUDED as string,\n\t\tSTATUS_WHEN_EXCLUDED as string,\n\t\tSITE_ID as decimal(38,18),\n\t\tEND_AM_PM as string,\n\t\tCREATED_DATE as timestamp,\n\t\tCREATED_BY as decimal(38,18),\n\t\tNCY_WHEN_EXCLUDED as decimal(38,18),\n\t\tSEN_STAGE_WHEN_EXCLUDED as string,\n\t\tSIXTH_DAY as timestamp,\n\t\tINCARE_WHEN_EXCLUDED as string,\n\t\tADDRESS_ID as decimal(38,18),\n\t\tFSM as string,\n\t\tREFERRED_APPEALS as string,\n\t\tACL as string,\n\t\tEXCL_LUNCH_LENGTH as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tSENEXPERT_REVIEW as string,\n\t\tEXC_DAYS_OS as decimal(38,18),\n\t\tVERIFIEDDATE as timestamp,\n\t\tVERIFIEDBY as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/exclusions') ~> ExclusionsSource\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvTypSource\nsource(output(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvRsnTypSource\nsource(output(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvCatTypSource\nsource(output(\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tBASE_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tHIST_AMEND as timestamp,\n\t\tHIST_TIME as string,\n\t\tHIST_USER as string,\n\t\tREG_BASE as string,\n\t\tRESIDENCE as string,\n\t\tRJOIN as string,\n\t\tRLEAVE as string,\n\t\tSTART_DATE as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tHIST_ID as decimal(38,18),\n\t\tD_PER_WEEK as decimal(38,18),\n\t\tREG2_BASE as string,\n\t\tREGTYPE as string,\n\t\tBOARDER as string,\n\t\tGUEST as string,\n\t\tDESTINATION as string,\n\t\tDESTINATION_LAST_UPDT as timestamp,\n\t\tDESTINATION_UPDATED_BY as decimal(38,18),\n\t\tSITE_ID as decimal(38,18),\n\t\tSCHOOL_HISTORY_TYPE as string,\n\t\tGROUNDS_REMOVAL as string,\n\t\tCML_DESTINATION as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/stud_hist') ~> StudHistSource\nExclusionsSource aggregate(groupBy(STUD_ID,\n\t\tEXCL_ID,\n\t\tA_YEAR,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tREASON,\n\t\tCATEGORY),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByDistinctRows\nGroupByDistinctRows select(mapColumn(\n\t\tSTUD_ID,\n\t\tEXCL_ID,\n\t\tLAST_UPDT,\n\t\tA_YEAR,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tREASON,\n\t\tCATEGORY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns\nRenameColumns derive(EventTypeGroup = 'STUDENT_EXCLUSION') ~> AddJoinCol\nAddJoinCol, EvTypSource join(AddJoinCol@EventTypeGroup == EvTypSource@EventTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1, EvRsnTypSource join(REASON == EventReasonTypeInternalCode\n\t&& AddJoinCol@EventTypeGroup == EventReasonTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nJoin2, EvCatTypSource join(CATEGORY == EventCategoryTypeInternalCode\n\t&& AddJoinCol@EventTypeGroup == EventCategoryTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tLAST_UPDT,\n\t\tEventCategoryTypeId,\n\t\tEventSourceKey = EXCL_ID,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tEventAcademicYear = A_YEAR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols derive(EventTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventSourceId = 2,\n\t\tEventDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventValidCreationDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventValidStartDate = coalesce(toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"), \r\n         toDate('31-12-9999','dd-MM-yyyy')\r\n),\n\t\tEventTransactionStartDate = coalesce(toDate(toString(LAST_UPDT, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventValidEndDate = coalesce(toDate(toString(END_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventReasonTypeId = iifNull(EventReasonTypeId, 0, EventReasonTypeId)) ~> AddFixedCols\nAggregate3 alterRow(upsertIf(true())) ~> AlterRow1\nSelect5, Select3 union(byName: true)~> Union1\nStudHistSource aggregate(groupBy(HIST_ID,\n\t\tRJOIN,\n\t\tRLEAVE,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tHIST_AMEND),\n\tLAST_UPDT = max(LAST_UPDT)) ~> Aggregate1\nAggregate1 filter(equals(isNull(START_DATE), false())) ~> Filter1\nDerivedColumn1, EvTypSource join(SCHOOL_TRANSFER == EventTypeInternalCode\n\t&& PUPIL_EVENT == EventTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTyp\nFilter1 derive(SCHOOL_TRANSFER = 'SCHOOL_TRANSFER',\n\t\tPUPIL_EVENT = 'PUPIL_EVENT',\n\t\tPUPIL_LEAVE_CATEGORY = 'LEAVE_SCHOOL',\n\t\tPUPIL_JOIN_CATEGORY = 'JOIN_SCHOOL',\n\t\tPUPIL_MISSING = 'LEAVE_OR_JOIN_SCHOOL_CATEGORY_MISSING_FROM_SOURCE') ~> DerivedColumn1\nJoinEvTyp, EvRsnTypSource join(RJOIN == EventReasonTypeInternalCode\n\t&& SCHOOL_TRANSFER == EventReasonTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinRJoin\nJoinRJoin select(mapColumn(\n\t\tHIST_ID,\n\t\tRJOIN,\n\t\tRLEAVE,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tHIST_AMEND,\n\t\tLAST_UPDT,\n\t\tSCHOOL_TRANSFER,\n\t\tPUPIL_EVENT,\n\t\tPUPIL_LEAVE_CATEGORY,\n\t\tPUPIL_JOIN_CATEGORY,\n\t\tPUPIL_MISSING,\n\t\tEventTypeId,\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode,\n\t\tEventReasonTypeId_JOIN = EventReasonTypeId,\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeExternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, EvRsnTypSource join(RLEAVE == EvRsnTypSource@EventReasonTypeInternalCode\n\t&& SCHOOL_TRANSFER == EvRsnTypSource@EventReasonTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinRLeave\nJoinRLeave, EvCatTypSource join(PUPIL_EVENT == EventCategoryTypeGroup\n\t&& SCHOOL_TRANSFER == EventCategoryTypeDescription\n\t&& PUPIL_LEAVE_CATEGORY == EventCategoryTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLeave\nSelect2, EvCatTypSource join(PUPIL_EVENT == EventCategoryTypeGroup\n\t&& SCHOOL_TRANSFER == EventCategoryTypeDescription\n\t&& PUPIL_JOIN_CATEGORY == EventCategoryTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinJoin\nSelect4, EvCatTypSource join(PUPIL_EVENT == EventCategoryTypeGroup\n\t&& SCHOOL_TRANSFER == EventCategoryTypeDescription\n\t&& PUPIL_MISSING == EventCategoryTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEmpty\nJoinLeave select(mapColumn(\n\t\tHIST_ID,\n\t\tRJOIN,\n\t\tRLEAVE,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tHIST_AMEND,\n\t\tLAST_UPDT,\n\t\tSCHOOL_TRANSFER,\n\t\tPUPIL_EVENT,\n\t\tPUPIL_LEAVE_CATEGORY,\n\t\tPUPIL_JOIN_CATEGORY,\n\t\tPUPIL_MISSING,\n\t\tEventTypeId,\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode,\n\t\tEventReasonTypeId_JOIN,\n\t\tEventReasonTypeId_LEAVE = EventReasonTypeId,\n\t\tEventCategoryTypeId_LEAVE = EventCategoryTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nDerivedColumn2 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceId,\n\t\tEventSourceKey = HIST_ID,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate,\n\t\tEventReasonTypeId,\n\t\tEventCategoryTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nJoinEmpty derive(EventTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventSourceId = 2,\n\t\tEventAcademicYear = 'NULL',\n\t\tEventDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventValidCreationDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeId = iif(and(isNull(RJOIN), isNull(RLEAVE)), 0, \r\n    iif(and(isNull(RJOIN), equals(isNull(RLEAVE), false())), toInteger(EventReasonTypeId_LEAVE), \r\n        iif(and(equals(isNull(RJOIN), false()), isNull(RLEAVE)), toInteger(EventReasonTypeId_JOIN), 0)\r\n    )\r\n\r\n),\n\t\tEventCategoryTypeId = iif(and(isNull(RJOIN), isNull(RLEAVE)), 0, \r\n    iif(and(isNull(RJOIN), equals(isNull(RLEAVE), false())), toInteger(EventCategoryTypeId_LEAVE), \r\n        iif(and(equals(isNull(RJOIN), false()), isNull(RLEAVE)), toInteger(EventCategoryTypeId_JOIN), 0)\r\n    )\r\n\r\n),\n\t\tEventTransactionStartDate = coalesce(toDate(toString(LAST_UPDT, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventValidStartDate = coalesce(toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventValidEndDate = coalesce(toDate(toString(END_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn2\nJoinJoin select(mapColumn(\n\t\tHIST_ID,\n\t\tRJOIN,\n\t\tRLEAVE,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tHIST_AMEND,\n\t\tLAST_UPDT,\n\t\tSCHOOL_TRANSFER,\n\t\tPUPIL_EVENT,\n\t\tPUPIL_LEAVE_CATEGORY,\n\t\tPUPIL_JOIN_CATEGORY,\n\t\tPUPIL_MISSING,\n\t\tEventTypeId,\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode,\n\t\tEventReasonTypeId_JOIN,\n\t\tEventReasonTypeId_LEAVE,\n\t\tEventCategoryTypeId_LEAVE,\n\t\tEventCategoryTypeId_JOIN = EventCategoryTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select4\nAddFixedCols select(mapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventCategoryTypeId,\n\t\tEventSourceKey,\n\t\tEventAcademicYear,\n\t\tEventTransactionEndDate,\n\t\tEventSourceId,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate,\n\t\tEventValidStartDate,\n\t\tEventTransactionStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nUnion1 derive(EventSourceKey = toString(toInteger(EventSourceKey)),\n\t\tEventReasonTypeId = iifNull(EventReasonTypeId, 0, EventReasonTypeId),\n\t\tEventCategoryTypeId = iifNull(EventCategoryTypeId, 0, EventReasonTypeId)) ~> DerivedColumn3\nDerivedColumn3 aggregate(groupBy(EventSourceKey,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventTransactionStartDate,\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventCategoryTypeId,\n\t\tEventTransactionEndDate,\n\t\tEventSourceId,\n\t\tEventAcademicYear,\n\t\tEventValidCreationDate,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate),\n\tCountAll = count(1)) ~> Aggregate3\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventSourceKey','EventValidStartDate','EventValidEndDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> SinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEvent1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentType"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sinkTblEv"
						}
					],
					"transformations": [
						{
							"name": "SelectRelevant1"
						},
						{
							"name": "SelectRelevant2"
						},
						{
							"name": "JoinPP"
						},
						{
							"name": "JoinWfAss"
						},
						{
							"name": "JoinWfAssTyp"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectRelevant3"
						},
						{
							"name": "SelectRelevant4"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentType\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsourceIcsRefer select(mapColumn(\n\t\tFormNo,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevant1\nsourcePpMark select(mapColumn(\n\t\tMarkerID,\n\t\tSubStatus,\n\t\tStartDate,\n\t\tMainRef,\n\t\tStatusCode,\n\t\tUnitRef\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevant2\nSelectRelevant1, Filter2 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1)),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPP\nFilter3, JoinPP join(SelectRelevant3@MarkerID == SelectRelevant2@MarkerID\n\t&& FormLinkKey == left(MainRef, instr(MainRef, '/')-1),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfAss\nJoinWfAss, SelectRelevant4 join(SelectRelevant3@TemplateID == SelectRelevant4@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfAssTyp\nJoinWfAssTyp, Filter4 join(SelectRelevant3@TemplateID == toInteger(EventTypeInternalCode),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEvTyp filter(in(['C','D','E'], Status)) ~> Filter1\nsourceWfAssessment select(mapColumn(\n\t\tMarkerID,\n\t\tFormNo,\n\t\tFormLinkKey,\n\t\tStatus,\n\t\tCompletionDate,\n\t\tTemplateID,\n\t\tCreationDate,\n\t\tStartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevant3\nsourceWfAssessmentType select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevant4\nSelectRelevant2 filter(and(\r\n    equals(right(UnitRef, minus(length(UnitRef),instr(UnitRef, '/'))+1), '/com.liquidlogic.assessment.DBAssessment'),\r\n    notEquals(SubStatus, 'X')\r\n)) ~> Filter2\nSelectRelevant3 filter(notEquals(Status, 'X')) ~> Filter3\nFilter1 derive(EventSourceKey = SelectRelevant3@FormNo,\n\t\tEventReasonTypeId = 0,\n\t\tEventTransactionStartDate = currentTimestamp(),\n\t\tEventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventCategoryTypeId = 0,\n\t\tEventSourceId = 3,\n\t\tEventValidCreationDate = iif(isNull(SelectRelevant3@CreationDate), toTimestamp('31-12-9999','dd-MM-yyyy'), SelectRelevant3@CreationDate),\n\t\tEventValidStartDate = iif(isNull(SelectRelevant3@StartDate), toTimestamp('31-12-9999','dd-MM-yyyy'), SelectRelevant3@StartDate),\n\t\tEventValidEndDate = iif(isNull(CompletionDate), toTimestamp('31-12-9999','dd-MM-yyyy'), CompletionDate),\n\t\tEventAcademicYear = toString(null()),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp()) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventSourceKey,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventValidCreationDate,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsourceEvTyp filter(equals(EventTypeGroup, 'PUPIL_ASSESSMENT')) ~> Filter4\nSelect1 aggregate(groupBy(EventTypeId,\n\t\tEventSourceKey,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventValidCreationDate,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> sinkTblEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEvent4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/4_CPP/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsPerson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsPreg"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsCprchist"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "sourceEvCatTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectIcsRefer"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "SelectIcsPreg"
						},
						{
							"name": "JoinIcsPreg"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "SelectCprchist"
						},
						{
							"name": "JoinIcsCprchist"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectCatTyp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinCatTyp"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "FilterIcsPreg"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsPerson\nsource(output(\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tRegComments as string,\n\t\tDeRegReason as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tInitialMeetingID as integer,\n\t\tFinalMeetingID as integer,\n\t\tOLACSSR as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscpreg') ~> sourceIcsPreg\nsource(output(\n\t\tCPRegCatID as integer,\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tMeetingID as integer,\n\t\tStartDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tRegComments as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tEndDate as timestamp,\n\t\tSyncDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscprchist') ~> sourceIcsCprchist\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvCatTyp\nsourceIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tAuditDate,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsRefer\nSelectIcsRefer, SelectIsPerson join(SelectIcsRefer@PersonID == SelectIsPerson@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceIsPerson select(mapColumn(\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nsourceIcsPreg select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tStartDate,\n\t\tEndDate,\n\t\tOLACSSR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsPreg\nJoinIsPerson, FilterIcsPreg join(SelectIcsRefer@PersonID == SelectIcsPreg@PersonID\n\t&& toDate(SelectIcsRefer@StartDate) <= toDate(SelectIcsPreg@StartDate)\n\t&& toDate(    coalesce(SelectIcsRefer@EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) >= toDate(SelectIcsPreg@StartDate),\n\tjoinType:'inner',\n\tbroadcast: 'left')~> JoinIcsPreg\nJoinIcsPreg aggregate(groupBy(SelectIcsRefer@PersonID,\n\t\tSelectIcsPreg@EndDate,\n\t\tSelectIcsPreg@StartDate,\n\t\tCPRegID),\n\tAuditDate = max(AuditDate)) ~> Aggregate1\nsourceIcsCprchist select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tRegNeglect,\n\t\tRegPhysical,\n\t\tRegSexual,\n\t\tRegEmotional\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCprchist\nAggregate1, SelectCprchist join(Aggregate1@CPRegID == SelectCprchist@CPRegID\n\t&& Aggregate1@PersonID == SelectCprchist@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsCprchist\nDerivedColumn1, SelectEvTyp join(CHILD_PROTECTION_PLAN == EventTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceEvTyp filter(equals(EventTypeGroup, 'CHILD_PROTECTION_PLAN')) ~> Filter1\nFilter1 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nsourceEvCatTyp filter(and(\r\n    equals(EventCategoryTypeGroup, 'CHILD_PROTECTION_PLAN'),\r\n    equals(EventCategoryTypeSubGroup, 'CHILD_PROTECTION_PLAN_CATEGORY')\r\n)) ~> Filter2\nFilter2 select(mapColumn(\n\t\tEventCategoryTypeId,\n\t\tEV_CAT_TYP_DESC = EventCategoryTypeDescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCatTyp\nJoinIcsCprchist derive(EVENT = iif(equals(RegNeglect, 'Y'), 'Neglect', \r\n    iif(equals(RegPhysical, 'Y'), 'Physical Abuse',\r\n        iif(equals(RegSexual, 'Y'), 'Sexual Abuse',\r\n            iif(equals(RegEmotional, 'Y'), 'Emotional Abuse', '0'\r\n            )\r\n        )\r\n    )\r\n),\n\t\tCHILD_PROTECTION_PLAN = 'CHILD_PROTECTION_PLAN') ~> DerivedColumn1\nJoinEvTyp, SelectCatTyp join(EVENT == EV_CAT_TYP_DESC,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCatTyp\nSelect1 derive(EventReasonTypeId = 0,\n\t\tEventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventCategoryTypeId = coalesce(EventCategoryTypeId, 0),\n\t\tEventSourceId = 3,\n\t\tEventValidCreationDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventValidEndDate = coalesce(EventValidEndDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventAcademicYear = toString(null()),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventSourceKey = toString(EventSourceKey)) ~> DerivedColumn2\nJoinCatTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventCategoryTypeId,\n\t\tEventTransactionStartDate = AuditDate,\n\t\tEventSourceKey = Aggregate1@CPRegID,\n\t\tEventValidStartDate = StartDate,\n\t\tEventValidEndDate = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nSelectIcsPreg filter(isNull(OLACSSR)) ~> FilterIcsPreg\nDerivedColumn2 aggregate(groupBy(EventTypeId,\n\t\tEventCategoryTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventReasonTypeId,\n\t\tEventTransactionEndDate,\n\t\tEventSourceId,\n\t\tEventValidCreationDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate),\n\tCountAll = count(1)) ~> Aggregate2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeId','EventCategoryTypeId','EventTransactionStartDate','EventSourceKey','EventValidEndDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEvent5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/5_CINP/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCpCarePlan"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceISPerson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sinkEv"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "FilterCIN"
						},
						{
							"name": "FilterR"
						},
						{
							"name": "JoinR"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "DerivedColumn3"
						}
					],
					"script": "source(output(\n\t\tPlanNo as integer,\n\t\tParPlanNo as integer,\n\t\tPlanLink as string,\n\t\tPlanLinkKey as string,\n\t\tServiceArea as string,\n\t\tPlanType as string,\n\t\tMarkerID as integer,\n\t\tReferralID as integer,\n\t\tMarkerKey as string,\n\t\tStatus as string,\n\t\tGlobalPlanID as integer,\n\t\tGlobalRevision as integer,\n\t\tRevision as integer,\n\t\tSubRev as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tCPComments as string,\n\t\tCreatedBy as string,\n\t\tCreationDate as timestamp,\n\t\tEmergencyPlan as string,\n\t\tEContact1 as string,\n\t\tEContact1No as string,\n\t\tEContact2 as string,\n\t\tEContact2No as string,\n\t\tConsentGiven as string,\n\t\tPlanAgreed as string,\n\t\tSUserComments as string,\n\t\tPlanCoord as string,\n\t\tConsent as string,\n\t\tOfferedBy as string,\n\t\tOfferedDate as timestamp,\n\t\tOfferedNotes as string,\n\t\tRevisionDate as timestamp,\n\t\tUpdateDate as timestamp,\n\t\tCompletedBy as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tFrozenDate as timestamp,\n\t\tFreezeNotes as string,\n\t\tFrozenBy as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tPartOneID as integer,\n\t\tPartTwoID as integer,\n\t\tReviewID as integer,\n\t\tPartTwoPlanNo as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAuthBy as string,\n\t\tAuthCode as string,\n\t\tReasonCeased as string,\n\t\tAuthDate as timestamp,\n\t\tAuthComm as string,\n\t\tOrderByOnDisplay as string,\n\t\tProvTaskNo as integer,\n\t\tEDMIntegID as string,\n\t\tReviewSummary as string,\n\t\tReviewNotes as string,\n\t\tAppVersion as integer,\n\t\tCreatedStaffHistoryID as integer,\n\t\tPlanCoordStaffHistoryID as integer,\n\t\tAuthStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/cpcareplan') ~> sourceCpCarePlan\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceISPerson\nsource(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsourceCpCarePlan select(mapColumn(\n\t\tAuditDate,\n\t\tPlanType,\n\t\tReferralID,\n\t\tUniqueRecord = PlanNo,\n\t\tPersonID = PlanLinkKey,\n\t\tCIN_Status = Status,\n\t\tCIN_Start_Date = StartDate,\n\t\tCIN_End_Date = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tCIN_Status = iif(equals(CIN_Status, 'NULL'), toString(null()), CIN_Status),\n\t\tCIN_Start_Date = coalesce(CIN_Start_Date, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tCIN_End_Date = coalesce(CIN_End_Date, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nsourceIcsRefer select(mapColumn(\n\t\tICSReferralID,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn1 filter(and(\r\n    equals(PlanType, 'FP'),\r\n    and(notEquals(CIN_Status, 'Z'),\r\n        and(not(isNull(CIN_Start_Date)),\r\n            not(isNull(CIN_End_Date))\r\n            )\r\n        )\r\n)) ~> FilterCIN\nSelect2 filter(isNull(EndDate)) ~> FilterR\nFilterCIN, FilterR join(ReferralID == ICSReferralID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinR\nsourceISPerson select(mapColumn(\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nJoinR, SelectIsPerson join(Select1@PersonID == toString(SelectIsPerson@PersonID),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nJoinIsPerson aggregate(groupBy(UniqueRecord,\n\t\tSelect1@PersonID,\n\t\tCIN_Status,\n\t\tCIN_Start_Date,\n\t\tCIN_End_Date),\n\tAuditDate = max(AuditDate)) ~> Aggregate1\nDerivedColumn2, SelectEvTyp join(CHILDREN_IN_NEED == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nAggregate1 derive(CHILDREN_IN_NEED = 'CHILDREN_IN_NEED') ~> DerivedColumn2\nDerivedColumn3 alterRow(upsertIf(true())) ~> AlterRow1\nJoinEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTransactionStartDate = AuditDate,\n\t\tEventSourceKey = UniqueRecord,\n\t\tEventValidStartDate = CIN_Start_Date,\n\t\tEventValidEndDate = CIN_End_Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 derive(EventReasonTypeId = 0,\n\t\tEventCategoryTypeId = 0,\n\t\tEventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventSourceId = 3,\n\t\tEventValidCreationDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventAcademicYear = toString(null()),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventSourceKey = toString(EventSourceKey)) ~> DerivedColumn3\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeId','EventTransactionStartDate','EventValidStartDate','EventValidEndDate','EventSourceKey'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> sinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEvent61')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsplacement"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "icsperiodcare"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icslegalorders"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "EvRsnTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "Ev"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "JoinIcsperiodcare"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinIcelegalorders"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Joinwfpicklistitem"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "EndDate"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "JoinRsnTyp"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "DerivedColumn3"
						}
					],
					"script": "source(output(\n\t\tPlacementID as integer,\n\t\tPersonID as integer,\n\t\tPlacementCode as string,\n\t\tPostCode as string,\n\t\tReason as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAddrID as string,\n\t\tAddr as string,\n\t\tTelephone as string,\n\t\tPlacementLength as integer,\n\t\tMainCarerID as integer,\n\t\tHideInfo as string,\n\t\tHideName as string,\n\t\tHideAddress as string,\n\t\tHideRelChild as string,\n\t\tOutHoursName as string,\n\t\tOutHoursPhone as string,\n\t\tEndDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tPlacementType as string,\n\t\tOtherType as string,\n\t\tVersion as integer,\n\t\tFromBla as string,\n\t\tEndPrevious as string,\n\t\tAddrHistoID as integer,\n\t\tPeriodID as integer,\n\t\tPDistance as string,\n\t\tRelationID as integer,\n\t\tRelationID2 as integer,\n\t\tRelationID3 as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tFosterID as integer,\n\t\tLiveDate as timestamp,\n\t\tDeptID as string,\n\t\tPlacementProvider as string,\n\t\tPlacementLocation as string,\n\t\tPlacementChangeReason as string,\n\t\tEmergencyCarerName as string,\n\t\tEmergencyAddress as string,\n\t\tEndReason as string,\n\t\tAdoptionMarkerID as integer,\n\t\tPre_LPG_AddressKey as string,\n\t\tOfstedPlacementType as string,\n\t\tDecisionAchieved as string,\n\t\tDecisionAchievedComments as string,\n\t\tFFAIsPlanDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsplacement') ~> Icsplacement\nsource(output(\n\t\tPeriodID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tEndReason as string,\n\t\tCinCode as string,\n\t\tReasonCode as string,\n\t\tSyncFlag as string,\n\t\tACDetails as string,\n\t\tACDuration as string,\n\t\tNotes as string,\n\t\tACAccommodation as string,\n\t\tACAccommOther as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tLiveDate as timestamp,\n\t\tAdoptNumber as string,\n\t\tAdoptGender as string,\n\t\tAdoptLegalStatus as string,\n\t\tAdoptFromFoster as string,\n\t\tDateCancelled as timestamp,\n\t\tAdoptBestInterests as timestamp,\n\t\tAdoptAgree as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsperiodcare') ~> icsperiodcare\nsource(output(\n\t\tOrderID as integer,\n\t\tStartDate as timestamp,\n\t\tCourt as string,\n\t\tPersonID as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLegalStatus as string,\n\t\tExpDate as timestamp,\n\t\tComments as string,\n\t\tEndDate as timestamp,\n\t\tPeriodID as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tLiveDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icslegalorders') ~> Icslegalorders\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvTyp\nsource(output(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvRsnTyp\nIcsplacement select(mapColumn(\n\t\tPlacementID,\n\t\tPlacementCode,\n\t\tAuditDate,\n\t\tPeriodID,\n\t\tLiveDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nicsperiodcare select(mapColumn(\n\t\tStartDate,\n\t\tCinCode,\n\t\tLiveDate,\n\t\tPeriodID,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn3, Filter1 join(Select1@PeriodID == Select2@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsperiodcare\nEndDate filter(not(isNull(LiveDate))) ~> Filter1\nJoinIcsperiodcare, Filter2 join(Select2@PeriodID == Select3@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcelegalorders\nIcslegalorders select(mapColumn(\n\t\tLegalStatus,\n\t\tPeriodID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 filter(notEquals(LegalStatus, 'RESP75+')) ~> Filter2\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 filter(equals(pickid, 'ICSLegalStatus')) ~> Filter3\nJoinIcelegalorders, Filter3 join(LegalStatus == code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfpicklistitem\nJoinwfpicklistitem aggregate(groupBy(PlacementID,\n\t\tAuditDate,\n\t\tStartDate,\n\t\tEndDate,\n\t\tCinCode,\n\t\tSelect1@LiveDate,\n\t\tPlacementCode),\n\tPeriodID = max(Select2@PeriodID)) ~> GroupBy\nSelect2 derive(EndDate = coalesce(EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> EndDate\nGroupBy filter(and(\r\n    not(isNull(LiveDate)),\r\n    not(like(PlacementCode, 'T%'))\r\n)) ~> Filter4\nEvRsnTyp filter(equals(EventReasonTypeGroup, 'CHILDREN_IN_CARE')) ~> Filter6\nDerivedColumn2, EvTyp join(DerivedColumn2@EventTypeDescription == EvTyp@EventTypeDescription,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEvTyp, Filter6 join(CinCode == EventReasonTypeInternalCode,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinRsnTyp\nFilter4 derive(EventTypeDescription = 'CHILDREN_IN_CARE') ~> DerivedColumn2\nAddCols aggregate(groupBy(EventTypeId,\n\t\tEventReasonTypeId,\n\t\tAuditDate,\n\t\tPlacementID,\n\t\tStartDate,\n\t\tEndDate),\n\tEventTransactionEndDate = max(EventTransactionEndDate),\n\t\tEventCategoryTypeId = max(EventCategoryTypeId),\n\t\tEventSourceId = max(EventSourceId),\n\t\tEventValidCreationDate = max(EventValidCreationDate),\n\t\tEventAcademicYear = max(EventAcademicYear),\n\t\tEventDeleted = max(EventDeleted),\n\t\tEventRowInsertedDate = max(EventRowInsertedDate)) ~> SelectDistinct\nJoinRsnTyp derive(EventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventCategoryTypeId = 0,\n\t\tEventSourceId = 3,\n\t\tEventValidCreationDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventAcademicYear = 'NULL',\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp()) ~> AddCols\nSelectDistinct alterRow(upsertIf(true())) ~> AlterRow1\nSelect1 derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn3\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeId','EventReasonTypeId','EventTransactionStartDate','EventValidStartDate','EventSourceKey'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate = AuditDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey = PlacementID,\n\t\tEventValidStartDate = StartDate,\n\t\tEventValidEndDate = EndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> Ev"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEvent62')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsplacement"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsperiodcare"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icslegalorders"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessmenttype"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfasession"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfaanswer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem1"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Joinicsperiodcare"
						},
						{
							"name": "Joinicslegalorders"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Joinwfpicklistitem"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Joinwfassessment"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "Joinwfassessmenttyp"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Joinwfasession"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "Joinwfaanswer"
						},
						{
							"name": "Joinwfapicklistitem"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "Filter9"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tPlacementID as integer,\n\t\tPersonID as integer,\n\t\tPlacementCode as string,\n\t\tPostCode as string,\n\t\tReason as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAddrID as string,\n\t\tAddr as string,\n\t\tTelephone as string,\n\t\tPlacementLength as integer,\n\t\tMainCarerID as integer,\n\t\tHideInfo as string,\n\t\tHideName as string,\n\t\tHideAddress as string,\n\t\tHideRelChild as string,\n\t\tOutHoursName as string,\n\t\tOutHoursPhone as string,\n\t\tEndDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tPlacementType as string,\n\t\tOtherType as string,\n\t\tVersion as integer,\n\t\tFromBla as string,\n\t\tEndPrevious as string,\n\t\tAddrHistoID as integer,\n\t\tPeriodID as integer,\n\t\tPDistance as string,\n\t\tRelationID as integer,\n\t\tRelationID2 as integer,\n\t\tRelationID3 as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tFosterID as integer,\n\t\tLiveDate as timestamp,\n\t\tDeptID as string,\n\t\tPlacementProvider as string,\n\t\tPlacementLocation as string,\n\t\tPlacementChangeReason as string,\n\t\tEmergencyCarerName as string,\n\t\tEmergencyAddress as string,\n\t\tEndReason as string,\n\t\tAdoptionMarkerID as integer,\n\t\tPre_LPG_AddressKey as string,\n\t\tOfstedPlacementType as string,\n\t\tDecisionAchieved as string,\n\t\tDecisionAchievedComments as string,\n\t\tFFAIsPlanDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsplacement') ~> Icsplacement\nsource(output(\n\t\tPeriodID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tEndReason as string,\n\t\tCinCode as string,\n\t\tReasonCode as string,\n\t\tSyncFlag as string,\n\t\tACDetails as string,\n\t\tACDuration as string,\n\t\tNotes as string,\n\t\tACAccommodation as string,\n\t\tACAccommOther as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tLiveDate as timestamp,\n\t\tAdoptNumber as string,\n\t\tAdoptGender as string,\n\t\tAdoptLegalStatus as string,\n\t\tAdoptFromFoster as string,\n\t\tDateCancelled as timestamp,\n\t\tAdoptBestInterests as timestamp,\n\t\tAdoptAgree as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsperiodcare') ~> Icsperiodcare\nsource(output(\n\t\tOrderID as integer,\n\t\tStartDate as timestamp,\n\t\tCourt as string,\n\t\tPersonID as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLegalStatus as string,\n\t\tExpDate as timestamp,\n\t\tComments as string,\n\t\tEndDate as timestamp,\n\t\tPeriodID as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tLiveDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icslegalorders') ~> Icslegalorders\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> Wfassessmenttype\nsource(output(\n\t\tSessionNo as integer,\n\t\tProcessNo as integer,\n\t\tFormNo as integer,\n\t\tSessionDate as timestamp,\n\t\tTimeframe as timestamp,\n\t\tSessionCreator as string,\n\t\tStatus as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentSessionNo as integer,\n\t\tReassignedBy as string,\n\t\tRole as string,\n\t\tMarkerID as integer,\n\t\tModDate as timestamp,\n\t\tRetractReason as string,\n\t\tRejectReason as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfasession') ~> Wfasession\nsource(output(\n\t\tAnswerNo as integer,\n\t\tFormSessionNo as integer,\n\t\tQuestionID as string,\n\t\tAnswerCode as string,\n\t\tSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfaanswer') ~> Wfaanswer\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem1\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvTyp\nIcsplacement select(mapColumn(\n\t\tAuditDate,\n\t\tPlacementID,\n\t\tPersonID,\n\t\tPeriodID,\n\t\tPlacementStart = StartDate,\n\t\tPlacementEnd = EndDate,\n\t\tLiveDate,\n\t\tPlacementCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nIcsperiodcare select(mapColumn(\n\t\tPeriodID,\n\t\tLiveDate,\n\t\tPoCStart = StartDate,\n\t\tPoCEnd = EndDate,\n\t\tCinCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 filter(equals(isNull(LiveDate), false())) ~> Filter1\nSelect1, Filter1 join(Select1@PeriodID == Select2@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinicsperiodcare\nJoinicsperiodcare, Filter2 join(Select2@PeriodID == Select3@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinicslegalorders\nIcslegalorders select(mapColumn(\n\t\tPeriodID,\n\t\tLegalStatus,\n\t\tLegalStartDate = StartDate,\n\t\tLegalEndDate = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 filter(notEquals(LegalStatus, 'RESP75+')) ~> Filter2\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 filter(equals(pickid, 'ICSLegalStatus')) ~> Filter3\nJoinicslegalorders, Filter3 join(LegalStatus == code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfpicklistitem\nJoinwfpicklistitem derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tPlacementStart = coalesce(PlacementStart, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tPlacementEnd = coalesce(PlacementEnd, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tPoCStart = coalesce(PoCEnd, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tPoCEnd = coalesce(PlacementEnd, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tLegalStartDate = coalesce(LegalStartDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tLegalEndDate = coalesce(LegalEndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(AuditDate,\n\t\tPlacementID,\n\t\tPersonID,\n\t\tSelect1@PeriodID,\n\t\tPlacementStart,\n\t\tPlacementEnd,\n\t\tPoCStart,\n\t\tPoCEnd,\n\t\tCinCode,\n\t\tLegalStartDate,\n\t\tLegalEndDate,\n\t\tLegalStatus,\n\t\tcode,\n\t\tSelect1@LiveDate,\n\t\tPlacementCode),\n\tCountAll = count(1)) ~> SelectDistinct\nSelectDistinct filter(and(\n    not(isNull(LiveDate)),\n    not(like(PlacementCode, 'T%'))\n)) ~> Filter4\nWfassessment select(mapColumn(\n\t\tFormLinkKey,\n\t\tStatus,\n\t\tStartDate,\n\t\tTemplateID,\n\t\tFormNo,\n\t\tCreationDate,\n\t\tCompletionDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5 filter(equals(Status, 'C')) ~> Filter5\nFilter4, Filter5 join(toString(PersonID) == FormLinkKey\n\t&& toDate(PoCStart) <= toDate(StartDate),\n\tjoinType:'inner',\n\tbroadcast: 'both')~> Joinwfassessment\nWfassessmenttype select(mapColumn(\n\t\tFormType,\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nSelect6 filter(equals(FormType, 'ICS/P1_LACPlan')) ~> Filter6\nJoinwfassessment, Filter6 join(Select5@TemplateID == Select6@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfassessmenttyp\nWfasession select(mapColumn(\n\t\tFormNo,\n\t\tSessionNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nJoinwfassessmenttyp, Select7 join(Select5@FormNo == Select7@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfasession\nWfaanswer filter(equals(QuestionID, 'MainCLAPlan')) ~> Filter7\nJoinwfasession, Filter7 join(SessionNo == FormSessionNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfaanswer\nJoinwfaanswer, Filter8 join(left(AnswerCode, 150) == Wfpicklistitem1@code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfapicklistitem\nWfpicklistitem1 filter(equals(pickid, 'CHOPLAN')) ~> Filter8\nEvTyp filter(equals(EventTypeGroup, 'PUPIL_ASSESSMENT')) ~> Filter9\nJoinwfapicklistitem, Filter9 join(Select5@TemplateID == toInteger(EventTypeInternalCode),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEvTyp derive(EventReasonTypeId = 0,\n\t\t{EventTransactionEndDate } = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\t{EventCategoryTypeId } = 0,\n\t\tEventSourceId = 3,\n\t\t{EventValidCreationDate } = toTimestamp(replace(toString(CreationDate), 'NULL', '9999-12-31 23:59:59.9999')),\n\t\t{EventValidStartDate } = toTimestamp(replace(toString(StartDate), 'NULL', '9999-12-31 23:59:59.9999')),\n\t\tEventValidEndDate = toTimestamp(replace(toString(CompletionDate), 'NULL', '9999-12-31 23:59:59.9999')),\n\t\tEventAcademicYear = 'NULL',\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp()) ~> AddCols\nAddCols alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTransactionStartDate','EventTypeId','EventValidStartDate','EventSourceKey'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate = AuditDate,\n\t\tEventTransactionEndDate = {EventTransactionEndDate },\n\t\tEventCategoryTypeId = {EventCategoryTypeId },\n\t\tEventSourceId,\n\t\tEventSourceKey = Select5@FormNo,\n\t\tEventValidStartDate = {EventValidStartDate },\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate = {EventValidCreationDate }\n\t)) ~> TblEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEvent7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/7_CPC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentType"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sinkEv"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectAss"
						},
						{
							"name": "SelectAssTyp"
						},
						{
							"name": "JoinAss"
						},
						{
							"name": "JoinPp"
						},
						{
							"name": "SelectPp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "FilterEvTyp"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentType\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsourceWfAssessmentType filter(and(\r\n    equals(Description, 'CP Conference Outcomes and Outline Plan'),\r\n    not(like('XX%', FormType))\r\n)) ~> Filter1\nsourceWfAssessment filter(notEquals(Status, 'X')) ~> Filter2\nFilter2 select(mapColumn(\n\t\tTemplateID,\n\t\tFormNo,\n\t\tMarkerID,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tCompletionDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAss\nFilter1 select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssTyp\nSelectAssTyp, SelectAss join(SelectAssTyp@TemplateID == SelectAss@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAss\nJoinAss, SelectPp join(SelectAss@MarkerID == SelectPp@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPp\nsourcePpMark select(mapColumn(\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPp\nJoinPp derive(CHILD_PROTECTION_CONFERENCE = 'CHILD_PROTECTION_CONFERENCE') ~> DerivedColumn1\nDerivedColumn1, FilterEvTyp join(CHILD_PROTECTION_CONFERENCE == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup,\n\t\tEventTypeSubGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nSelectEvTyp filter(isNull(EventTypeSubGroup)) ~> FilterEvTyp\nDerivedColumn2 aggregate(groupBy(EventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidCreationDate,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate),\n\tCountAll = count(1)) ~> Aggregate1\nJoinEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventSourceKey = FormNo,\n\t\tEventValidCreationDate = CreationDate,\n\t\tEventValidStartDate = StartDate,\n\t\tEventValidEndDate = CompletionDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(EventReasonTypeId = 0,\n\t\tEventTransactionStartDate = currentTimestamp(),\n\t\tEventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventCategoryTypeId = 0,\n\t\tEventSourceId = 3,\n\t\tEventValidCreationDate = coalesce(EventValidCreationDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventValidStartDate = coalesce(EventValidStartDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventValidEndDate = coalesce(EventValidEndDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventAcademicYear = toString(null()),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventSourceKey = toString(EventSourceKey)) ~> DerivedColumn2\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeId','EventTransactionStartDate','EventValidCreationDate','EventValidStartDate','EventSourceKey','EventValidEndDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> sinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventCategoryType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "SourceAllocation"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "SourceLookUp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "TblEvCatTyp"
						}
					],
					"transformations": [
						{
							"name": "RenameCols"
						},
						{
							"name": "Groupby"
						},
						{
							"name": "AddFixedColumns"
						},
						{
							"name": "FilterSchoolJoinCategory"
						},
						{
							"name": "FilterSchoolLeaveCategory"
						},
						{
							"name": "FilterNA"
						},
						{
							"name": "RenameColsExclCat"
						},
						{
							"name": "GroupbyExclCat"
						},
						{
							"name": "AddFixedColsExclCat"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Union1"
						},
						{
							"name": "UpsertIfTrue"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> SourceAllocation\nsource(output(\n\t\tCODE_DES as string,\n\t\tEXT_CODE as string,\n\t\tINACTIVE as string,\n\t\tINT_CODE as string,\n\t\tTABLE_ID as string,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tRECORD_ID as decimal(38,18),\n\t\tLOCALE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/lookups_full') ~> SourceLookUp\nGroupby select(mapColumn(\n\t\tEV_CAT_TYP_DESC = DESCRIPTION,\n\t\tEV_CAT_TYP_GRP = GROUP,\n\t\tEV_CAT_TYP_SUB_GRP = SUB_GROUP,\n\t\tEV_CAT_TYP_INTRN_CD = INTERNAL_CODE,\n\t\tEV_CAT_TYP_EXTRN_CD = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nSourceAllocation aggregate(groupBy(DESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tINTERNAL_CODE,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> Groupby\nRenameCols derive(EV_CAT_TYP_TRNS_STR_DT = currentTimestamp(),\n\t\tEV_CAT_TYP_TRNS_END_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_DEL = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_SRC_ID = 1,\n\t\tEV_CAT_TYP_ROW_INST_DT = currentTimestamp()) ~> AddFixedColumns\nAddFixedColumns filter(and(and(equals(EV_CAT_TYP_GRP, \"PUPIL_EVENT\"), equals(EV_CAT_TYP_DESC, \"SCHOOL_TRANSFER\")), equals(EV_CAT_TYP_SUB_GRP, \"JOIN_SCHOOL\"))) ~> FilterSchoolJoinCategory\nAddFixedColumns filter(and(and(equals(EV_CAT_TYP_GRP, \"PUPIL_EVENT\"), equals(EV_CAT_TYP_DESC, \"SCHOOL_TRANSFER\")), equals(EV_CAT_TYP_SUB_GRP, \"LEAVE_SCHOOL\"))) ~> FilterSchoolLeaveCategory\nAddFixedColumns filter(and(and(equals(EV_CAT_TYP_GRP, \"PUPIL_EVENT\"), equals(EV_CAT_TYP_DESC, \"SCHOOL_TRANSFER\")), equals(EV_CAT_TYP_SUB_GRP, \"LEAVE_OR_JOIN_SCHOOL_CATEGORY_MISSING_FROM_SOURCE\"))) ~> FilterNA\nGroupbyExclCat select(mapColumn(\n\t\tEV_CAT_TYP_DESC = CODE_DES,\n\t\tEV_CAT_TYP_INTRN_CD = INT_CODE,\n\t\tEV_CAT_TYP_EXTRN_CD = EXT_CODE,\n\t\tEV_CAT_TYP_TRNS_STR_DT = LAST_UPDT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColsExclCat\nFilter3 aggregate(groupBy(CODE_DES,\n\t\tLAST_UPDT,\n\t\tINT_CODE,\n\t\tEXT_CODE),\n\tCountAll = count(1)) ~> GroupbyExclCat\nRenameColsExclCat derive(EV_CAT_TYP_GRP = 'STUDENT_EXCLUSION',\n\t\tEV_CAT_TYP_TRNS_END_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_DEL = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_SRC_ID = 2,\n\t\tEV_CAT_TYP_ROW_INST_DT = currentTimestamp(),\n\t\tEV_CAT_TYP_SUB_GRP = toString(null()),\n\t\tEV_CAT_TYP_TRNS_STR_DT = coalesce(EV_CAT_TYP_TRNS_STR_DT,toDate('31-12-9999','dd-MM-yyyy'))) ~> AddFixedColsExclCat\nSourceLookUp filter(and(and(equals(LOCALE, '1'), equals(TABLE_ID, \"0310\")), equals(INACTIVE, \"F\"))) ~> Filter3\nAddFixedColsExclCat, FilterNA, FilterSchoolLeaveCategory, FilterSchoolJoinCategory union(byName: true)~> Union1\nUnion1 alterRow(upsertIf(true())) ~> UpsertIfTrue\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventCategoryTypeGroup','EventCategoryTypeSubGroup','EventCategoryTypeInternalCode','EventCategoryTypeExternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventCategoryTypeDescription = EV_CAT_TYP_DESC,\n\t\tEventCategoryTypeGroup = EV_CAT_TYP_GRP,\n\t\tEventCategoryTypeTransactionStartDate = EV_CAT_TYP_TRNS_STR_DT,\n\t\tEventCategoryTypeTransactionEndDate = EV_CAT_TYP_TRNS_END_DT,\n\t\tEventCategoryTypeDeleted = EV_CAT_TYP_DEL,\n\t\tEventCategoryTypeSourceId = EV_CAT_TYP_SRC_ID,\n\t\tEventCategoryTypeRowInsertedDate = EV_CAT_TYP_ROW_INST_DT,\n\t\tEventCategoryTypeSubGroup = EV_CAT_TYP_SUB_GRP,\n\t\tEventCategoryTypeInternalCode = EV_CAT_TYP_INTRN_CD,\n\t\tEventCategoryTypeExternalCode = EV_CAT_TYP_EXTRN_CD\n\t)) ~> TblEvCatTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventCategoryType2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "EvCatTyp"
						}
					],
					"transformations": [
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tEV_CAT_TYP_INTRN_CD = code,\n\t\tEV_CAT_TYP_EXTRN_CD = code,\n\t\tEV_CAT_TYP_DESC = description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols derive(EV_CAT_TYP_GRP = 'REASON_FOR_CONTACT',\n\t\tEV_CAT_TYP_TRNS_STR_DT = currentTimestamp(),\n\t\tEV_CAT_TYP_TRNS_END_DT = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_SRC_ID = 3,\n\t\tEV_CAT_TYP_ROW_INST_DT = currentTimestamp(),\n\t\tEV_CAT_TYP_SUB_GRP = 'ICS_CONTACT_REASON') ~> AddFixedCols\nAddFixedCols aggregate(groupBy(EV_CAT_TYP_INTRN_CD,\n\t\tpickid,\n\t\tEV_CAT_TYP_SUB_GRP,\n\t\tEV_CAT_TYP_ROW_INST_DT,\n\t\tEV_CAT_TYP_SRC_ID,\n\t\tEV_CAT_TYP_DEL,\n\t\tEV_CAT_TYP_TRNS_END_DT,\n\t\tEV_CAT_TYP_TRNS_STR_DT,\n\t\tEV_CAT_TYP_DESC,\n\t\tEV_CAT_TYP_GRP),\n\tCountAll = count(1)) ~> SelectDistinct\nSelectDistinct filter(equals(pickid, 'ICSContactReasons')) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventCategoryTypeDescription = EV_CAT_TYP_DESC,\n\t\tEventCategoryTypeGroup = EV_CAT_TYP_GRP,\n\t\tEventCategoryTypeTransactionStartDate = EV_CAT_TYP_TRNS_STR_DT,\n\t\tEventCategoryTypeTransactionEndDate = EV_CAT_TYP_TRNS_END_DT,\n\t\tEventCategoryTypeDeleted = EV_CAT_TYP_DEL,\n\t\tEventCategoryTypeSourceId = EV_CAT_TYP_SRC_ID,\n\t\tEventCategoryTypeRowInsertedDate = EV_CAT_TYP_ROW_INST_DT,\n\t\tEventCategoryTypeGroup = EV_CAT_TYP_SUB_GRP,\n\t\tEventCategoryTypeInternalCode = EV_CAT_TYP_INTRN_CD,\n\t\tEventCategoryTypeExternalCode = EV_CAT_TYP_INTRN_CD\n\t)) ~> EvCatTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventCategoryType3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfPicklistItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "sinkCatTyp"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> sourceWfPicklistItem\nsourceWfPicklistItem select(mapColumn(\n\t\tpickid,\n\t\tEV_CAT_TYP_INTRN_CD = code,\n\t\tEV_CAT_TYP_DESC = description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter1 derive(EV_CAT_TYP_TRNS_STR_DT = currentTimestamp(),\n\t\tEV_CAT_TYP_TRNS_END_DT = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEV_CAT_TYP_SRC_ID = 3,\n\t\tEV_CAT_TYP_ROW_INST_DT = currentTimestamp(),\n\t\tEV_CAT_TYP_SUB_GRP = 'ICS_REFERRAL_REASON',\n\t\tEV_CAT_TYP_GRP = 'REFERRAL_CATEGORY',\n\t\tEV_CAT_TYP_EXTRN_CD = EV_CAT_TYP_INTRN_CD) ~> DerivedColumn1\nSelect1 filter(equals(trim(pickid), 'ICSCINCodes')) ~> Filter1\nDerivedColumn1 aggregate(groupBy(EV_CAT_TYP_INTRN_CD,\n\t\tEV_CAT_TYP_DESC,\n\t\tEV_CAT_TYP_TRNS_STR_DT,\n\t\tEV_CAT_TYP_TRNS_END_DT,\n\t\tEV_CAT_TYP_DEL,\n\t\tEV_CAT_TYP_SRC_ID,\n\t\tEV_CAT_TYP_ROW_INST_DT,\n\t\tEV_CAT_TYP_SUB_GRP,\n\t\tEV_CAT_TYP_GRP,\n\t\tEV_CAT_TYP_EXTRN_CD),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventCategoryTypeDescription = EV_CAT_TYP_DESC,\n\t\tEventCategoryTypeGroup = EV_CAT_TYP_GRP,\n\t\tEventCategoryTypeTransactionStartDate = EV_CAT_TYP_TRNS_STR_DT,\n\t\tEventCategoryTypeTransactionEndDate = EV_CAT_TYP_TRNS_END_DT,\n\t\tEventCategoryTypeDeleted = EV_CAT_TYP_DEL,\n\t\tEventCategoryTypeSourceId = EV_CAT_TYP_SRC_ID,\n\t\tEventCategoryTypeRowInsertedDate = EV_CAT_TYP_ROW_INST_DT,\n\t\tEventCategoryTypeGroup = EV_CAT_TYP_SUB_GRP,\n\t\tEventCategoryTypeInternalCode = EV_CAT_TYP_INTRN_CD,\n\t\tEventCategoryTypeExternalCode = EV_CAT_TYP_EXTRN_CD\n\t)) ~> sinkCatTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventCategoryType4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/4_CPP/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "TblCatTyp"
						}
					],
					"transformations": [
						{
							"name": "Select"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nInternalReferenceData select(mapColumn(\n\t\tTYP_DESC = DESCRIPTION,\n\t\tTYP_GRP = GROUP,\n\t\tTYP_SUB_GRP = SUB_GROUP,\n\t\tTYP_INT_CD = INTERNAL_CODE,\n\t\tTYP_EXT_CD = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nSelect derive(TYP_START_DATE = currentTimestamp(),\n\t\tTYP_END_DATE = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\t{TYP_SRC_ID } = 0,\n\t\tTYP_ROW_INST = currentTimestamp()) ~> AddCols\nAddCols filter(and(\r\n    equals(TYP_GRP, 'CHILD_PROTECTION_PLAN'),\r\n    equals(TYP_SUB_GRP, 'CHILD_PROTECTION_PLAN_CATEGORY')\r\n)) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventCategoryTypeDescription = TYP_DESC,\n\t\tEventCategoryTypeGroup = TYP_GRP,\n\t\tEventCategoryTypeTransactionStartDate = TYP_START_DATE,\n\t\tEventCategoryTypeTransactionEndDate = TYP_END_DATE,\n\t\tEventCategoryTypeDeleted = TYP_DEL,\n\t\tEventCategoryTypeSourceId = {TYP_SRC_ID },\n\t\tEventCategoryTypeRowInsertedDate = TYP_ROW_INST,\n\t\tEventCategoryTypeSubGroup = TYP_SUB_GRP,\n\t\tEventCategoryTypeInternalCode = TYP_INT_CD,\n\t\tEventCategoryTypeExternalCode = TYP_EXT_CD\n\t)) ~> TblCatTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventLL2_1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsContact"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEcafContact"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sinkEv"
						}
					],
					"transformations": [
						{
							"name": "FilterIcs"
						},
						{
							"name": "SelectIcs"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectRelevantWfa"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "SelectPpMark"
						},
						{
							"name": "JoinPp"
						},
						{
							"name": "JoinASM"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "SelectASM"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "Select4"
						},
						{
							"name": "JoinASMTyp"
						},
						{
							"name": "Join3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "Select6"
						}
					],
					"script": "source(output(\n\t\tICSContactID as integer,\n\t\tPersonID as integer,\n\t\tReferralID as integer,\n\t\tStartDate as timestamp,\n\t\tContactDetails as string,\n\t\tFormNo as integer,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLinkedDate as timestamp,\n\t\tLinkedBy as string,\n\t\tMarkerID as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSourceType as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tKeyAgencyID as integer,\n\t\tSyncEvent as string,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tContactGroupID as integer,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string,\n\t\tExternalFormNo as integer,\n\t\tRecordedStaffHistoryID as integer,\n\t\tLinkedStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscontact2') ~> sourceIcsContact\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tECAFContactID as integer,\n\t\tPersonID as integer,\n\t\tEpisodeID as integer,\n\t\tContactGroupID as integer,\n\t\tFormNo as integer,\n\t\tStartDate as timestamp,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tMarkerID as integer,\n\t\tRecordedBy as string,\n\t\tRecordedByDept as string,\n\t\tLinkedBy as string,\n\t\tLinkedDate as timestamp,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tKeyAgencyID as integer,\n\t\tSysAgency as string,\n\t\tSysProfessional as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tSourceType as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tContactDetails as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tOutOfHours as string,\n\t\tEpisodeNeeds as string,\n\t\tPrimNeed as string,\n\t\tExternalFormNo as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ecafcontact') ~> sourceEcafContact\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentTyp\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsourceIcsContact filter(not(isNull(StartDate))) ~> FilterIcs\nFilterIcs select(mapColumn(\n\t\tPersonID,\n\t\tAuditDate,\n\t\tStartDate,\n\t\tSourceType,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcs\nSelectIcs derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nsourceWfAssessment filter(and( \r\n    equals(FormType, 'ICS/Contact'),\r\n    in(['C', 'D'], Status)\r\n)) ~> Filter1\nFilter1 select(mapColumn(\n\t\tFormNo,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantWfa\nDerivedColumn1, SelectRelevantWfa join(SelectIcs@FormNo == SelectRelevantWfa@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nsourceEcafContact filter(not(isNull(StartDate))) ~> Filter2\nFilter2 select(mapColumn(\n\t\tAuditDate,\n\t\tPersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn2\nsourceWfAssessment filter(and(     equals(FormType, 'ECAF/Contact'),    in(['C', 'D'], Status))) ~> Filter3\nFilter3 select(mapColumn(\n\t\tFormNo,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn2, Select2 join(Select1@FormNo == Select2@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin1 aggregate(groupBy(PersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tFormType,\n\t\tSelectIcs@FormNo),\n\tCountAll = count(1)) ~> Aggregate1\nJoin2 aggregate(groupBy(PersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tFormType,\n\t\tSelect1@FormNo),\n\tCountAll = count(1)) ~> Aggregate2\nAggregate1, Aggregate2 union(byName: true)~> Union1\nsourcePpMark filter(and(\r\n    in(array('/com.ics.ICSContact2','/com.ecaf.ECAFContact'), right(UnitRef, minus(length(UnitRef),instr(UnitRef, '/'))+1)),\r\n    notEquals(SubStatus, 'X')\r\n)) ~> Filter4\nFilter4 select(mapColumn(\n\t\tMarkerID,\n\t\tMainRef\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPpMark\nUnion1, SelectPpMark join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1)),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPp\nJoinPp, SelectASM join(SelectPpMark@MarkerID == SelectASM@MarkerID\n\t&& Union1@FormNo == SelectASM@FormNo\n\t&& left(MainRef, instr(MainRef, '/')-1) == FormLinkKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinASM\nsourceWfAssessment filter(notEquals(Status, 'X')) ~> Filter5\nFilter5 select(mapColumn(\n\t\tMarkerID,\n\t\tTemplateID,\n\t\tFormLinkKey,\n\t\tFormNo,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tCompletionDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectASM\nsourceWfAssessmentTyp select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nsourceEvTyp filter(and(\r\n    equals(EventTypeGroup,'PUPIL_ASSESSMENT'),\r\n    notEquals(EventTypeInternalCode, 'PUPIL_ASSESSMENT')\r\n)) ~> Filter6\nFilter6 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nJoinASM, Select3 join(SelectASM@TemplateID == Select3@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinASMTyp\nJoinASMTyp, Select4 join(SelectASM@TemplateID == toInteger(EventTypeInternalCode),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join3\nSelect6 derive(EventTransactionStartDate = currentTimestamp(),\n\t\tEventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventCategoryTypeId = 0,\n\t\tEventReasonTypeId = 0,\n\t\tEventSourceId = 3,\n\t\tEventValidCreationDate = iif(isNull(EventValidCreationDate), toTimestamp('31-12-9999','dd-MM-yyyy'), EventValidCreationDate),\n\t\tEventValidStartDate = iif(isNull(EventValidStartDate), toTimestamp('31-12-9999','dd-MM-yyyy'), EventValidStartDate),\n\t\tEventValidEndDate = iif(isNull(EventValidEndDate), toTimestamp('31-12-9999','dd-MM-yyyy'), EventValidEndDate),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventAcademicYear = toString(null())) ~> DerivedColumn3\nJoin3 aggregate(groupBy(EventTypeId,\n\t\tSelectASM@FormNo,\n\t\tCreationDate,\n\t\tSelectASM@StartDate,\n\t\tCompletionDate),\n\tCountAll = count(1)) ~> Aggregate3\nAggregate3 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventSourceKey = FormNo,\n\t\tEventValidCreationDate = CreationDate,\n\t\tEventValidStartDate = StartDate,\n\t\tEventValidEndDate = CompletionDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nDerivedColumn3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventLL2_2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsContacts"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEcafContact"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsPerson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "sourceEvRsnTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "sourceEvCatTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sinkEv"
						}
					],
					"transformations": [
						{
							"name": "FilterStartDate"
						},
						{
							"name": "SelectRelevantIcs"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectRelevantWfa"
						},
						{
							"name": "Joinwfa2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectRelevantEcaf"
						},
						{
							"name": "JoinWfa"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "SelectRelevantWfa2"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "SelectPerson"
						},
						{
							"name": "JoinPerson2"
						},
						{
							"name": "JoinPerson"
						},
						{
							"name": "Union2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1EvRsnTyp"
						},
						{
							"name": "SelectEvRsnTyp"
						},
						{
							"name": "FilterEvRsnTyp"
						},
						{
							"name": "FilterEvCatTyp"
						},
						{
							"name": "SelectEvCatTyp"
						},
						{
							"name": "JoinEvCatTyp"
						},
						{
							"name": "FilterTypICS"
						},
						{
							"name": "FilterTypECAF"
						},
						{
							"name": "FilterTypUnknown"
						},
						{
							"name": "SelectICS"
						},
						{
							"name": "SelectUnknown"
						},
						{
							"name": "SelectECAF"
						},
						{
							"name": "JoinEvTypICS"
						},
						{
							"name": "JoinEvTypECAF"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "DerivedColumn7"
						}
					],
					"script": "source(output(\n\t\tICSContactID as integer,\n\t\tPersonID as integer,\n\t\tReferralID as integer,\n\t\tStartDate as timestamp,\n\t\tContactDetails as string,\n\t\tFormNo as integer,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLinkedDate as timestamp,\n\t\tLinkedBy as string,\n\t\tMarkerID as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSourceType as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tKeyAgencyID as integer,\n\t\tSyncEvent as string,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tContactGroupID as integer,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string,\n\t\tExternalFormNo as integer,\n\t\tRecordedStaffHistoryID as integer,\n\t\tLinkedStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscontact2') ~> sourceIcsContacts\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tECAFContactID as integer,\n\t\tPersonID as integer,\n\t\tEpisodeID as integer,\n\t\tContactGroupID as integer,\n\t\tFormNo as integer,\n\t\tStartDate as timestamp,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tMarkerID as integer,\n\t\tRecordedBy as string,\n\t\tRecordedByDept as string,\n\t\tLinkedBy as string,\n\t\tLinkedDate as timestamp,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tKeyAgencyID as integer,\n\t\tSysAgency as string,\n\t\tSysProfessional as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tSourceType as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tContactDetails as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tOutOfHours as string,\n\t\tEpisodeNeeds as string,\n\t\tPrimNeed as string,\n\t\tExternalFormNo as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ecafcontact') ~> sourceEcafContact\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsPerson\nsource(output(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvRsnTyp\nsource(output(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvCatTyp\nsourceIcsContacts filter(and(\r\n    not(isNull(StartDate)),\r\n    not(isNull(CreationDate))\r\n)) ~> FilterStartDate\nFilterStartDate select(mapColumn(\n\t\tPersonID,\n\t\tSourceType,\n\t\tContactSourceKey = ICSContactID,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tContactReason,\n\t\tContactIssue,\n\t\tFormNo,\n\t\tAuditDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantIcs\nsourceWfAssessment filter(and( \r\n    equals(FormType, 'ICS/Contact'),\r\n    in(['C', 'D'], Status)\r\n)) ~> Filter1\nFilter1 select(mapColumn(\n\t\tFormNo,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantWfa\nJoinPerson2, SelectRelevantWfa join(SelectRelevantIcs@FormNo == SelectRelevantWfa@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfa2\nsourceEcafContact filter(and(\r\n    not(isNull(StartDate)),\r\n    not(isNull(CreationDate))\r\n)) ~> Filter2\nFilter2 select(mapColumn(\n\t\tPersonID,\n\t\tSourceType,\n\t\tContactSourceKey = ECAFContactID,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tContactReason,\n\t\tContactIssue,\n\t\tFormNo,\n\t\tAuditDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantEcaf\nJoinPerson, SelectRelevantWfa2 join(SelectRelevantEcaf@FormNo == SelectRelevantWfa2@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfa\nsourceWfAssessment filter(and( \r\n    equals(FormType, 'ECAF/Contact'),\r\n    in(['C', 'D'], Status)\r\n)) ~> Filter3\nFilter3 select(mapColumn(\n\t\tFormNo,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantWfa2\nJoinwfa2 derive(AuditDate = iif(isNull(AuditDate), toTimestamp('31-12-9999','dd-MM-yyyy'), AuditDate)) ~> DerivedColumn1\nJoinWfa derive(AuditDate = iif(isNull(AuditDate), toTimestamp('31-12-9999','dd-MM-yyyy'), AuditDate)) ~> DerivedColumn2\nSelectRelevantIcs derive(AuditDate = iif(isNull(AuditDate), toTimestamp('31-12-9999','dd-MM-yyyy'), AuditDate)) ~> DerivedColumn3\nSelectRelevantEcaf derive(AuditDate = iif(isNull(AuditDate), toTimestamp('31-12-9999','dd-MM-yyyy'), AuditDate)) ~> DerivedColumn4\nsourceIsPerson select(mapColumn(\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPerson\nDerivedColumn3, SelectPerson join(SelectRelevantIcs@PersonID == SelectPerson@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPerson2\nDerivedColumn4, SelectPerson join(SelectRelevantEcaf@PersonID == SelectPerson@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPerson\nSelect1, Select2 union(byName: true)~> Union2\nDerivedColumn1 select(mapColumn(\n\t\tPersonID = SelectRelevantIcs@PersonID,\n\t\tSourceType,\n\t\tContactSourceKey,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tContactReason,\n\t\tContactIssue,\n\t\tFormNo = SelectRelevantIcs@FormNo,\n\t\tAuditDate,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 select(mapColumn(\n\t\tPersonID = SelectRelevantEcaf@PersonID,\n\t\tSourceType,\n\t\tContactSourceKey,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tContactReason,\n\t\tContactIssue,\n\t\tFormNo = SelectRelevantEcaf@FormNo,\n\t\tAuditDate,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nUnion2, SelectEvRsnTyp join(ContactIssue == EventReasonTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1EvRsnTyp\nFilterEvRsnTyp select(mapColumn(\n\t\tEventReasonTypeId,\n\t\tEventReasonTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvRsnTyp\nsourceEvRsnTyp filter(and(\r\n    equals(EventReasonTypeGroup, 'CONTACT_ISSUE'),\r\n    in(array('ICS_CONTACT_ISSUES','ECAF_CONTACT_ISSUES'), EventReasonTypeSubGroup)\r\n)) ~> FilterEvRsnTyp\nsourceEvCatTyp filter(and(\r\n    equals(EventCategoryTypeGroup, 'REASON_FOR_CONTACT'),\r\n    in(array('ICS_CONTACT_REASON','ICS_CONTACT_REASON'), EventCategoryTypeSubGroup)\r\n)) ~> FilterEvCatTyp\nFilterEvCatTyp select(mapColumn(\n\t\tEventCategoryTypeId,\n\t\tEV_CAT_TYP_INTRN_CD = EventCategoryTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvCatTyp\nJoin1EvRsnTyp, SelectEvCatTyp join(ContactReason == EV_CAT_TYP_INTRN_CD,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvCatTyp\nsourceEvTyp filter(equals(EventTypeGroup, 'ICS_CONTACT')) ~> FilterTypICS\nsourceEvTyp filter(equals(EventTypeGroup, 'ECAF_CONTACT')) ~> FilterTypECAF\nsourceEvTyp filter(equals(EventTypeGroup, 'ICS_CONTACT')) ~> FilterTypUnknown\nFilterTypICS select(mapColumn(\n\t\tEventTypeId_ICS = EventTypeId,\n\t\tEventTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectICS\nDerivedColumn5 select(mapColumn(\n\t\tEventTypeId_Unknown = EventTypeId,\n\t\tEventTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUnknown\nFilterTypECAF select(mapColumn(\n\t\tEventTypeId_ECAF = EventTypeId,\n\t\tEventTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectECAF\nJoinEvCatTyp, SelectICS join(iif(equals(SourceType, 'NULL'), '10', coalesce(SourceType, '10')) == EventTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTypICS\nJoinEvTypICS, SelectECAF join(iif(equals(SourceType, 'NULL'), '10', coalesce(SourceType, '10')) == SelectECAF@EventTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTypECAF\nFilterTypUnknown derive(EventTypeInternalCode = '9') ~> DerivedColumn5\nJoinEvTypECAF derive(EventTypeId = iif(equals(FormType, 'ICS/Contact'), \r\n    EventTypeId_ICS,\r\n    iif(equals(FormType, 'ECAF/Contact'), \r\n        EventTypeId_ECAF, toLong(0))\r\n),\n\t\tEventReasonTypeId = coalesce(EventReasonTypeId, 0),\n\t\tEventTransactionStartDate = AuditDate,\n\t\tEventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventCategoryTypeId = coalesce(EventCategoryTypeId, 0),\n\t\tEventSourceId = 3,\n\t\tEventSourceKey = ContactSourceKey,\n\t\tEventValidStartDate = StartDate,\n\t\tEventValidEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventAcademicYear = toString(null()),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventValidCreationDate = toTimestamp('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn6\nDerivedColumn7 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn6 derive(EventTypeId = coalesce(EventTypeId, 0)) ~> DerivedColumn7\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventReasonTypeId','EventTypeId','EventTransactionStartDate','EventCategoryTypeId','EventSourceKey','EventValidCreationDate','EventValidStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> sinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventLL3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "sourceEvRsnTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "sourceEvCatTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sinkEv"
						}
					],
					"transformations": [
						{
							"name": "SelectIcs"
						},
						{
							"name": "SelectASM"
						},
						{
							"name": "SelectM"
						},
						{
							"name": "FilterASM"
						},
						{
							"name": "JoinASM"
						},
						{
							"name": "JoinPpMark"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "FilterRsnTyp"
						},
						{
							"name": "JoinRsnTyp"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "FilterCatTyp"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Select3"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvRsnTyp\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvCatTyp\nsourceIcsRefer select(mapColumn(\n\t\tICSReferralID,\n\t\tPersonID,\n\t\tAuditDate,\n\t\tEndDate,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tReasonCode,\n\t\tCategoryType,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcs\nsourceWfAssessment select(mapColumn(\n\t\tFormNo,\n\t\tStatus,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectASM\nsourcePpMark select(mapColumn(\n\t\tMarkerID,\n\t\tMainRef\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectM\nSelectASM filter(in(array('C','D','F'), Status)) ~> FilterASM\nAggregate2, FilterASM join(Aggregate2@FormNo == SelectASM@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinASM\nJoinASM, SelectM join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1))\n\t&& SelectASM@MarkerID == SelectM@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPpMark\nJoinPpMark aggregate(groupBy(ICSReferralID,\n\t\tStartDate,\n\t\tEndDate,\n\t\tCreationDate,\n\t\tReasonCode,\n\t\tCategoryType),\n\tAuditDate = max(AuditDate)) ~> Aggregate1\nDerivedColumn2 aggregate(groupBy(ICSReferralID,\n\t\tPersonID,\n\t\tAuditDate,\n\t\tEndDate,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tReasonCode,\n\t\tCategoryType,\n\t\tFormNo),\n\tCountAll = count(1)) ~> Aggregate2\nSelectIcs derive(EndDate = coalesce(EndDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tCreationDate = coalesce(CreationDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tAuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn2\nsourceEvRsnTyp select(mapColumn(\n\t\tEventReasonTypeId,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(and(\r\n    equals(EventReasonTypeGroup, 'PUPIL_REFERRAL'),\r\n    equals(EventReasonTypeSubGroup, 'ICS_REFERRAL_REASON')\r\n\r\n)) ~> FilterRsnTyp\nAggregate1, FilterRsnTyp join(ReasonCode == EventReasonTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinRsnTyp\nJoinRsnTyp derive(PUPIL_REFERRAL = 'PUPIL_REFERRAL') ~> DerivedColumn3\nDerivedColumn3, SelectEvTyp join(PUPIL_REFERRAL == EventTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nJoinEvTyp, FilterCatTyp join(CategoryType == EV_CAT_TYP_INTRN_CD,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nsourceEvCatTyp select(mapColumn(\n\t\tEventCategoryTypeId,\n\t\tEV_CAT_TYP_GRP = EventCategoryTypeGroup,\n\t\tEV_CAT_TYP_SUB_GRP = EventCategoryTypeSubGroup,\n\t\tEV_CAT_TYP_INTRN_CD = EventCategoryTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 filter(and(\r\n    equals(EV_CAT_TYP_GRP, 'REFERRAL_CATEGORY'),\r\n    equals(EV_CAT_TYP_SUB_GRP, 'ICS_CIN_Codes')\r\n)) ~> FilterCatTyp\nSelect3 derive(EventReasonTypeId = coalesce(EventReasonTypeId, 0),\n\t\tEventTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventCategoryTypeId = coalesce(EventCategoryTypeId, 0),\n\t\tEventSourceId = 3,\n\t\tEventAcademicYear = toString(null()),\n\t\tEventDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRowInsertedDate = currentTimestamp(),\n\t\tEventSourceKey = toString(EventSourceKey)) ~> DerivedColumn4\nJoin1 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate = AuditDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceKey = ICSReferralID,\n\t\tEventValidCreationDate = CreationDate,\n\t\tEventValidStartDate = StartDate,\n\t\tEventValidEndDate = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeId','EventReasonTypeId','EventTransactionStartDate','EventSourceKey','EventValidCreationDate','EventValidStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t)) ~> sinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventMetricType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventMetricType",
								"type": "DatasetReference"
							},
							"name": "TblEvMtrTyp"
						}
					],
					"transformations": [
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "FilterStudentHistory"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "GroupByDistinctRows"
						},
						{
							"name": "FilterExclusionMetric"
						},
						{
							"name": "UnionFilters"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nAddFixedCols alterRow(upsertIf(true())) ~> UpsertIfTrue\nGroupByDistinctRows select(mapColumn(\n\t\tEventMetricTypeDescription = DESCRIPTION,\n\t\tEventMetricTypeGroup = GROUP,\n\t\tEventMetricTypeSubGroup = SUB_GROUP,\n\t\tEventMetricTypeInternalCode = INTERNAL_CODE,\n\t\tEventMetricTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns\nRenameColumns filter(and(\r\n    and(\r\nequals(EventMetricTypeGroup,\"PUPIL_EVENT\"),\r\nequals(EventMetricTypeDescription,\"SCHOOL_TRANSFER\")),\r\nequals(EventMetricTypeSubGroup,\"PUPIL_SCHOOL_DAYS_PER_WEEK\")\r\n)) ~> FilterStudentHistory\nUnionFilters derive(EventMetricTypeSourceId = 1,\n\t\tEventMetricTypeRowInsertedDate = currentTimestamp(),\n\t\tEventMetricTypeTransactionStartDate = currentTimestamp(),\n\t\tEventMetricTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventMetricTypeDeleted = toDate('31-12-9999','dd-MM-yyyy')) ~> AddFixedCols\nInternalReferenceData aggregate(groupBy(DESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tINTERNAL_CODE,\n\t\tEXTERNAL_CODE),\n\tCountall = count(1)) ~> GroupByDistinctRows\nRenameColumns filter(and(\r\nequals(EventMetricTypeGroup,\"STUDENT_EXCLUSION\"),\r\nequals(EventMetricTypeDescription,\"STUDENT_EXCLUSION_DAYS\")\r\n)) ~> FilterExclusionMetric\nFilterStudentHistory, FilterExclusionMetric union(byName: true)~> UnionFilters\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventMetricTypeId as long,\n\t\tEventMetricTypeDescription as string,\n\t\tEventMetricTypeGroup as string,\n\t\tEventMetricTypeTransactionStartDate as timestamp,\n\t\tEventMetricTypeTransactionEndDate as timestamp,\n\t\tEventMetricTypeDeleted as timestamp,\n\t\tEventMetricTypeSourceId as integer,\n\t\tEventMetricTypeRowInsertedDate as timestamp,\n\t\tEventMetricTypeSubGroup as string,\n\t\tEventMetricTypeInternalCode as string,\n\t\tEventMetricTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventMetricTypeDeleted','EventMetricTypeTransactionEndDate','EventMetricTypeTransactionStartDate','EventMetricTypeGroup','EventMetricTypeInternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventMetricTypeDescription,\n\t\tEventMetricTypeGroup,\n\t\tEventMetricTypeTransactionStartDate,\n\t\tEventMetricTypeTransactionEndDate,\n\t\tEventMetricTypeDeleted,\n\t\tEventMetricTypeSourceId,\n\t\tEventMetricTypeRowInsertedDate,\n\t\tEventMetricTypeSubGroup,\n\t\tEventMetricTypeInternalCode,\n\t\tEventMetricTypeExternalCode\n\t)) ~> TblEvMtrTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventMetricType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventReasonType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Source"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "TblEvRsnType"
						}
					],
					"transformations": [
						{
							"name": "GroupBy0"
						},
						{
							"name": "RenameColumns0"
						},
						{
							"name": "AddFixedColumns0"
						},
						{
							"name": "FilterExclusionReason"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "FilterError"
						},
						{
							"name": "Union2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "FilterInactive"
						}
					],
					"script": "source(output(\n\t\tCODE_DES as string,\n\t\tEXT_CODE as string,\n\t\tINACTIVE as string,\n\t\tINT_CODE as string,\n\t\tTABLE_ID as string,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tRECORD_ID as decimal(38,18),\n\t\tLOCALE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/lookups_full') ~> Source\nsource(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nFilterInactive aggregate(groupBy(CODE_DES,\n\t\tINT_CODE,\n\t\tEXT_CODE,\n\t\tTABLE_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupBy0\nGroupBy0 select(mapColumn(\n\t\tEventReasonTypeDescription = CODE_DES,\n\t\tEventReasonTypeInternalCode = INT_CODE,\n\t\tEventReasonTypeExternalCode = EXT_CODE,\n\t\tEventReasonTypeTransactionStartDate = LAST_UPDT,\n\t\tTABLE_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns0\nRenameColumns0 derive(EventReasonTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = 2,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp(),\n\t\tEventReasonTypeSubGroup = toString(null()),\n\t\tEventReasonTypeGroup = 'STUDENT_EXCLUSION') ~> AddFixedColumns0\nAddFixedColumns0 filter(equals(TABLE_ID, \"0309\")) ~> FilterExclusionReason\nSelect1, FilterError, Select2 union(byName: true)~> Union1\nInternalReferenceData aggregate(groupBy(INTERNAL_CODE,\n\t\tDESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 derive(EventReasonTypeTransactionStartDate = currentTimestamp(),\n\t\tEventReasonTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = -1,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp()) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tEventReasonTypeInternalCode = INTERNAL_CODE,\n\t\tEventReasonTypeDescription = DESCRIPTION,\n\t\tEventReasonTypeGroup = GROUP,\n\t\tEventReasonTypeSubGroup = SUB_GROUP,\n\t\tEventReasonTypeExternalCode = EXTERNAL_CODE,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(and(equals(EventReasonTypeDescription, 'ERROR_VALUE_PLACEHOLDER'), equals(EventReasonTypeGroup, 'GLOBAL'))) ~> FilterError\nFilterExclusionReason, Filter7, Filter8 union(byName: true)~> Union2\nUnion2 select(mapColumn(\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeExternalCode,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nRenameColumns0 derive(EventReasonTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = 2,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp(),\n\t\tEventReasonTypeSubGroup = toString(null()),\n\t\tEventReasonTypeGroup = 'SCHOOL_TRANSFER') ~> DerivedColumn2\nRenameColumns0 derive(EventReasonTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = 2,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp(),\n\t\tEventReasonTypeSubGroup = toString(null()),\n\t\tEventReasonTypeGroup = 'SCHOOL_TRANSFER',\n\t\tEventReasonTypeTransactionStartDate = coalesce(EventReasonTypeTransactionStartDate,toDate('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn3\nDerivedColumn3 filter(equals(TABLE_ID, \"0356\")) ~> Filter7\nDerivedColumn2 filter(equals(TABLE_ID, \"0357\")) ~> Filter8\nUnion1 aggregate(groupBy(EventReasonTypeInternalCode,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate),\n\tEventReasonTypeDescription = max(EventReasonTypeDescription),\n\t\tEventReasonTypeRowInsertedDate = max(EventReasonTypeRowInsertedDate),\n\t\tEventReasonTypeSubGroup = max(EventReasonTypeSubGroup),\n\t\tEventReasonTypeExternalCode = max(EventReasonTypeExternalCode),\n\t\tEventReasonTypeSourceId = max(EventReasonTypeSourceId)) ~> Aggregate2\nSelect3 alterRow(upsertIf(true())) ~> AlterRow1\nAggregate2 select(mapColumn(\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeExternalCode,\n\t\tEventReasonTypeSourceId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSource filter(equals(INACTIVE, 'F')) ~> FilterInactive\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventReasonTypeInternalCode','EventReasonTypeTransactionStartDate','EventReasonTypeTransactionEndDate','EventReasonTypeGroup','EventReasonTypeDeleted'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeExternalCode\n\t)) ~> TblEvRsnType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventReasonType2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "EvRsnTyp"
						}
					],
					"transformations": [
						{
							"name": "AddFixedCols"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nSelectRelevantCols derive(EventReasonTypeGroup = 'CONTACT_ISSUE',\n\t\tEventReasonTypeTransactionStartDate = currentTimestamp(),\n\t\tEventReasonTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = 3,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp(),\n\t\tEventReasonTypeSubGroup = 'ICS_CONTACT_ISSUES') ~> AddFixedCols\nAddFixedCols aggregate(groupBy(EventReasonTypeInternalCode,\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tpickid),\n\tCountAll = count(1)) ~> SelectDistinct\nWfpicklistitem select(mapColumn(\n\t\tEventReasonTypeInternalCode = code,\n\t\tEventReasonTypeExternalCode = code,\n\t\tEventReasonTypeDescription = description,\n\t\tpickid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectDistinct filter(equals(pickid, 'ICSContactIssue')) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeExternalCode = EventReasonTypeInternalCode\n\t)) ~> EvRsnTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventReasonType3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfPicklistItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "sinkRsnTyp"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> sourceWfPicklistItem\nsourceWfPicklistItem select(mapColumn(\n\t\tpickid,\n\t\tEventReasonTypeInternalCode = code,\n\t\tEventReasonTypeDescription = description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter1 derive(EventReasonTypeTransactionStartDate = currentTimestamp(),\n\t\tEventReasonTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = 3,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp(),\n\t\tEventReasonTypeSubGroup = 'ICS_REFERRAL_REASON',\n\t\tEventReasonTypeGroup = 'PUPIL_REFERRAL',\n\t\tEventReasonTypeExternalCode = EventReasonTypeInternalCode) ~> DerivedColumn1\nSelect1 filter(equals(trim(pickid), 'ICSReferralReasons')) ~> Filter1\nDerivedColumn1 aggregate(groupBy(EventReasonTypeInternalCode,\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeExternalCode),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeExternalCode\n\t)) ~> sinkRsnTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventReasonType6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventReasonType",
								"type": "DatasetReference"
							},
							"name": "EvRsnTyp"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectDistinct"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tEventReasonTypeInternalCode = code,\n\t\tEventReasonTypeExternalCode = code,\n\t\tEventReasonTypeDescription = description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(equals(pickid, 'ICSCINCodes')) ~> Filter1\nFilter1 derive(EventReasonTypeGroup = 'CHILDREN_IN_CARE',\n\t\tEventReasonTypeTransactionStartDate = currentTimestamp(),\n\t\tEventReasonTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventReasonTypeSourceId = 0,\n\t\tEventReasonTypeRowInsertedDate = currentTimestamp(),\n\t\tEventReasonTypeSubGroup = 'CHILDREN_IN_CARE') ~> DerivedColumn1\nSelectDistinct alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(EventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode),\n\tCountAll = count(1)) ~> SelectDistinct\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventReasonTypeId as long,\n\t\tEventReasonTypeDescription as string,\n\t\tEventReasonTypeGroup as string,\n\t\tEventReasonTypeTransactionStartDate as timestamp,\n\t\tEventReasonTypeTransactionEndDate as timestamp,\n\t\tEventReasonTypeDeleted as timestamp,\n\t\tEventReasonTypeSourceId as integer,\n\t\tEventReasonTypeRowInsertedDate as timestamp,\n\t\tEventReasonTypeSubGroup as string,\n\t\tEventReasonTypeInternalCode as string,\n\t\tEventReasonTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventReasonTypeGroup','EventReasonTypeDescription','EventReasonTypeSubGroup','EventReasonTypeInternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventReasonTypeDescription,\n\t\tEventReasonTypeGroup,\n\t\tEventReasonTypeTransactionStartDate,\n\t\tEventReasonTypeTransactionEndDate,\n\t\tEventReasonTypeDeleted,\n\t\tEventReasonTypeSourceId,\n\t\tEventReasonTypeRowInsertedDate,\n\t\tEventReasonTypeSubGroup,\n\t\tEventReasonTypeInternalCode,\n\t\tEventReasonTypeExternalCode = EventReasonTypeInternalCode\n\t)) ~> EvRsnTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventReasonType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationship2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsContact"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEcafContact"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceTblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceTblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "sourceRelshpTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationship",
								"type": "DatasetReference"
							},
							"name": "sinkRelshp"
						}
					],
					"transformations": [
						{
							"name": "FilterIcs"
						},
						{
							"name": "SelectIcs"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectRelevantWfa"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Union1"
						},
						{
							"name": "SelecTContactEV"
						},
						{
							"name": "SelectAssessmentEv"
						},
						{
							"name": "SelectCntEvTyp"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "JoinContactEv"
						},
						{
							"name": "JoinAssessmentEv"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "Select4"
						},
						{
							"name": "DerivedColumnIcsReslShpTyp"
						},
						{
							"name": "DerivedColumnEcafResShpTyp"
						},
						{
							"name": "Filter9"
						},
						{
							"name": "Filter10"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Join4"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Join6"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tICSContactID as integer,\n\t\tPersonID as integer,\n\t\tReferralID as integer,\n\t\tStartDate as timestamp,\n\t\tContactDetails as string,\n\t\tFormNo as integer,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLinkedDate as timestamp,\n\t\tLinkedBy as string,\n\t\tMarkerID as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSourceType as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tKeyAgencyID as integer,\n\t\tSyncEvent as string,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tContactGroupID as integer,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string,\n\t\tExternalFormNo as integer,\n\t\tRecordedStaffHistoryID as integer,\n\t\tLinkedStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscontact2') ~> sourceIcsContact\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tECAFContactID as integer,\n\t\tPersonID as integer,\n\t\tEpisodeID as integer,\n\t\tContactGroupID as integer,\n\t\tFormNo as integer,\n\t\tStartDate as timestamp,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tMarkerID as integer,\n\t\tRecordedBy as string,\n\t\tRecordedByDept as string,\n\t\tLinkedBy as string,\n\t\tLinkedDate as timestamp,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tKeyAgencyID as integer,\n\t\tSysAgency as string,\n\t\tSysProfessional as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tSourceType as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tContactDetails as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tOutOfHours as string,\n\t\tEpisodeNeeds as string,\n\t\tPrimNeed as string,\n\t\tExternalFormNo as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ecafcontact') ~> sourceEcafContact\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblEvTyp\nsource(output(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceRelshpTyp\nsourceIcsContact filter(not(isNull(StartDate))) ~> FilterIcs\nFilterIcs select(mapColumn(\n\t\tPersonID,\n\t\tAuditDate,\n\t\tStartDate,\n\t\tSourceType,\n\t\tContactSourceKey = ICSContactID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcs\nSelectIcs derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nsourceWfAssessment filter(and( \r\n    equals(FormType, 'ICS/Contact'),\r\n    in(['C', 'D'], Status)\r\n)) ~> Filter1\nFilter1 select(mapColumn(\n\t\tFormNo,\n\t\tFormType,\n\t\tStatus,\n\t\tASM_CompletionDate = CompletionDate,\n\t\tASM_StartDate = StartDate,\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantWfa\nDerivedColumn1, SelectRelevantWfa join(SelectIcs@FormNo == SelectRelevantWfa@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nsourceEcafContact filter(not(isNull(StartDate))) ~> Filter2\nFilter2 select(mapColumn(\n\t\tAuditDate,\n\t\tPersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tFormNo,\n\t\tContactSourceKey = ECAFContactID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn2\nsourceWfAssessment filter(and( \r\n    equals(FormType, 'ECAF/Contact'),\r\n    in(['C', 'D'], Status)\r\n)) ~> Filter3\nFilter3 select(mapColumn(\n\t\tFormNo,\n\t\tTemplateID,\n\t\tFormType,\n\t\tStatus,\n\t\tASM_StartDate = StartDate,\n\t\tASM_CompletionDate = CompletionDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn2, Select2 join(Select1@FormNo == Select2@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin1 aggregate(groupBy(SelectIcs@FormNo,\n\t\tContactSourceKey,\n\t\tSourceType,\n\t\tStartDate,\n\t\tTemplateID,\n\t\tASM_StartDate,\n\t\tFormType,\n\t\tASM_CompletionDate),\n\tCountAll = count(1)) ~> Aggregate1\nJoin2 aggregate(groupBy(Select1@FormNo,\n\t\tContactSourceKey,\n\t\tSourceType,\n\t\tStartDate,\n\t\tTemplateID,\n\t\tASM_StartDate,\n\t\tASM_CompletionDate,\n\t\tFormType),\n\tCountAll = count(1)) ~> Aggregate2\nAggregate1, Aggregate2 union(byName: true)~> Union1\nFilter10 select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelecTContactEV\nFilter9 select(mapColumn(\n\t\tEventRELATEDId = EventId,\n\t\tEV_RELATED_TYP_ID = EventTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssessmentEv\nFilter4 select(mapColumn(\n\t\tEventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCntEvTyp\nsourceTblEvTyp filter(in(array('ICS_CONTACT','ECAF_CONTACT'), EventTypeGroup)) ~> Filter4\nsourceTblEvTyp filter(equals(EventTypeGroup, 'PUPIL_ASSESSMENT')) ~> Filter5\nFilter5 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeExternalCode,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nUnion1, Join3 join(toString(ContactSourceKey) == EventSourceKey\n\t&& toDate(StartDate) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinContactEv\nJoinContactEv, Join4 join(FormNo == toInteger(SelectAssessmentEv@EventSourceKey)\n\t&& toDate(SelecTContactEV@EventValidStartDate) == toDate(SelectAssessmentEv@EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAssessmentEv\nFilter7 select(mapColumn(\n\t\tEventRelationshipTypeId_ICS = EventRelationshipTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nsourceRelshpTyp filter(equals(EventRelationshipTypeInternalCode, 'ICS_CONTACT_ASSESTMENT')) ~> Filter7\nsourceRelshpTyp filter(equals(EventRelationshipTypeInternalCode, 'ECAF_CONTACT_ASSESTMENT')) ~> Filter8\nFilter8 select(mapColumn(\n\t\tEventRelationshipTypeId_ECAF = EventRelationshipTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect3 derive(FormTypeICS = 'ICS/Contact') ~> DerivedColumnIcsReslShpTyp\nSelect4 derive(FormTypeEcaf = 'ECAF/Contact') ~> DerivedColumnEcafResShpTyp\nsourceTblEv filter(equals(EventSourceId, 3)) ~> Filter9\nsourceTblEv filter(equals(EventSourceId, 3)) ~> Filter10\nSelecTContactEV, SelectCntEvTyp join(SelecTContactEV@EventTypeId == SelectCntEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join3\nSelectAssessmentEv, SelectEvTyp join(EV_RELATED_TYP_ID == EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join4\nJoinAssessmentEv derive(FormTypeICS = 'ICS/Contact',\n\t\tFormTypeEcaf = 'ECAF/Contact') ~> DerivedColumn3\nDerivedColumn3, DerivedColumnIcsReslShpTyp join(DerivedColumn3@FormTypeICS == DerivedColumnIcsReslShpTyp@FormTypeICS,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join5\nJoin5, DerivedColumnEcafResShpTyp join(DerivedColumn3@FormTypeEcaf == DerivedColumnEcafResShpTyp@FormTypeEcaf,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join6\nJoin6 derive(EventRelationshipTypeId = iif(equals(FormType, 'ECAF/Contact'), EventRelationshipTypeId_ECAF, \r\n    iif(equals(FormType, 'ICS/Contact'), EventRelationshipTypeId_ICS, toLong(0))\r\n),\n\t\tEventRelationshipRowInsertedDate = currentTimestamp(),\n\t\tEventRelationshipDeleted = toTimestamp('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn4\nDerivedColumn4 select(mapColumn(\n\t\tEventRelationshipTransactionStartDate = EventTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate = EventTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate = SelecTContactEV@EventValidStartDate,\n\t\tEventRelationshipValidEndDate = EventValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5 aggregate(groupBy(EventRelationshipTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate,\n\t\tEventRelationshipValidEndDate,\n\t\tEventRelationshipTypeId),\n\tEventRelationshipRowInsertedDate = max(EventRelationshipRowInsertedDate),\n\t\tEventRelationshipDeleted = max(EventRelationshipDeleted)) ~> Aggregate3\nAggregate3 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTransactionStartDate as timestamp,\n\t\tEventRelationshipTransactionEndDate as timestamp,\n\t\tEventId as long,\n\t\tEventRELATEDId as long,\n\t\tEventRelationshipValidStartDate as timestamp,\n\t\tEventRelationshipValidEndDate as timestamp,\n\t\tEventRelationshipRowInsertedDate as timestamp,\n\t\tEventRelationshipDeleted as timestamp,\n\t\tEventRelationshipTypeId as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventRELATEDId','EventRelationshipValidStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate,\n\t\tEventRelationshipValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t)) ~> sinkRelshp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationship')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationship3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsrefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ppmark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessmenttyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "TblRelshpTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationship",
								"type": "DatasetReference"
							},
							"name": "TblEvRelshp"
						}
					],
					"transformations": [
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "AuditStartDate"
						},
						{
							"name": "SelectRelevantCols1"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "JoinPpmark"
						},
						{
							"name": "JoinWfassessment"
						},
						{
							"name": "SelectRelevantCols3"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Groupby"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "SelectRelevantCols4"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "JoinEv2"
						},
						{
							"name": "JoinEvTyp2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinRelshpTyp"
						},
						{
							"name": "SelectRelCols"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AddCol"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> Icsrefer\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> Ppmark\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> Wfassessmenttyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblRelshpTyp\nIcsrefer select(mapColumn(\n\t\tAuditDate,\n\t\tReferralStart = StartDate,\n\t\tPersonID,\n\t\tUniqueRecord = ICSReferralID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols derive(AuditDate = replace(toString(AuditDate), 'NULL', '9999-12-31 23:59:59.9999'),\n\t\tReferralStart = iif(equals(toString(ReferralStart), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), ReferralStart)) ~> AuditStartDate\nPpmark select(mapColumn(\n\t\tMainRef,\n\t\tUnitRef,\n\t\tSubStatus,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols1\nWfassessment select(mapColumn(\n\t\tMarkerID,\n\t\tFormLinkKey,\n\t\tStatus,\n\t\tTemplateID,\n\t\tFormNo,\n\t\tStartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nSelectRelevantCols1 filter(and(\r\n    equals(right(UnitRef, minus(length(UnitRef),instr(UnitRef, '/'))+1), '/com.liquidlogic.assessment.DBAssessment'),\r\n    notEquals(SubStatus, 'X')\r\n)) ~> Filter1\nSelectRelevantCols2 filter(notEquals(Status, 'X')) ~> Filter2\nAuditStartDate, Filter1 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1)),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPpmark\nJoinPpmark, Filter2 join(SelectRelevantCols1@MarkerID == SelectRelevantCols2@MarkerID\n\t&& toInteger(left(MainRef, instr(MainRef, '/')-1)) == toInteger(FormLinkKey),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessment\nWfassessmenttyp select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols3\nJoinWfassessment, SelectRelevantCols3 join(SelectRelevantCols2@TemplateID == SelectRelevantCols3@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 aggregate(groupBy(ReferralStart,\n\t\tPersonID,\n\t\tUniqueRecord,\n\t\tFormNo,\n\t\tStartDate),\n\tCountAll = count(1)) ~> Groupby\nGroupby, SelectRelevantCols4 join(Groupby@PersonID == SelectRelevantCols4@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols4\nJoinIsperson, TblPupil join(trim(UPN) == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nJoinPup, Select2 join(UniqueRecord == toInteger(EventSourceKey)\n\t&& toDate(ReferralStart) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, Select4 join(Select2@EventTypeId == Select4@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nTblEvTyp filter(equals(EventTypeGroup, 'PUPIL_ASSESSMENT')) ~> Filter3\nJoinEvTyp, Select3 join(FormNo == toInteger(Select3@EventSourceKey)\n\t&& toDate(StartDate) == toDate(Select3@EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv2\nJoinEv2, Select5 join(Select3@EventTypeId == EventTypeId_ASSESSMENT,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp2\nTblEvTyp filter(equals(EventTypeGroup, 'PUPIL_REFERRAL')) ~> Filter4\nAddCol, TblRelshpTyp join(REFERRAL_ASSESSMENT == EventRelationshipTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinRelshpTyp\nAggregate1 select(mapColumn(\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelCols\nJoinRelshpTyp derive(EventRelationshipRowInsertedDate = currentTimestamp(),\n\t\tEventRelationshipDeleted = toTimestamp('31-12-9999','dd-MM-yyyy')) ~> AddCols\nSelectRelCols alterRow(upsertIf(true())) ~> AlterRow1\nJoinEvTyp2 derive(REFERRAL_ASSESSMENT = 'REFERRAL_ASSESTMENT') ~> AddCol\nTblEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nTblEv select(mapColumn(\n\t\tEventRELATEDId = EventId,\n\t\tEventTypeId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nAddCols aggregate(groupBy(EventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tSelect2@EventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId),\n\tCountAll = count(1)) ~> Aggregate1\nFilter4 select(mapColumn(\n\t\tEventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nFilter3 select(mapColumn(\n\t\tEventTypeId_ASSESSMENT = EventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTransactionStartDate as timestamp,\n\t\tEventRelationshipTransactionEndDate as timestamp,\n\t\tEventId as long,\n\t\tEventRELATEDId as long,\n\t\tEventRelationshipValidStartDate as timestamp,\n\t\tEventRelationshipValidEndDate as timestamp,\n\t\tEventRelationshipRowInsertedDate as timestamp,\n\t\tEventRelationshipDeleted as timestamp,\n\t\tEventRelationshipTypeId as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventRelationshipTransactionStartDate','EventRELATEDId','EventId','EventRelationshipValidStartDate','EventRelationshipTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTransactionStartDate = EventTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate = EventTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate = EventValidStartDate,\n\t\tEventRelationshipValidEndDate = EventValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t)) ~> TblEvRelshp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationship')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationship4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/4_CPP/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsPerson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsPreg"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsCprchist"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventCategoryType",
								"type": "DatasetReference"
							},
							"name": "sourceEvCatTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationship",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectIcsRefer"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "SelectIcsPreg"
						},
						{
							"name": "JoinIcsPreg"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "SelectCprchist"
						},
						{
							"name": "JoinIcsCprchist"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectCatTyp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "FilterIcsPreg"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "SelectReferralEv"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "SelectEvTypReferral"
						},
						{
							"name": "JoinReferralEv"
						},
						{
							"name": "JoinReferralEvTyp"
						},
						{
							"name": "JoinRelshpTyp"
						},
						{
							"name": "SelectRelshpTyp"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsPerson\nsource(output(\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tRegComments as string,\n\t\tDeRegReason as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tInitialMeetingID as integer,\n\t\tFinalMeetingID as integer,\n\t\tOLACSSR as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscpreg') ~> sourceIcsPreg\nsource(output(\n\t\tCPRegCatID as integer,\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tMeetingID as integer,\n\t\tStartDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tRegComments as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tEndDate as timestamp,\n\t\tSyncDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscprchist') ~> sourceIcsCprchist\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tEventCategoryTypeId as long,\n\t\tEventCategoryTypeDescription as string,\n\t\tEventCategoryTypeGroup as string,\n\t\tEventCategoryTypeTransactionStartDate as timestamp,\n\t\tEventCategoryTypeTransactionEndDate as timestamp,\n\t\tEventCategoryTypeDeleted as timestamp,\n\t\tEventCategoryTypeSourceId as integer,\n\t\tEventCategoryTypeRowInsertedDate as timestamp,\n\t\tEventCategoryTypeSubGroup as string,\n\t\tEventCategoryTypeInternalCode as string,\n\t\tEventCategoryTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvCatTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEv\nsource(output(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> source1\nsourceIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tReasonCode,\n\t\tCategoryType,\n\t\tICSReferralID,\n\t\tAuditDate,\n\t\tStartDate_R = StartDate,\n\t\tEndDate_R = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsRefer\nSelectIcsRefer, SelectIsPerson join(SelectIcsRefer@PersonID == SelectIsPerson@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceIsPerson select(mapColumn(\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nsourceIcsPreg select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tStartDate_CP = StartDate,\n\t\tEndDate_CP = EndDate,\n\t\tOLACSSR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsPreg\nJoinIsPerson, FilterIcsPreg join(SelectIcsRefer@PersonID == SelectIcsPreg@PersonID\n\t&& toDate(StartDate_R) <= toDate(StartDate_CP)\n\t&& toDate(    coalesce(EndDate_R, toTimestamp('31-12-9999','dd-MM-yyyy'))) >= toDate(StartDate_CP),\n\tjoinType:'inner',\n\tbroadcast: 'left')~> JoinIcsPreg\nJoinIcsPreg aggregate(groupBy(SelectIcsRefer@PersonID,\n\t\tEndDate_CP,\n\t\tStartDate_CP,\n\t\tCPRegID,\n\t\tICSReferralID,\n\t\tReasonCode,\n\t\tCategoryType,\n\t\tStartDate_R,\n\t\tEndDate_R),\n\tAuditDate = max(AuditDate)) ~> Aggregate1\nsourceIcsCprchist select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tRegNeglect,\n\t\tRegPhysical,\n\t\tRegSexual,\n\t\tRegEmotional\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCprchist\nAggregate1, SelectCprchist join(Aggregate1@CPRegID == SelectCprchist@CPRegID\n\t&& Aggregate1@PersonID == SelectCprchist@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsCprchist\nDerivedColumn1, SelectEvTyp join(CHILD_PROTECTION_PLAN == EventTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceEvTyp filter(equals(EventTypeGroup, 'CHILD_PROTECTION_PLAN')) ~> Filter1\nFilter1 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nsourceEvCatTyp filter(and(\r\n    equals(EventCategoryTypeGroup, 'CHILD_PROTECTION_PLAN'),\r\n    equals(EventCategoryTypeSubGroup, 'CHILD_PROTECTION_PLAN_CATEGORY')\r\n)) ~> Filter2\nFilter2 select(mapColumn(\n\t\tEventCategoryTypeId,\n\t\tEV_CAT_TYP_DESC = EventCategoryTypeDescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCatTyp\nJoinIcsCprchist derive(EVENT = iif(equals(RegNeglect, 'Y'), 'Neglect', \r\n    iif(equals(RegPhysical, 'Y'), 'Physical Abuse',\r\n        iif(equals(RegSexual, 'Y'), 'Sexual Abuse',\r\n            iif(equals(RegEmotional, 'Y'), 'Emotional Abuse', '0'\r\n            )\r\n        )\r\n    )\r\n),\n\t\tCHILD_PROTECTION_PLAN = 'CHILD_PROTECTION_PLAN') ~> DerivedColumn1\nSelectIcsPreg filter(isNull(OLACSSR)) ~> FilterIcsPreg\nJoinEvTyp, SelectEv join(toString(Aggregate1@CPRegID) == EventSourceKey\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate)\n\t&& toDate(StartDate_CP) == toDate(EventValidStartDate)\n\t&& toDate(EndDate_CP) == toDate(EventValidEndDate)\n\t&& SelectEvTyp@EventTypeId == SelectEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nsourceEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nsourceEv select(mapColumn(\n\t\tEventRELATEDId = EventId,\n\t\tEV_RELATED_TYP_ID = EventTypeId,\n\t\tEventValidStartDate,\n\t\tEventSourceKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReferralEv\nsourceEvTyp filter(equals(EventTypeGroup, 'PUPIL_REFERRAL')) ~> Filter3\nFilter3 select(mapColumn(\n\t\tEventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTypReferral\nJoinEv, SelectReferralEv join(toString(ICSReferralID) == SelectReferralEv@EventSourceKey\n\t&& toDate(StartDate_R) == toDate(SelectReferralEv@EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinReferralEv\nJoinReferralEv, SelectEvTypReferral join(EV_RELATED_TYP_ID == SelectEvTypReferral@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinReferralEvTyp\nDerivedColumn2, SelectRelshpTyp join(CHILD_PROTECTION_REFERRAL == EventRelationshipTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinRelshpTyp\nsource1 select(mapColumn(\n\t\tEventRelationshipTypeId,\n\t\tEventRelationshipTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelshpTyp\nJoinReferralEvTyp derive(CHILD_PROTECTION_REFERRAL = 'CHILD_PROTECTION_REFERRAL') ~> DerivedColumn2\nJoinRelshpTyp derive(EventRelationshipDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRelationshipRowInsertedDate = currentTimestamp()) ~> DerivedColumn3\nDerivedColumn3 select(mapColumn(\n\t\tEventRelationshipTransactionStartDate = EventTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate = EventTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate = SelectEv@EventValidStartDate,\n\t\tEventRelationshipValidEndDate = EventValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(EventRelationshipTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate,\n\t\tEventRelationshipValidEndDate,\n\t\tEventRelationshipTypeId),\n\tEventRelationshipRowInsertedDate = max(EventRelationshipRowInsertedDate),\n\t\tEventRelationshipDeleted = max(EventRelationshipDeleted)) ~> Aggregate2\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTransactionStartDate as timestamp,\n\t\tEventRelationshipTransactionEndDate as timestamp,\n\t\tEventId as long,\n\t\tEventRELATEDId as long,\n\t\tEventRelationshipValidStartDate as timestamp,\n\t\tEventRelationshipValidEndDate as timestamp,\n\t\tEventRelationshipRowInsertedDate as timestamp,\n\t\tEventRelationshipDeleted as timestamp,\n\t\tEventRelationshipTypeId as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventRELATEDId','EventRelationshipValidStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate,\n\t\tEventRelationshipValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventCategoryType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationship')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationship5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/5_CINP/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCpCarePlan"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceISPerson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "sourceRelshpTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationship",
								"type": "DatasetReference"
							},
							"name": "sinkEvRelshp"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "FilterCIN"
						},
						{
							"name": "FilterR"
						},
						{
							"name": "JoinR"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "JoinEvTypCIN"
						},
						{
							"name": "JoinEvCIN"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "SelectEvRelated"
						},
						{
							"name": "SelectEvTypRelated"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinEvRalated"
						},
						{
							"name": "JoinEvRelatedTyp"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "JoinRelshptyp"
						},
						{
							"name": "SelectRelshp"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tPlanNo as integer,\n\t\tParPlanNo as integer,\n\t\tPlanLink as string,\n\t\tPlanLinkKey as string,\n\t\tServiceArea as string,\n\t\tPlanType as string,\n\t\tMarkerID as integer,\n\t\tReferralID as integer,\n\t\tMarkerKey as string,\n\t\tStatus as string,\n\t\tGlobalPlanID as integer,\n\t\tGlobalRevision as integer,\n\t\tRevision as integer,\n\t\tSubRev as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tCPComments as string,\n\t\tCreatedBy as string,\n\t\tCreationDate as timestamp,\n\t\tEmergencyPlan as string,\n\t\tEContact1 as string,\n\t\tEContact1No as string,\n\t\tEContact2 as string,\n\t\tEContact2No as string,\n\t\tConsentGiven as string,\n\t\tPlanAgreed as string,\n\t\tSUserComments as string,\n\t\tPlanCoord as string,\n\t\tConsent as string,\n\t\tOfferedBy as string,\n\t\tOfferedDate as timestamp,\n\t\tOfferedNotes as string,\n\t\tRevisionDate as timestamp,\n\t\tUpdateDate as timestamp,\n\t\tCompletedBy as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tFrozenDate as timestamp,\n\t\tFreezeNotes as string,\n\t\tFrozenBy as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tPartOneID as integer,\n\t\tPartTwoID as integer,\n\t\tReviewID as integer,\n\t\tPartTwoPlanNo as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAuthBy as string,\n\t\tAuthCode as string,\n\t\tReasonCeased as string,\n\t\tAuthDate as timestamp,\n\t\tAuthComm as string,\n\t\tOrderByOnDisplay as string,\n\t\tProvTaskNo as integer,\n\t\tEDMIntegID as string,\n\t\tReviewSummary as string,\n\t\tReviewNotes as string,\n\t\tAppVersion as integer,\n\t\tCreatedStaffHistoryID as integer,\n\t\tPlanCoordStaffHistoryID as integer,\n\t\tAuthStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/cpcareplan') ~> sourceCpCarePlan\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceISPerson\nsource(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEv\nsource(output(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceRelshpTyp\nsourceCpCarePlan select(mapColumn(\n\t\tAuditDate,\n\t\tPlanType,\n\t\tReferralID,\n\t\tUniqueRecord = PlanNo,\n\t\tPersonID = PlanLinkKey,\n\t\tCIN_Status = Status,\n\t\tCIN_Start_Date = StartDate,\n\t\tCIN_End_Date = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tCIN_Status = iif(equals(CIN_Status, 'NULL'), toString(null()), CIN_Status),\n\t\tCIN_Start_Date = coalesce(CIN_Start_Date, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tCIN_End_Date = coalesce(CIN_End_Date, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nsourceIcsRefer select(mapColumn(\n\t\tICSReferralID,\n\t\tEndDate,\n\t\tR_StartDate = StartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn1 filter(and(\r\n    equals(PlanType, 'FP'),\r\n    and(notEquals(CIN_Status, 'Z'),\r\n        and(not(isNull(CIN_Start_Date)),\r\n            not(isNull(CIN_End_Date))\r\n            )\r\n        )\r\n)) ~> FilterCIN\nSelect2 filter(isNull(EndDate)) ~> FilterR\nFilterCIN, FilterR join(ReferralID == ICSReferralID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinR\nsourceISPerson select(mapColumn(\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nJoinR, SelectIsPerson join(Select1@PersonID == toString(SelectIsPerson@PersonID),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nJoinIsPerson aggregate(groupBy(UniqueRecord,\n\t\tSelect1@PersonID,\n\t\tCIN_Status,\n\t\tCIN_Start_Date,\n\t\tICSReferralID,\n\t\tR_StartDate,\n\t\tCIN_End_Date),\n\tAuditDate = max(AuditDate)) ~> Aggregate1\nAggregate1 derive(CHILDREN_IN_NEED = 'CHILDREN_IN_NEED') ~> DerivedColumn2\nDerivedColumn2, SelectEvTyp join(CHILDREN_IN_NEED == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTypCIN\nJoinEvTypCIN, SelectEv join(toString(UniqueRecord) == EventSourceKey\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate)\n\t&& toDate(CIN_Start_Date) == toDate(EventValidStartDate)\n\t&& toDate(CIN_End_Date) == toDate(EventValidEndDate)\n\t&& SelectEvTyp@EventTypeId == SelectEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvCIN\nsourceEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nsourceEv select(mapColumn(\n\t\tEventRELATEDId = EventId,\n\t\tEV_RELATED_TYP_ID = EventTypeId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvRelated\nFilter1 select(mapColumn(\n\t\tEV_RELATED_TYP_ID = EventTypeId,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTypRelated\nsourceEvTyp filter(equals(EventTypeGroup, 'PUPIL_REFERRAL')) ~> Filter1\nJoinEvCIN, SelectEvRelated join(toString(ICSReferralID) == SelectEvRelated@EventSourceKey\n\t&& toDate(R_StartDate) == toDate(SelectEvRelated@EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvRalated\nJoinEvRalated, SelectEvTypRelated join(SelectEvRelated@EV_RELATED_TYP_ID == SelectEvTypRelated@EV_RELATED_TYP_ID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvRelatedTyp\nJoinEvRelatedTyp derive(CHILDREN_IN_NEED_REFERRAL = 'CHILDREN_IN_NEED_REFERRAL') ~> DerivedColumn3\nDerivedColumn3, SelectRelshp join(CHILDREN_IN_NEED_REFERRAL == EventRelationshipTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinRelshptyp\nsourceRelshpTyp select(mapColumn(\n\t\tEventRelationshipTypeId,\n\t\tEventRelationshipTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelshp\nJoinRelshptyp derive(EventRelationshipRowInsertedDate = currentTimestamp(),\n\t\tEventRelationshipDeleted = toTimestamp('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn4\nDerivedColumn4 select(mapColumn(\n\t\tEventRelationshipTransactionStartDate = EventTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate = EventTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate = SelectEv@EventValidStartDate,\n\t\tEventRelationshipValidEndDate = EventValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 aggregate(groupBy(EventRelationshipTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate,\n\t\tEventRelationshipValidEndDate,\n\t\tEventRelationshipTypeId),\n\tEventRelationshipDeleted = max(EventRelationshipDeleted),\n\t\tEventRelationshipRowInsertedDate = max(EventRelationshipRowInsertedDate)) ~> Aggregate2\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTransactionStartDate as timestamp,\n\t\tEventRelationshipTransactionEndDate as timestamp,\n\t\tEventId as long,\n\t\tEventRELATEDId as long,\n\t\tEventRelationshipValidStartDate as timestamp,\n\t\tEventRelationshipValidEndDate as timestamp,\n\t\tEventRelationshipRowInsertedDate as timestamp,\n\t\tEventRelationshipDeleted as timestamp,\n\t\tEventRelationshipTypeId as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventRELATEDId','EventRelationshipValidStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate,\n\t\tEventRelationshipValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t)) ~> sinkEvRelshp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationship')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationship6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsplacement"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "icsperiodcare"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icslegalorders"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceEv"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfaAssessmentType"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfaSession"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfaAnswer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfPicklistitem"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "sourceRelshpTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationship",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectIcsPlacement"
						},
						{
							"name": "Select2"
						},
						{
							"name": "JoinIcsperiodcare"
						},
						{
							"name": "FilterIcsPeriod"
						},
						{
							"name": "JoinIcelegalorders"
						},
						{
							"name": "Select3"
						},
						{
							"name": "FilterLegalOrd"
						},
						{
							"name": "Select4"
						},
						{
							"name": "FilterWfPick"
						},
						{
							"name": "Joinwfpicklistitem"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "EndDate"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "SelectWfAss"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "SelectWfAssTyp"
						},
						{
							"name": "SelectWfaSesh"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "Select5WfaAnswer"
						},
						{
							"name": "Filter9"
						},
						{
							"name": "Select6PickListItem"
						},
						{
							"name": "JoinASM"
						},
						{
							"name": "JoinASMTyp"
						},
						{
							"name": "JoinwfaSession"
						},
						{
							"name": "JoinAnsw"
						},
						{
							"name": "JoinWfPicklistitem2"
						},
						{
							"name": "SelectAssEv"
						},
						{
							"name": "Filter10"
						},
						{
							"name": "SelectAssEvTyp"
						},
						{
							"name": "JoinAssEvTyp"
						},
						{
							"name": "JoinAssEv"
						},
						{
							"name": "SelectReslhpTyp"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "JoinRelshpTyp"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tPlacementID as integer,\n\t\tPersonID as integer,\n\t\tPlacementCode as string,\n\t\tPostCode as string,\n\t\tReason as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAddrID as string,\n\t\tAddr as string,\n\t\tTelephone as string,\n\t\tPlacementLength as integer,\n\t\tMainCarerID as integer,\n\t\tHideInfo as string,\n\t\tHideName as string,\n\t\tHideAddress as string,\n\t\tHideRelChild as string,\n\t\tOutHoursName as string,\n\t\tOutHoursPhone as string,\n\t\tEndDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tPlacementType as string,\n\t\tOtherType as string,\n\t\tVersion as integer,\n\t\tFromBla as string,\n\t\tEndPrevious as string,\n\t\tAddrHistoID as integer,\n\t\tPeriodID as integer,\n\t\tPDistance as string,\n\t\tRelationID as integer,\n\t\tRelationID2 as integer,\n\t\tRelationID3 as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tFosterID as integer,\n\t\tLiveDate as timestamp,\n\t\tDeptID as string,\n\t\tPlacementProvider as string,\n\t\tPlacementLocation as string,\n\t\tPlacementChangeReason as string,\n\t\tEmergencyCarerName as string,\n\t\tEmergencyAddress as string,\n\t\tEndReason as string,\n\t\tAdoptionMarkerID as integer,\n\t\tPre_LPG_AddressKey as string,\n\t\tOfstedPlacementType as string,\n\t\tDecisionAchieved as string,\n\t\tDecisionAchievedComments as string,\n\t\tFFAIsPlanDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsplacement') ~> Icsplacement\nsource(output(\n\t\tPeriodID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tEndReason as string,\n\t\tCinCode as string,\n\t\tReasonCode as string,\n\t\tSyncFlag as string,\n\t\tACDetails as string,\n\t\tACDuration as string,\n\t\tNotes as string,\n\t\tACAccommodation as string,\n\t\tACAccommOther as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tLiveDate as timestamp,\n\t\tAdoptNumber as string,\n\t\tAdoptGender as string,\n\t\tAdoptLegalStatus as string,\n\t\tAdoptFromFoster as string,\n\t\tDateCancelled as timestamp,\n\t\tAdoptBestInterests as timestamp,\n\t\tAdoptAgree as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsperiodcare') ~> icsperiodcare\nsource(output(\n\t\tOrderID as integer,\n\t\tStartDate as timestamp,\n\t\tCourt as string,\n\t\tPersonID as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLegalStatus as string,\n\t\tExpDate as timestamp,\n\t\tComments as string,\n\t\tEndDate as timestamp,\n\t\tPeriodID as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tLiveDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icslegalorders') ~> Icslegalorders\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEv\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfaAssessmentType\nsource(output(\n\t\tSessionNo as integer,\n\t\tProcessNo as integer,\n\t\tFormNo as integer,\n\t\tSessionDate as timestamp,\n\t\tTimeframe as timestamp,\n\t\tSessionCreator as string,\n\t\tStatus as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentSessionNo as integer,\n\t\tReassignedBy as string,\n\t\tRole as string,\n\t\tMarkerID as integer,\n\t\tModDate as timestamp,\n\t\tRetractReason as string,\n\t\tRejectReason as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfasession') ~> sourceWfaSession\nsource(output(\n\t\tAnswerNo as integer,\n\t\tFormSessionNo as integer,\n\t\tQuestionID as string,\n\t\tAnswerCode as string,\n\t\tSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfaanswer') ~> sourceWfaAnswer\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> sourceWfPicklistitem\nsource(output(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceRelshpTyp\nIcsplacement select(mapColumn(\n\t\tPlacementID,\n\t\tPlacementCode,\n\t\tAuditDate,\n\t\tStartDate_PLC = StartDate,\n\t\tEndDate_PLC = EndDate,\n\t\tPeriodID,\n\t\tLiveDate,\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsPlacement\nicsperiodcare select(mapColumn(\n\t\tStartDate_CLA = StartDate,\n\t\tEndDate_CLA = EndDate,\n\t\tAuditDate,\n\t\tCinCode,\n\t\tLiveDate,\n\t\tPeriodID,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelectIcsPlacement, FilterIcsPeriod join(SelectIcsPlacement@PeriodID == Select2@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsperiodcare\nEndDate filter(equals(isNull(LiveDate), false())) ~> FilterIcsPeriod\nJoinIcsperiodcare, FilterLegalOrd join(Select2@PeriodID == Select3@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcelegalorders\nIcslegalorders select(mapColumn(\n\t\tLegalStatus,\n\t\tStartDate_LGL = StartDate,\n\t\tEndDate_LGL = EndDate,\n\t\tPeriodID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 filter(notEquals(LegalStatus, 'RESP75+')) ~> FilterLegalOrd\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 filter(equals(pickid, 'ICSLegalStatus')) ~> FilterWfPick\nJoinIcelegalorders, FilterWfPick join(LegalStatus == code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfpicklistitem\nDerivedColumn3 aggregate(groupBy(PlacementID,\n\t\tSelectIcsPlacement@PeriodID,\n\t\tPersonID,\n\t\tStartDate_PLC,\n\t\tEndDate_PLC,\n\t\tStartDate_CLA,\n\t\tEndDate_CLA,\n\t\tCinCode,\n\t\tStartDate_LGL,\n\t\tEndDate_LGL,\n\t\tLegalStatus,\n\t\tcode,\n\t\tSelectIcsPlacement@LiveDate,\n\t\tPlacementCode,\n\t\tSelectIcsPlacement@AuditDate),\n\tcountAll = count(1)) ~> GroupBy\nSelect2 derive(EndDate = iif(\r\n    equals(toString(EndDate_CLA), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), EndDate_CLA)) ~> EndDate\nGroupBy filter(and(\r\n    not(isNull(LiveDate)),\r\n    not(like(PlacementCode, 'T%'))\r\n)) ~> Filter4\nFilter4, SelectEv join(PlacementID == toInteger(EventSourceKey)\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'both')~> JoinEv\nsourceEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventReasonTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventCategoryTypeId,\n\t\tEventSourceId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventAcademicYear,\n\t\tEventDeleted,\n\t\tEventRowInsertedDate,\n\t\tEventValidCreationDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nFilter5 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeDescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nJoinwfpicklistitem derive(StartDate_PLC = coalesce(StartDate_PLC, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEndDate_PLC = coalesce(EndDate_PLC, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tStartDate_CLA = coalesce(StartDate_CLA, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEndDate_CLA = coalesce(EndDate_CLA, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tStartDate_LGL = coalesce(StartDate_LGL, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEndDate_LGL = coalesce(EndDate_LGL, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn3\nEvTyp filter(equals(EventTypeDescription, 'CHILDREN_IN_CARE')) ~> Filter5\nJoinEv, SelectEvTyp join(SelectEv@EventTypeId == SelectEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceWfAssessment filter(equals(Status, 'C')) ~> Filter6\nFilter6 select(mapColumn(\n\t\tFormType,\n\t\tFormLinkKey,\n\t\tStartDate,\n\t\tTemplateID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWfAss\nsourceWfaAssessmentType filter(equals(FormType, 'ICS/P1_LACPlan')) ~> Filter7\nFilter7 select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWfAssTyp\nsourceWfaSession select(mapColumn(\n\t\tFormNo,\n\t\tSessionNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWfaSesh\nsourceWfaAnswer filter(equals(QuestionID, 'MainCLAPlan')) ~> Filter8\nFilter8 select(mapColumn(\n\t\tFormSessionNo,\n\t\tAnswerCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5WfaAnswer\nsourceWfPicklistitem filter(equals(pickid, 'CHOPLAN')) ~> Filter9\nFilter9 select(mapColumn(\n\t\tcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6PickListItem\nJoinEvTyp, SelectWfAss join(PersonID == toInteger(FormLinkKey)\n\t&& toDate(StartDate_CLA) <= toDate(StartDate),\n\tjoinType:'inner',\n\tbroadcast: 'both')~> JoinASM\nJoinASM, SelectWfAssTyp join(SelectWfAss@TemplateID == SelectWfAssTyp@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinASMTyp\nJoinASMTyp, SelectWfaSesh join(SelectWfAss@FormNo == SelectWfaSesh@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinwfaSession\nJoinwfaSession, Select5WfaAnswer join(SessionNo == FormSessionNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAnsw\nJoinAnsw, Select6PickListItem join(AnswerCode == Select6PickListItem@code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfPicklistitem2\nsourceEv select(mapColumn(\n\t\tEventRELATEDId = EventId,\n\t\tEV_RELATED_TYP_ID = EventTypeId,\n\t\tEventSourceKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssEv\nEvTyp filter(equals(EventTypeGroup, 'PUPIL_ASSESSMENT')) ~> Filter10\nFilter10 select(mapColumn(\n\t\tEV_RELATED_TYP_ID = EventTypeId,\n\t\tEventTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssEvTyp\nJoinWfPicklistitem2, SelectAssEvTyp join(toString(SelectWfAss@TemplateID) == EventTypeInternalCode,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAssEvTyp\nJoinAssEvTyp, SelectAssEv join(toString(SelectWfAss@FormNo) == SelectAssEv@EventSourceKey\n\t&& SelectAssEvTyp@EV_RELATED_TYP_ID == SelectAssEv@EV_RELATED_TYP_ID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAssEv\nsourceRelshpTyp select(mapColumn(\n\t\tEventRelationshipTypeId,\n\t\tEventRelationshipTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReslhpTyp\nJoinAssEv derive(CHILDREN_IN_CARE_ASSESTMENT = 'CHILDREN_IN_CARE_ASSESTMENT') ~> DerivedColumn4\nDerivedColumn4, SelectReslhpTyp join(CHILDREN_IN_CARE_ASSESTMENT == EventRelationshipTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinRelshpTyp\nJoinRelshpTyp derive(EventRelationshipRowInsertedDate = currentTimestamp(),\n\t\tEventRelationshipDeleted = toTimestamp('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn5\nDerivedColumn5 select(mapColumn(\n\t\tEventRelationshipTransactionStartDate = EventTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate = EventTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate = EventValidStartDate,\n\t\tEventRelationshipValidEndDate = EventValidEndDate,\n\t\tEventRelationshipRowInsertedDate,\n\t\tEventRelationshipDeleted,\n\t\tEventRelationshipTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5 aggregate(groupBy(EventRelationshipTransactionStartDate,\n\t\tEventRelationshipTransactionEndDate,\n\t\tEventId,\n\t\tEventRELATEDId,\n\t\tEventRelationshipValidStartDate,\n\t\tEventRelationshipValidEndDate,\n\t\tEventRelationshipTypeId),\n\tEventRelationshipRowInsertedDate = max(EventRelationshipRowInsertedDate),\n\t\tEventRelationshipDeleted = max(EventRelationshipDeleted)) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTransactionStartDate as timestamp,\n\t\tEventRelationshipTransactionEndDate as timestamp,\n\t\tEventId as long,\n\t\tEventRELATEDId as long,\n\t\tEventRelationshipValidStartDate as timestamp,\n\t\tEventRelationshipValidEndDate as timestamp,\n\t\tEventRelationshipRowInsertedDate as timestamp,\n\t\tEventRelationshipDeleted as timestamp,\n\t\tEventRelationshipTypeId as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventRELATEDId','EventRelationshipValidStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationship')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationshipType2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceInternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "sinkRelShpTyp"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> sourceInternalReferenceData\nFilter1 derive(EventRelationshipTypeTransactionStartDate = currentTimestamp(),\n\t\tEventRelationshipTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventRelationshipTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventRelationshipTypeSourceCode = '0',\n\t\tEventRelationshipTypeRowInsertedDate = currentTimestamp()) ~> DerivedColumn1\nSelect1 alterRow(upsertIf(true())) ~> AlterRow1\nsourceInternalReferenceData filter(equals(GROUP, 'CONTACT_ASSESTMENT')) ~> Filter1\nDerivedColumn1 select(mapColumn(\n\t\tENRICH_SOURCE,\n\t\tDOMAIN,\n\t\tEventRelationshipTypeDescription = DESCRIPTION,\n\t\tEventRelationshipTypeGroup = GROUP,\n\t\tEventRelationshipTypeSubGroup = SUB_GROUP,\n\t\tEventRelationshipTypeInternalCode = INTERNAL_CODE,\n\t\tEventRelationshipTypeExternalCode = EXTERNAL_CODE,\n\t\tEventRelationshipTypeTransactionStartDate,\n\t\tEventRelationshipTypeTransactionEndDate,\n\t\tEventRelationshipTypeDeleted,\n\t\tEventRelationshipTypeSourceCode,\n\t\tEventRelationshipTypeRowInsertedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventRelationshipTypeGroup','EventRelationshipTypeDescription','EventRelationshipTypeExternalCode','EventRelationshipTypeInternalCode','EventRelationshipTypeSubGroup'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTypeGroup,\n\t\tEventRelationshipTypeDescription,\n\t\tEventRelationshipTypeExternalCode,\n\t\tEventRelationshipTypeDeleted,\n\t\tEventRelationshipTypeInternalCode,\n\t\tEventRelationshipTypeTransactionStartDate,\n\t\tEventRelationshipTypeTransactionEndDate,\n\t\tEventRelationshipTypeSourceCode,\n\t\tEventRelationshipTypeRowInsertedDate,\n\t\tEventRelationshipTypeSubGroup\n\t)) ~> sinkRelShpTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationshipType3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceInternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "sinkRelShpTyp"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> sourceInternalReferenceData\nFilter1 derive(EventRelationshipTypeTransactionStartDate = currentTimestamp(),\n\t\tEventRelationshipTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventRelationshipTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventRelationshipTypeSourceCode = '0',\n\t\tEventRelationshipTypeRowInsertedDate = currentTimestamp()) ~> DerivedColumn1\nSelect1 alterRow(upsertIf(true())) ~> AlterRow1\nsourceInternalReferenceData filter(equals(GROUP, 'REFERRAL_ASSESTMENT')) ~> Filter1\nDerivedColumn1 select(mapColumn(\n\t\tENRICH_SOURCE,\n\t\tDOMAIN,\n\t\tEventRelationshipTypeDescription = DESCRIPTION,\n\t\tEventRelationshipTypeGroup = GROUP,\n\t\tEventRelationshipTypeSubGroup = SUB_GROUP,\n\t\tEventRelationshipTypeInternalCode = INTERNAL_CODE,\n\t\tEventRelationshipTypeExternalCode = EXTERNAL_CODE,\n\t\tEventRelationshipTypeTransactionStartDate,\n\t\tEventRelationshipTypeTransactionEndDate,\n\t\tEventRelationshipTypeDeleted,\n\t\tEventRelationshipTypeSourceCode,\n\t\tEventRelationshipTypeRowInsertedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventRelationshipTypeGroup','EventRelationshipTypeDescription','EventRelationshipTypeExternalCode','EventRelationshipTypeInternalCode','EventRelationshipTypeSubGroup'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTypeGroup,\n\t\tEventRelationshipTypeDescription,\n\t\tEventRelationshipTypeExternalCode,\n\t\tEventRelationshipTypeDeleted,\n\t\tEventRelationshipTypeInternalCode,\n\t\tEventRelationshipTypeTransactionStartDate,\n\t\tEventRelationshipTypeTransactionEndDate,\n\t\tEventRelationshipTypeSourceCode,\n\t\tEventRelationshipTypeRowInsertedDate,\n\t\tEventRelationshipTypeSubGroup\n\t)) ~> sinkRelShpTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationshipType4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/4_CPP/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> source1\nsource1 filter(equals(GROUP, 'CHILD_PROTECTION_REFERRAL')) ~> Filter1\nSelect2 derive(EventRelationshipTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRelationshipTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventRelationshipTypeTransactionStartDate = currentTimestamp(),\n\t\tEventRelationshipTypeRowInsertedDate = currentTimestamp(),\n\t\tEventRelationshipTypeSourceCode = 0) ~> DerivedColumn1\nFilter1 select(mapColumn(\n\t\tEventRelationshipTypeDescription = DESCRIPTION,\n\t\tEventRelationshipTypeGroup = GROUP,\n\t\tEventRelationshipTypeSubGroup = SUB_GROUP,\n\t\tEventRelationshipTypeInternalCode = INTERNAL_CODE,\n\t\tEventRelationshipTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventRelationshipTypeDescription','EventRelationshipTypeSubGroup','EventRelationshipTypeInternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTypeGroup,\n\t\tEventRelationshipTypeDescription,\n\t\tEventRelationshipTypeExternalCode,\n\t\tEventRelationshipTypeDeleted,\n\t\tEventRelationshipTypeInternalCode,\n\t\tEventRelationshipTypeTransactionStartDate,\n\t\tEventRelationshipTypeTransactionEndDate,\n\t\tEventRelationshipTypeSourceCode,\n\t\tEventRelationshipTypeRowInsertedDate,\n\t\tEventRelationshipTypeSubGroup\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationshipType5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/5_CINP/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "EvRelshpTyp"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nInternalReferenceData select(mapColumn(\n\t\tTYP_DESC = DESCRIPTION,\n\t\tTYP_GRP = GROUP,\n\t\tTYP_SUB_GRP = SUB_GROUP,\n\t\tTYP_INT_CD = INTERNAL_CODE,\n\t\tTYP_EXT_CD = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAddCols filter(equals(TYP_GRP, 'CHILDREN_IN_NEED_REFERRAL')) ~> Filter1\nSelect1 derive(TYP_START_DATE = currentTimestamp(),\n\t\tTYP_END_DATE = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\t{TYP_SRC_ID } = 0,\n\t\tTYP_ROW_INST = currentTimestamp()) ~> AddCols\nFilter1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventRelationshipTypeDescription','EventRelationshipTypeGroup','EventRelationshipTypeExternalCode','EventRelationshipTypeInternalCode','EventRelationshipTypeSubGroup'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTypeGroup = TYP_GRP,\n\t\tEventRelationshipTypeDescription = TYP_DESC,\n\t\tEventRelationshipTypeExternalCode = TYP_EXT_CD,\n\t\tEventRelationshipTypeDeleted = TYP_DEL,\n\t\tEventRelationshipTypeInternalCode = TYP_INT_CD,\n\t\tEventRelationshipTypeTransactionStartDate = TYP_START_DATE,\n\t\tEventRelationshipTypeTransactionEndDate = TYP_END_DATE,\n\t\tEventRelationshipTypeSourceCode = {TYP_SRC_ID },\n\t\tEventRelationshipTypeRowInsertedDate = TYP_ROW_INST,\n\t\tEventRelationshipTypeSubGroup = TYP_SUB_GRP\n\t)) ~> EvRelshpTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventRelationshipType6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Relationship"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalRefData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventRelationshipType",
								"type": "DatasetReference"
							},
							"name": "EvRelshpTyp"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalRefData\nInternalRefData filter(equals(GROUP, 'CHILDREN_IN_CARE_ASSESTMENT')) ~> Filter1\nFilter1 derive(TYP_START_DATE = currentTimestamp(),\n\t\tTYP_END_DATE = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\t{TYP_SRC_ID } = 0,\n\t\tTYP_ROW_INST = currentTimestamp()) ~> AddCols\nAddCols alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventRelationshipTypeId as long,\n\t\tEventRelationshipTypeGroup as string,\n\t\tEventRelationshipTypeDescription as string,\n\t\tEventRelationshipTypeExternalCode as string,\n\t\tEventRelationshipTypeDeleted as timestamp,\n\t\tEventRelationshipTypeInternalCode as string,\n\t\tEventRelationshipTypeTransactionStartDate as timestamp,\n\t\tEventRelationshipTypeTransactionEndDate as timestamp,\n\t\tEventRelationshipTypeSourceCode as string,\n\t\tEventRelationshipTypeRowInsertedDate as timestamp,\n\t\tEventRelationshipTypeSubGroup as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventRelationshipTypeDescription','EventRelationshipTypeGroup','EventRelationshipTypeRowInsertedDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventRelationshipTypeGroup = GROUP,\n\t\tEventRelationshipTypeDescription = DESCRIPTION,\n\t\tEventRelationshipTypeExternalCode = EXTERNAL_CODE,\n\t\tEventRelationshipTypeDeleted = TYP_DEL,\n\t\tEventRelationshipTypeInternalCode = INTERNAL_CODE,\n\t\tEventRelationshipTypeTransactionStartDate = TYP_START_DATE,\n\t\tEventRelationshipTypeTransactionEndDate = TYP_END_DATE,\n\t\tEventRelationshipTypeSourceCode = {TYP_SRC_ID },\n\t\tEventRelationshipTypeRowInsertedDate = TYP_ROW_INST,\n\t\tEventRelationshipTypeSubGroup = SUB_GROUP\n\t)) ~> EvRelshpTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventRelationshipType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventStatusType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "EvStsTyp"
						}
					],
					"transformations": [
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "FilterOnGRPandDESCRIPTION"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "GroupByDistinctRows"
						},
						{
							"name": "FilterOnSubGroup"
						},
						{
							"name": "FilterRegBase"
						},
						{
							"name": "FilterReg2Base"
						},
						{
							"name": "UnionFilters"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nAddFixedCols alterRow(upsertIf(true())) ~> UpsertIfTrue\nGroupByDistinctRows select(mapColumn(\n\t\tEventStatusTypeDescription = DESCRIPTION,\n\t\tEventStatusTypeGroup = GROUP,\n\t\tEventStatusTypeSubGroup = SUB_GROUP,\n\t\tEventStatusTypeInternalCode = INTERNAL_CODE,\n\t\tEventStatusTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns\nRenameColumns filter(and(\r\nequals(EventStatusTypeGroup,\"PUPIL_EVENT\"),\r\nequals(EventStatusTypeDescription,\"SCHOOL_TRANSFER\")\r\n)) ~> FilterOnGRPandDESCRIPTION\nUnionFilters derive(EventStatusTypeSourceId = 1,\n\t\tEventStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tEventStatusTypeTransactionStartDate = currentTimestamp(),\n\t\tEventStatusTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeDeleted = toDate('31-12-9999','dd-MM-yyyy')) ~> AddFixedCols\nInternalReferenceData aggregate(groupBy(DESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tINTERNAL_CODE,\n\t\tEXTERNAL_CODE),\n\tCountall = count(1)) ~> GroupByDistinctRows\nFilterOnGRPandDESCRIPTION filter(equals(EventStatusTypeSubGroup,\"GUEST\")) ~> FilterOnSubGroup\nFilterOnGRPandDESCRIPTION filter(equals(EventStatusTypeSubGroup,\"REG_BASE\")) ~> FilterRegBase\nFilterOnGRPandDESCRIPTION filter(equals(EventStatusTypeSubGroup,\"REG2_BASE\")) ~> FilterReg2Base\nFilterOnSubGroup, FilterRegBase, FilterReg2Base union(byName: true)~> UnionFilters\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventStatusTypeGroup','EventStatusTypeSubGroup','EventStatusTypeInternalCode','EventStatusTypeExternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode\n\t)) ~> EvStsTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventStatusType1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcewfpicklistitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "TblEvStsTyp"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> sourcewfpicklistitem\nsourcewfpicklistitem filter(equals(pickid, 'STEPSUBSTATUS')) ~> Filter1\nFilter1 select(mapColumn(\n\t\tEventStatusTypeDescription = description,\n\t\tEventStatusTypeInternalCode = code,\n\t\tEventStatusTypeExternalCode = code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(EventStatusTypeTransactionStartDate = currentTimestamp(),\n\t\tEventStatusTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeGroup = 'PUPIL_ASSESSMENT',\n\t\tEventStatusTypeSourceId = 3,\n\t\tEventStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tEventStatusTypeSubGroup = 'ASSESSMENT_STATUS',\n\t\tEventStatusTypeExternalCode = EventStatusTypeInternalCode) ~> DerivedColumn1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(EventStatusTypeDescription,\n\t\tEventStatusTypeExternalCode,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup),\n\tCountAll = count(1)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventStatusTypeDescription','EventStatusTypeTransactionStartDate','EventStatusTypeGroup','EventStatusTypeInternalCode','EventStatusTypeSubGroup'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode\n\t)) ~> TblEvStsTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventStatusType2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "TblEvStsTyp"
						}
					],
					"transformations": [
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tEventStatusTypeInternalCode = code,\n\t\tEventStatusTypeExternalCode = code,\n\t\tEventStatusTypeDescription = description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols derive(EventStatusTypeGroup = 'CONTACT_TOPIC',\n\t\tEventStatusTypeDescription = left(EventStatusTypeDescription, 70),\n\t\tEventStatusTypeTransactionStartDate = currentTimestamp(),\n\t\tEventStatusTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeSourceId = 3,\n\t\tEventStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tEventStatusTypeSubGroup = 'ICS_CONTACT_TOPIC') ~> AddFixedCols\nAddFixedCols aggregate(groupBy(pickid,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeDescription),\n\tCountAll = count(1)) ~> SelectDistinct\nSelectDistinct filter(equals(pickid, 'ICSContactTopic')) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode = EventStatusTypeInternalCode\n\t)) ~> TblEvStsTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventStatusType6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "EvStsTyp"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectDistinct"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tEventStatusTypeTransactionStartDate = ValidTo,\n\t\tEventStatusTypeTransactionEndDate = ValidFrom,\n\t\tEventStatusTypeInternalCode = code,\n\t\tEventStatusTypeExternalCode = code,\n\t\tEventStatusTypeDescription = description,\n\t\tExpired\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(and(\r\n    equals(pickid, 'ICSLegalStatus'),\r\n    equals(Expired, 'N')\r\n\r\n)) ~> Filter1\nFilter1 derive(EventStatusTypeGroup = 'CHILDREN_IN_CARE',\n\t\tEventStatusTypeTransactionStartDate = iif(equals(toString(EventStatusTypeTransactionStartDate), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), EventStatusTypeTransactionStartDate),\n\t\tEventStatusTypeTransactionEndDate = iif(equals(toString(EventStatusTypeTransactionEndDate), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), EventStatusTypeTransactionEndDate),\n\t\tEventStatusTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeSourceId = 3,\n\t\tEventStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tEventStatusTypeSubGroup = 'CHILDREN_IN_CARE_LEGAL_STATUS') ~> DerivedColumn1\nSelectDistinct alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(EventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode),\n\tCountAll = count(1)) ~> SelectDistinct\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventStatusTypeDescription','EventStatusTypeGroup','EventStatusTypeSubGroup','EventStatusTypeInternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode = EventStatusTypeInternalCode\n\t)) ~> EvStsTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventStatusType7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/7_CPC/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "sinkEvStsTyp"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> source1\nSelect1 derive(EventStatusTypeTransactionStartDate = currentTimestamp(),\n\t\tEventStatusTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeSourceId = 3,\n\t\tEventStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tEventStatusTypeExternalCode = EventStatusTypeDescription) ~> DerivedColumn1\nFilter1 select(mapColumn(\n\t\tEventStatusTypeGroup = GROUP,\n\t\tEventStatusTypeSubGroup = SUB_GROUP,\n\t\tEventStatusTypeInternalCode = INTERNAL_CODE,\n\t\tEventStatusTypeDescription = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsource1 filter(and(\r\n    equals(GROUP, 'CHILD_PROTECTION_CONFERENCE'),\r\n    equals(SUB_GROUP, 'CHILD_PROTECTION_CONFERENCE_OUTCOMES')\r\n)) ~> Filter1\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventStatusTypeGroup','EventStatusTypeSubGroup','EventStatusTypeInternalCode','EventStatusTypeDescription'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventStatusTypeTransactionStartDate,\n\t\tEventStatusTypeTransactionEndDate,\n\t\tEventStatusTypeDescription,\n\t\tEventStatusTypeDeleted,\n\t\tEventStatusTypeGroup,\n\t\tEventStatusTypeSourceId,\n\t\tEventStatusTypeRowInsertedDate,\n\t\tEventStatusTypeSubGroup,\n\t\tEventStatusTypeInternalCode,\n\t\tEventStatusTypeExternalCode\n\t)) ~> sinkEvStsTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "ExclusionsSource"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "StudHistSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "EvSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblInstitution",
								"type": "DatasetReference"
							},
							"name": "InstSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTypSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "SinkEv"
						}
					],
					"transformations": [
						{
							"name": "GroupByDistinctRows"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Join2"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn7"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Join5"
						},
						{
							"name": "DerivedColumn8"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn9"
						},
						{
							"name": "DerivedColumn12"
						},
						{
							"name": "DerivedColumn13"
						},
						{
							"name": "Filter3"
						}
					],
					"script": "source(output(\n\t\tLEA_DECISION as string,\n\t\tEXCL_ID as decimal(38,18),\n\t\tA_YEAR as string,\n\t\tTERM as string,\n\t\tBASE_ID as decimal(38,18),\n\t\tCATEGORY as string,\n\t\tREASON as string,\n\t\tSTART_DATE as timestamp,\n\t\tEXCL_DAYS as decimal(38,18),\n\t\tSTUD_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tEXCL_MEMO as decimal(38,18),\n\t\tRESULT as string,\n\t\tNO_SUP_OFF as decimal(38,18),\n\t\tGOV_CON_DT as timestamp,\n\t\tOFF_ATTEND as decimal(38,18),\n\t\tUPHELD as string,\n\t\tAPPEAL_DT as timestamp,\n\t\tMEETING_DT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tSCH_APPEAL_RECVD as string,\n\t\tAM_PM as string,\n\t\tREFERRED_DC as string,\n\t\tDC_MEETING_DT as timestamp,\n\t\tDC_DECISION as string,\n\t\tREINSTATE_DATE as timestamp,\n\t\tREINSTATE_REASON as string,\n\t\tDATE_OFF_ROLL as timestamp,\n\t\tPASTORAL_RECD as string,\n\t\tEND_MONITOR_DATE as timestamp,\n\t\tMOTIVATION as string,\n\t\tSTAGE_WHEN_EXCLUDED as string,\n\t\tSTATUS_WHEN_EXCLUDED as string,\n\t\tSITE_ID as decimal(38,18),\n\t\tEND_AM_PM as string,\n\t\tCREATED_DATE as timestamp,\n\t\tCREATED_BY as decimal(38,18),\n\t\tNCY_WHEN_EXCLUDED as decimal(38,18),\n\t\tSEN_STAGE_WHEN_EXCLUDED as string,\n\t\tSIXTH_DAY as timestamp,\n\t\tINCARE_WHEN_EXCLUDED as string,\n\t\tADDRESS_ID as decimal(38,18),\n\t\tFSM as string,\n\t\tREFERRED_APPEALS as string,\n\t\tACL as string,\n\t\tEXCL_LUNCH_LENGTH as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tSENEXPERT_REVIEW as string,\n\t\tEXC_DAYS_OS as decimal(38,18),\n\t\tVERIFIEDDATE as timestamp,\n\t\tVERIFIEDBY as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/exclusions') ~> ExclusionsSource\nsource(output(\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tBASE_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tHIST_AMEND as timestamp,\n\t\tHIST_TIME as string,\n\t\tHIST_USER as string,\n\t\tREG_BASE as string,\n\t\tRESIDENCE as string,\n\t\tRJOIN as string,\n\t\tRLEAVE as string,\n\t\tSTART_DATE as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tHIST_ID as decimal(38,18),\n\t\tD_PER_WEEK as decimal(38,18),\n\t\tREG2_BASE as string,\n\t\tREGTYPE as string,\n\t\tBOARDER as string,\n\t\tGUEST as string,\n\t\tDESTINATION as string,\n\t\tDESTINATION_LAST_UPDT as timestamp,\n\t\tDESTINATION_UPDATED_BY as decimal(38,18),\n\t\tSITE_ID as decimal(38,18),\n\t\tSCHOOL_HISTORY_TYPE as string,\n\t\tGROUNDS_REMOVAL as string,\n\t\tCML_DESTINATION as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/stud_hist') ~> StudHistSource\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvSource\nsource(output(\n\t\tInstitutionId as long,\n\t\tInstitutionURN as integer,\n\t\tInstitutionPhase as string,\n\t\tInstitutionName as string,\n\t\tInstitutionSourceKey as integer,\n\t\tInstitutionDeleted as timestamp,\n\t\tInstitutionTransactionStartDate as timestamp,\n\t\tInstitutionTransactionEndDate as timestamp,\n\t\tInstitutionAgeRange as string,\n\t\tInstitutionDFE as integer,\n\t\tInstitutionSourceId as integer,\n\t\tInstitutionRowInstitutionDate as timestamp,\n\t\tInstitutionToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> InstSource\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvTypSource\nExclusionsSource aggregate(groupBy(STUD_ID,\n\t\tEXCL_ID,\n\t\tBASE_ID,\n\t\tSTART_DATE,\n\t\tEND_DATE),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByDistinctRows\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nStudHistSource aggregate(groupBy(HIST_ID,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tHIST_AMEND,\n\t\tSTUD_ID,\n\t\tBASE_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> Aggregate1\nDerivedColumn1, DerivedColumn3 join(HIST_ID == EventSourceKey\n\t&& START_DATE == toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEv\nAggregate1 derive(SCHOOL_TRANSFER = 'SCHOOL_TRANSFER',\n\t\tPUPIL_EVENT = 'PUPIL_EVENT',\n\t\tSTART_DATE = toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\t\tHIST_ID = toString(toInteger(HIST_ID)),\n\t\tBASE_ID = toInteger(BASE_ID)) ~> DerivedColumn1\nEvSource derive(EventValidStartDate = toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\")) ~> DerivedColumn3\nDerivedColumn6, DerivedColumn3 join(EXCL_ID == EventSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nGroupByDistinctRows derive(EXCL_ID = toString(toInteger(EXCL_ID)),\n\t\tBASE_ID = toInteger(BASE_ID)) ~> DerivedColumn6\nJoin2, InstSource join(BASE_ID == InstitutionSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3 filter(equals(isNull(InstitutionId), false())) ~> Filter1\nDerivedColumn13 select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tInstitutionId,\n\t\tEventToInstitutionCounter,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter1 derive(EventId = coalesce(EventId, -1),\n\t\tEventToInstitutionTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionTransactionStartDate = coalesce(toDate(toString(LAST_UPDT, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToInstitutionSourceId = 2,\n\t\tEventToInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionValidStartDate = coalesce(\r\n    toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\r\n    toDate(toString(\"31-12-9999\"), \"dd-MM-yyyy\")\r\n\r\n),\n\t\tEventToInstitutionValidEndDate = coalesce(\r\n    toDate(toString(END_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\r\n    toDate(toString(\"31-12-9999\"), \"dd-MM-yyyy\")\r\n\r\n),\n\t\tEventToInstitutionRowInsertedDate = currentTimestamp()) ~> DerivedColumn7\nSelect1, Select2 union(byName: true)~> Union1\nJoinEv, InstSource join(BASE_ID == InstitutionSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4, EvTypSource join(SCHOOL_TRANSFER == EventTypeInternalCode\n\t&& PUPIL_EVENT == EventTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join5\nJoin5 derive(EventId = coalesce(EventId, -1),\n\t\tInstitutionId = coalesce(InstitutionId, -1),\n\t\tEventTypeId = coalesce(EvTypSource@EventTypeId, -1),\n\t\tEventToInstitutionTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionTransactionStartDate = toDate(toString(LAST_UPDT, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\t\tEventToInstitutionSourceId = 2,\n\t\tEventToInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionValidStartDate = START_DATE,\n\t\tEventToInstitutionValidEndDate = toDate(toString(END_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\t\tEventToInstitutionRowInsertedDate = currentTimestamp()) ~> DerivedColumn8\nDerivedColumn12 select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tInstitutionId,\n\t\tEventToInstitutionCounter,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn9 aggregate(groupBy(InstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionCounter,\n\t\tEventToInstitutionTransactionStartDate),\n\tEventToInstitutionRowInsertedDate = max(EventToInstitutionRowInsertedDate),\n\t\tEventToInstitutionSourceId = max(EventToInstitutionSourceId),\n\t\tEventToInstitutionValidEndDate = max(EventToInstitutionValidEndDate),\n\t\tEventToInstitutionDeleted = max(EventToInstitutionDeleted),\n\t\tEventToInstitutionTransactionEndDate = max(EventToInstitutionTransactionEndDate)) ~> Aggregate2\nFilter3 derive(EventTypeId = coalesce(EventTypeId, -1),\n\t\tEventToInstitutionValidStartDate = toTimestamp(toString(EventToInstitutionValidStartDate),'yyyy-MM-dd'),\n\t\tEventToInstitutionTransactionStartDate = toTimestamp(toString(EventToInstitutionTransactionStartDate),'yyyy-MM-dd'),\n\t\tEventToInstitutionValidEndDate = toTimestamp(toString(EventToInstitutionValidEndDate),'yyyy-MM-dd')) ~> DerivedColumn9\nDerivedColumn8 derive(EventToInstitutionCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)),\r\n    iif(or(or(equals(InstitutionId,0),equals(InstitutionId,-1)),isNull(InstitutionId)), toLong(random(100)),\r\n\r\ntoLong(0)))) ~> DerivedColumn12\nDerivedColumn7 derive(EventToInstitutionCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)),toLong(random(100)),    \r\n    iif(or(or(equals(InstitutionId,0),equals(InstitutionId,-1)),isNull(InstitutionId)),toLong(random(100)),\r\n    \r\ntoLong(0)))) ~> DerivedColumn13\nUnion1 filter(and(\r\n    notEquals(EventId, -1),\r\n    notEquals(InstitutionId, -1)\r\n)) ~> Filter3\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','EventId','EventTypeId','EventToInstitutionTransactionStartDate','EventToInstitutionValidStartDate','EventToInstitutionCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t)) ~> SinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitution')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "TblEvToInst"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ppmark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessmenttype"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTypEXT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "EvToInst"
						}
					],
					"transformations": [
						{
							"name": "JoinTblEvTyp"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinEvToPup"
						},
						{
							"name": "JoinEvToInst"
						},
						{
							"name": "DenseRank"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "JoinPpmark"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "JoinWfassessment"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "JoinWfassessmenttype"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "SelectRelevantCols3"
						},
						{
							"name": "SelectRelevantCols4"
						},
						{
							"name": "SelectRelevantCols5"
						},
						{
							"name": "SelectDistinct1"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "JoinTmpSchoolAtt"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "RenameCols"
						},
						{
							"name": "JoinTblEv"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "FilterSchoolRank"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToPup\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToInst\nsource(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> IcsRefer\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> Ppmark\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> Wfassessmenttype\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTypEXT\nTblEv, Filter1 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTblEvTyp\nTblEvTyp filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_EVENT'),\r\n    equals(EventTypeDescription, 'SCHOOL_TRANSFER')\r\n)) ~> Filter1\nJoinTblEvTyp, TblEvToPup join(TblEv@EventId == TblEvToPup@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToPup\nJoinEvToPup, TblEvToInst join(TblEv@EventId == TblEvToInst@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToInst\nSelectDistinct window(over(PupilId),\n\tdesc(EventValidEndDate, true),\n\tdesc(EventValidStartDate, true),\n\tasc(InstitutionId, true),\n\tFormRank = count(1)) ~> DenseRank\nJoinEvToInst aggregate(groupBy(PupilId,\n\t\tInstitutionId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate),\n\tCountAll = count(1)) ~> SelectDistinct\nSelectRelevantCols, Filter2 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1)),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPpmark\nSelectRelevantCols5 filter(and(\r\n    equals(right(UnitRef, minus(length(UnitRef),instr(UnitRef, '/'))+1), '/com.liquidlogic.assessment.DBAssessment'),\r\n    notEquals(SubStatus, 'X')\r\n)) ~> Filter2\nJoinPpmark, Filter3 join(SelectRelevantCols5@MarkerID == SelectRelevantCols2@MarkerID\n\t&& left(MainRef, instr(MainRef, '/')-1) == FormLinkKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessment\nSelectRelevantCols2 filter(and(\r\n    notEquals(Status, 'X' ),\r\n    in(['C','D','E'], Status)\r\n)) ~> Filter3\nJoinWfassessment, Wfassessmenttype join(SelectRelevantCols2@TemplateID == Wfassessmenttype@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessmenttype\nSelectRelevantCols3 filter(and(\r\n    not(isNull(UPN)),\r\n    notEquals(UPN, 'NULL')\r\n)) ~> Filter4\nJoinWfassessmenttype, Filter4 join(SelectRelevantCols@PersonID == SelectRelevantCols3@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson\nIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nWfassessment select(mapColumn(\n\t\tMarkerID,\n\t\tFormLinkKey,\n\t\tStatus,\n\t\tTemplateID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols3\nWfassessmenttype select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols4\nPpmark select(mapColumn(\n\t\tMainRef,\n\t\tUnitRef,\n\t\tSubStatus,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols5\nJoinIsperson aggregate(groupBy(SelectRelevantCols2@TemplateID,\n\t\tSelectRelevantCols2@FormNo,\n\t\tUPN),\n\tCountAll = count(1)) ~> SelectDistinct1\nSelectDistinct1, TblPupil join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nTblEvTypEXT filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_ASSESSMENT'),\r\n    notEquals(EventTypeInternalCode, 'PUPIL_ASSESSMENT')\r\n)) ~> Filter5\nJoinEvTyp, DenseRank join(TblPupil@PupilId == SelectDistinct@PupilId\n\t&& toDate(TblEv@EventValidStartDate) >= toDate(SelectDistinct@EventValidStartDate)\n\t&& toDate(TblEv@EventValidEndDate) <= toDate(SelectDistinct@EventValidEndDate),\n\tjoinType:'inner',\n\tbroadcast: 'both')~> JoinTmpSchoolAtt\nAddFixedCols aggregate(groupBy(EventId,\n\t\tTblEvTypEXT@EventTypeId,\n\t\tEventTransactionEndDate,\n\t\tEventTransactionStartDate,\n\t\tEventSourceId,\n\t\tTblEv@EventValidStartDate,\n\t\tTblEv@EventValidEndDate,\n\t\tTblPupil@PupilId,\n\t\tInstitutionId,\n\t\tFormRank,\n\t\tFilter_School_Rank,\n\t\tEventToInstitutionDeleted),\n\tEventToInstitutionRowInsertedDate = max(EventToInstitutionRowInsertedDate),\n\t\tEventToInstitutionCounter = max(EventToInstitutionCounter)) ~> Aggregate1\nAggregate2 alterRow(insertIf(true())) ~> AlterRow1\nAggregate1 select(mapColumn(\n\t\tASM_EventId = EventId,\n\t\tEventTypeId,\n\t\tASM_EventTransactionEndDate = EventTransactionEndDate,\n\t\tASM_EventTransactionStartDate = EventTransactionStartDate,\n\t\tASM_EventSourceId = EventSourceId,\n\t\tASM_EventValidStartDate = EventValidStartDate,\n\t\tASM_EventValidEndDate = EventValidEndDate,\n\t\tInstitutionId,\n\t\tFilter_School_Rank,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionCounter,\n\t\tPupilId,\n\t\tFormRank\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nJoinPup, TblEv join(FormNo == toInteger(EventSourceKey),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTblEv\nJoinTblEv, Filter5 join(TemplateID == toInteger(EventTypeInternalCode)\n\t&& TblEv@EventTypeId == TblEvTypEXT@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nSort1 filter(equals(Filter_School_Rank, 1)) ~> Filter6\nJoinTmpSchoolAtt window(over(EventId),\n\tasc(TblPupil@PupilId, true),\n\tasc(EventId, true),\n\tasc(InstitutionId, true),\n\tasc(FormRank, true),\n\tFilter_School_Rank = count(1)) ~> FilterSchoolRank\nFilterSchoolRank derive(EventToInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionCounter = iif(or(or(equals(InstitutionId,0),equals(InstitutionId,-1)),isNull(InstitutionId)), toLong(random(100)),toLong(0)),\n\t\tEventToInstitutionRowInsertedDate = currentTimestamp()) ~> AddFixedCols\nRenameCols sort(asc(PupilId, true),\n\tasc(FormRank, true),\n\tasc(ASM_EventId, true)) ~> Sort1\nFilter6 select(mapColumn(\n\t\tEventId = ASM_EventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate = ASM_EventTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate = ASM_EventTransactionStartDate,\n\t\tEventToInstitutionSourceId = ASM_EventSourceId,\n\t\tEventToInstitutionValidStartDate = ASM_EventValidStartDate,\n\t\tEventToInstitutionValidEndDate = ASM_EventValidEndDate,\n\t\tInstitutionId,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(EventId,\n\t\tEventTypeId,\n\t\tInstitutionId,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionCounter),\n\tEventToInstitutionTransactionEndDate = max(EventToInstitutionTransactionEndDate),\n\t\tEventToInstitutionSourceId = max(EventToInstitutionSourceId),\n\t\tEventToInstitutionValidEndDate = max(EventToInstitutionValidEndDate),\n\t\tEventToInstitutionRowInsertedDate = max(EventToInstitutionRowInsertedDate),\n\t\tEventToInstitutionDeleted = max(EventToInstitutionDeleted)) ~> Aggregate2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t)) ~> EvToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]",
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icscontact2"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ecafcontact"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "TblEvToInst"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "EvToInst"
						}
					],
					"transformations": [
						{
							"name": "SelectRelCols"
						},
						{
							"name": "JoinWfassessment"
						},
						{
							"name": "Filter"
						},
						{
							"name": "SelectRelCols1"
						},
						{
							"name": "AuditDate"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectRelCols2"
						},
						{
							"name": "AuditDate1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "JoinWfassessment1"
						},
						{
							"name": "GroupBy1"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "CONTACT"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "JoinEvToInst"
						},
						{
							"name": "DenseRank"
						},
						{
							"name": "JoinEvToPup"
						},
						{
							"name": "TMPSCHOOLATT"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "SelectRelCols3"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "SelectRelCols4"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvTyp1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "JoinTmpSchoolAtt"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "FilterSchoolRank"
						},
						{
							"name": "Filter6QRYDT"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectContact"
						}
					],
					"script": "source(output(\n\t\tICSContactID as integer,\n\t\tPersonID as integer,\n\t\tReferralID as integer,\n\t\tStartDate as timestamp,\n\t\tContactDetails as string,\n\t\tFormNo as integer,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLinkedDate as timestamp,\n\t\tLinkedBy as string,\n\t\tMarkerID as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSourceType as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tKeyAgencyID as integer,\n\t\tSyncEvent as string,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tContactGroupID as integer,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string,\n\t\tExternalFormNo as integer,\n\t\tRecordedStaffHistoryID as integer,\n\t\tLinkedStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscontact2') ~> Icscontact2\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tECAFContactID as integer,\n\t\tPersonID as integer,\n\t\tEpisodeID as integer,\n\t\tContactGroupID as integer,\n\t\tFormNo as integer,\n\t\tStartDate as timestamp,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tMarkerID as integer,\n\t\tRecordedBy as string,\n\t\tRecordedByDept as string,\n\t\tLinkedBy as string,\n\t\tLinkedDate as timestamp,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tKeyAgencyID as integer,\n\t\tSysAgency as string,\n\t\tSysProfessional as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tSourceType as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tContactDetails as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tOutOfHours as string,\n\t\tEpisodeNeeds as string,\n\t\tPrimNeed as string,\n\t\tExternalFormNo as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ecafcontact') ~> Ecafcontact\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToPup\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToInst\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nIcscontact2 select(mapColumn(\n\t\tAuditDate,\n\t\tPersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tContactSourceKey = ICSContactID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelCols\nAuditDate, Filter join(SelectRelCols@FormNo == SelectRelCols1@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessment\nSelectRelCols1 filter(and(\r\n    equals(FormType, 'ICS/Contact'),\r\n    in(['C','D'], Status)\r\n)) ~> Filter\nWfassessment select(mapColumn(\n\t\tFormNo,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelCols1\nSelectRelCols derive(AuditDate = replace(toString(AuditDate), 'NULL', '9999-12-31 23:59:59.9999')) ~> AuditDate\nJoinWfassessment aggregate(groupBy(PersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tContactSourceKey,\n\t\tFormType,\n\t\tAuditDate),\n\tCountAll = count(1)) ~> GroupBy\nGroupBy filter(notEquals(toString(StartDate), 'NULL')) ~> Filter1\nEcafcontact select(mapColumn(\n\t\tAuditDate,\n\t\tPersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tContactSourceKey = ECAFContactID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelCols2\nSelectRelCols2 derive(AuditDate = replace(toString(AuditDate), 'NULL', '9999-12-31 23:59:59.9999')) ~> AuditDate1\nSelectRelCols1 filter(and(\r\n    equals(FormType, 'ECAF/Contact'),\r\n    in(['C','D'], Status)\r\n)) ~> Filter2\nAuditDate1, Filter2 join(SelectRelCols2@FormNo == SelectRelCols1@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessment1\nJoinWfassessment1 aggregate(groupBy(PersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tContactSourceKey,\n\t\tFormType),\n\tCountAll = count(1)) ~> GroupBy1\nGroupBy1 filter(notEquals(toString(StartDate), 'NULL')) ~> Filter3\nFilter1, Filter3 union(byName: true)~> CONTACT\nTblEvTyp filter(and(     equals(EventTypeGroup, 'PUPIL_EVENT'),     equals(EventTypeDescription, 'SCHOOL_TRANSFER') )) ~> Filter4\nTblEv, Filter4 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEvToPup, TblEvToInst join(TblEv@EventId == TblEvToInst@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToInst\nJoinEvToInst window(over(PupilId),\n\tdesc(EventValidStartDate, true),\n\tdesc(EventValidEndDate, true),\n\tasc(InstitutionId, true),\n\tFormRank = count(1)) ~> DenseRank\nJoinEvTyp, TblEvToPup join(TblEv@EventId == TblEvToPup@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToPup\nDenseRank aggregate(groupBy(PupilId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tInstitutionId,\n\t\tFormRank),\n\tCountAll = count(1)) ~> TMPSCHOOLATT\nSelectContact, SelectRelCols3 join(SelectContact@PersonID == SelectRelCols3@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelCols3\nJoinIsperson, SelectRelCols4 join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nTblPupil select(mapColumn(\n\t\tPupilUPN,\n\t\tPupilId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelCols4\nJoinPup, TblEv join(ContactSourceKey == toInteger(EventSourceKey)\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate)\n\t&& toDate(StartDate) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, Filter5 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp1\nTblEvTyp filter(in(['ICS_CONTACT','ECAF_CONTACT'], EventTypeGroup)) ~> Filter5\nJoinEvTyp1, TMPSCHOOLATT join(SelectRelCols4@PupilId == TMPSCHOOLATT@PupilId\n\t&& toDate(TblEv@EventValidStartDate) >= toDate(TMPSCHOOLATT@EventValidStartDate)\n\t&& toDate(TblEv@EventValidEndDate) <= toDate(TMPSCHOOLATT@EventValidEndDate),\n\tjoinType:'inner',\n\tbroadcast: 'both')~> JoinTmpSchoolAtt\nFilterSchoolRank select(mapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId = TblEvTyp@EventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventValidStartDate = TblEv@EventValidStartDate,\n\t\tEventValidEndDate = TblEv@EventValidEndDate,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter,\n\t\tFilter_School_Rank\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDistinct\nJoinTmpSchoolAtt derive(EventToInstitutionTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionSourceId = 3,\n\t\tEventToInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionRowInsertedDate = currentTimestamp(),\n\t\tEventToInstitutionCounter = iif(or(isNull(InstitutionId), isNull(EventId)), toLong(random(100)),\r\niif(or(isNull(InstitutionId), isNull(EventId)), toLong(random(100)),toLong(0)))) ~> AddCols\nAddCols window(over(EventId),\n\tasc(SelectRelCols4@PupilId, true),\n\tasc(EventId, true),\n\tasc(InstitutionId, true),\n\tasc(FormRank, true),\n\tFilter_School_Rank = count(1)) ~> FilterSchoolRank\nSelectDistinct filter(equals(Filter_School_Rank, 1)) ~> Filter6QRYDT\nFilter6QRYDT alterRow(upsertIf(true())) ~> AlterRow1\nCONTACT select(mapColumn(\n\t\tPersonID,\n\t\tStartDate,\n\t\tSourceType,\n\t\tContactSourceKey,\n\t\tFormType,\n\t\tAuditDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectContact\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','EventId','EventTypeId','EventToInstitutionTransactionStartDate','EventToInstitutionValidStartDate','EventToInstitutionCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate = EventTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate = EventValidStartDate,\n\t\tEventToInstitutionValidEndDate = EventValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t)) ~> EvToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "TblEvToInst"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsrefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ppmark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IsPerson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "EvToInst"
						}
					],
					"transformations": [
						{
							"name": "JoinTblEvTyp"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinEvToPup"
						},
						{
							"name": "JoinEvToInst"
						},
						{
							"name": "DenseRank"
						},
						{
							"name": "TMPSCHOOLATT"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "AuditStartDate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "JoinWfassessment"
						},
						{
							"name": "JoinPpmark"
						},
						{
							"name": "SelectRelevantCols1"
						},
						{
							"name": "GroupByREFERRAL"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "SelectRelevantCols3"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "JoinTmpSchoolAtt"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "SelectRelevant"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToPup\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToInst\nsource(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> Icsrefer\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> Ppmark\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> IsPerson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nTblEv, Filter1 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTblEvTyp\nTblEvTyp filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_EVENT'),\r\n    equals(EventTypeDescription, 'SCHOOL_TRANSFER')\r\n)) ~> Filter1\nJoinTblEvTyp, TblEvToPup join(TblEv@EventId == TblEvToPup@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToPup\nJoinEvToPup, TblEvToInst join(TblEv@EventId == TblEvToInst@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToInst\nJoinEvToInst window(over(PupilId),\n\tdesc(EventValidEndDate, true),\n\tdesc(EventValidStartDate, true),\n\tasc(InstitutionId, true),\n\tFormRank = count(1)) ~> DenseRank\nDenseRank aggregate(groupBy(PupilId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tInstitutionId,\n\t\tFormRank),\n\tCountAll = count(1)) ~> TMPSCHOOLATT\nIcsrefer aggregate(groupBy(AuditDate,\n\t\tStartDate,\n\t\tPersonID,\n\t\tICSReferralID,\n\t\tFormNo),\n\tCountAll = count(1)) ~> SelectDistinct\nSelectDistinct derive(AuditDate = replace(toString(AuditDate), 'NULL', '9999-12-31 23:59:59.9999'),\n\t\tStartDate = iif(equals(toString(StartDate), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), StartDate)) ~> AuditStartDate\nAuditStartDate select(mapColumn(\n\t\tAuditDate,\n\t\tReferralStart = StartDate,\n\t\tPersonID,\n\t\tUniqueRecord = ICSReferralID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nWfassessment select(mapColumn(\n\t\tFormNo,\n\t\tStatus,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols filter(in(['C', 'D', 'F'], Status)) ~> Filter2\nSelect1, Filter2 join(Select1@FormNo == SelectRelevantCols@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessment\nJoinWfassessment, SelectRelevantCols1 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1))\n\t&& SelectRelevantCols@MarkerID == SelectRelevantCols1@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPpmark\nPpmark select(mapColumn(\n\t\tMainRef,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols1\nJoinPpmark aggregate(groupBy(PersonID,\n\t\tUniqueRecord,\n\t\tReferralStart),\n\tCountAll = count(1)) ~> GroupByREFERRAL\nGroupByREFERRAL, SelectRelevantCols2 join(GroupByREFERRAL@PersonID == SelectRelevantCols2@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson\nIsPerson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nJoinIsperson, SelectRelevantCols3 join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nTblPupil select(mapColumn(\n\t\tPupilId,\n\t\tPupilUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols3\nJoinPup, TblEv join(UniqueRecord == toInteger(EventSourceKey)\n\t&& toDate(ReferralStart) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, Filter3 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nTblEvTyp filter(in(['PUPIL_REFERRAL'], EventTypeGroup)) ~> Filter3\nJoinEvTyp, TMPSCHOOLATT join(SelectRelevantCols3@PupilId == TMPSCHOOLATT@PupilId\n\t&& toDate(TblEv@EventValidStartDate) >= toDate(TMPSCHOOLATT@EventValidStartDate)\n\t&& toDate(TblEv@EventValidEndDate) <= toDate(TMPSCHOOLATT@EventValidEndDate),\n\tjoinType:'inner',\n\tbroadcast: 'both')~> JoinTmpSchoolAtt\nJoinTmpSchoolAtt derive(EventToInstitutionSourceId = 3,\n\t\tEventToInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionRowInsertedDate = currentTimestamp(),\n\t\tEventToInstitutionCounter = iif(or(isNull(InstitutionId), isNull(EventId)), toLong(random(100)),\r\niif(or(isNull(InstitutionId), isNull(EventId)), toLong(random(100)), toLong(0))\r\n),\n\t\tInstitutionId = coalesce(InstitutionId, -1),\n\t\tEventId = coalesce(EventId, -1)) ~> AddFixedCols\nAddFixedCols window(over(EventId),\n\tasc(SelectRelevantCols3@PupilId, true),\n\tasc(EventId, true),\n\tasc(InstitutionId, true),\n\tasc(FormRank, true),\n\tFilter_School_Rank = count(1)) ~> Window1\nFilter4 aggregate(groupBy(InstitutionId,\n\t\tEventId,\n\t\tTblEvTyp@EventTypeId,\n\t\tEventTransactionEndDate,\n\t\tEventTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tTblEv@EventValidStartDate,\n\t\tTblEv@EventValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter,\n\t\tSelectRelevantCols3@PupilId,\n\t\tFormRank,\n\t\tFilter_School_Rank),\n\tCountAll = count(1)) ~> Aggregate1\nWindow1 filter(equals(toInteger(Filter_School_Rank), 1)) ~> Filter4\nAggregate1 select(mapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionEndDate,\n\t\tEventTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevant\nSelectRelevant alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','EventId','EventTypeId','EventToInstitutionTransactionStartDate','EventToInstitutionValidStartDate','EventToInstitutionCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate = EventTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate = EventTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate = EventValidStartDate,\n\t\tEventToInstitutionValidEndDate = EventValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t)) ~> EvToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]",
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/4_CPP/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsPerson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsPreg"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsCprchist"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "sourceTblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "sourceEvToInst"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "sourceEvToPup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "sinkEvToInst"
						}
					],
					"transformations": [
						{
							"name": "SelectIcsRefer"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "SelectIcsPreg"
						},
						{
							"name": "JoinIcsPreg"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "SelectCprchist"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "FilterIcsPreg"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinIcsCprhist"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "DerivedColumnCPP"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "SelectPup"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "JoinTmp"
						},
						{
							"name": "FilterEvTypTmp"
						},
						{
							"name": "JoinEvTypTmp"
						},
						{
							"name": "JoinEvtoPupTmp"
						},
						{
							"name": "JoinEvToInstTmp"
						},
						{
							"name": "DenseRank"
						},
						{
							"name": "AggregateTmp"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Filter2"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsPerson\nsource(output(\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tRegComments as string,\n\t\tDeRegReason as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tInitialMeetingID as integer,\n\t\tFinalMeetingID as integer,\n\t\tOLACSSR as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscpreg') ~> sourceIcsPreg\nsource(output(\n\t\tCPRegCatID as integer,\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tMeetingID as integer,\n\t\tStartDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tRegComments as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tEndDate as timestamp,\n\t\tSyncDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscprchist') ~> sourceIcsCprchist\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEv\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblPupil\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvToInst\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvToPup\nsourceIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tAuditDate,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsRefer\nSelectIcsRefer, SelectIsPerson join(SelectIcsRefer@PersonID == SelectIsPerson@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceIsPerson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nsourceIcsPreg select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tStartDate,\n\t\tEndDate,\n\t\tOLACSSR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsPreg\nJoinIsPerson, FilterIcsPreg join(SelectIcsRefer@PersonID == SelectIcsPreg@PersonID\n\t&& toDate(SelectIcsRefer@StartDate) <= toDate(SelectIcsPreg@StartDate)\n\t&& toDate(    coalesce(SelectIcsRefer@EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) >= toDate(SelectIcsPreg@StartDate),\n\tjoinType:'inner',\n\tbroadcast: 'left')~> JoinIcsPreg\nDerivedColumn1 aggregate(groupBy(SelectIcsRefer@PersonID,\n\t\tEndDate,\n\t\tSelectIcsPreg@StartDate,\n\t\tCPRegID,\n\t\tUPN),\n\tAuditDate = max(AuditDate)) ~> Aggregate1\nsourceIcsCprchist select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tRegNeglect,\n\t\tRegPhysical,\n\t\tRegSexual,\n\t\tRegEmotional\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCprchist\nsourceEvTyp filter(equals(EventTypeGroup, 'CHILD_PROTECTION_PLAN')) ~> Filter1\nFilter1 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nSelectIcsPreg filter(isNull(OLACSSR)) ~> FilterIcsPreg\nJoinIcsPreg derive(EndDate = coalesce(SelectIcsRefer@EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nAggregate1, SelectCprchist join(Aggregate1@CPRegID == SelectCprchist@CPRegID\n\t&& Aggregate1@PersonID == SelectCprchist@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsCprhist\nDerivedColumnCPP, SelectEvTyp join(CHILD_PROTECTION_PLAN == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinIcsCprhist derive(CHILD_PROTECTION_PLAN = 'CHILD_PROTECTION_PLAN') ~> DerivedColumnCPP\nsourceEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nJoinEvTyp, SelectEv join(toString(Aggregate1@CPRegID) == EventSourceKey\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate)\n\t&& toDate(StartDate) == toDate(EventValidStartDate)\n\t&& toDate(        coalesce(EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) == toDate(EventValidEndDate)\n\t&& SelectEvTyp@EventTypeId == SelectEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, SelectPup join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nsourceTblPupil select(mapColumn(\n\t\tPupilId,\n\t\tPupilUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPup\nSelect1 derive(InstitutionId = coalesce(InstitutionId, -1),\n\t\tEventId = coalesce(EventId, -1),\n\t\tEventTypeId = coalesce(EventTypeId, 0),\n\t\tEventToInstitutionTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionSourceId = 3,\n\t\tEventToInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToInstitutionRowInsertedDate = currentTimestamp(),\n\t\tEventToInstitutionCounter = iif(or(or(equals(InstitutionId,0),equals(InstitutionId,-1)),isNull(InstitutionId)), toLong(random(100)),\r\n    iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)), toLong(0))\r\n\r\n)) ~> DerivedColumn2\nJoinTmp select(mapColumn(\n\t\tInstitutionId,\n\t\tPupilId = SelectPup@PupilId,\n\t\tEventId,\n\t\tEventTypeId = SelectEvTyp@EventTypeId,\n\t\tEventToInstitutionTransactionStartDate = EventTransactionStartDate,\n\t\tEventToInstitutionValidStartDate = SelectEv@EventValidStartDate,\n\t\tEventToInstitutionValidEndDate = SelectEv@EventValidEndDate,\n\t\tFormRank\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter2 aggregate(groupBy(InstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter,\n\t\tFormRank,\n\t\tFilter_School_Rank),\n\tCountAll = count(1)) ~> Aggregate2\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nJoinPup, AggregateTmp join(SelectPup@PupilId == AggregateTmp@PupilId\n\t&& SelectEv@EventValidStartDate >= AggregateTmp@EventValidStartDate\n\t&& SelectEv@EventValidEndDate <= AggregateTmp@EventValidEndDate,\n\tjoinType:'inner',\n\tbroadcast: 'left')~> JoinTmp\nsourceEvTyp filter(and(     equals(EventTypeGroup, 'PUPIL_EVENT'),     equals(EventTypeDescription, 'SCHOOL_TRANSFER') )) ~> FilterEvTypTmp\nsourceEv, FilterEvTypTmp join(sourceEv@EventTypeId == sourceEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTypTmp\nJoinEvTypTmp, sourceEvToPup join(sourceEv@EventId == sourceEvToPup@EventId\n\t&& sourceEvTyp@EventTypeId == sourceEvToPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvtoPupTmp\nJoinEvtoPupTmp, sourceEvToInst join(sourceEv@EventId == sourceEvToInst@EventId\n\t&& sourceEvTyp@EventTypeId == sourceEvToInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToInstTmp\nJoinEvToInstTmp window(over(PupilId),\n\tasc(InstitutionId, true),\n\tdesc(EventValidEndDate, true),\n\tdesc(EventValidStartDate, true),\n\tFormRank = count(1)) ~> DenseRank\nDenseRank aggregate(groupBy(PupilId,\n\t\tInstitutionId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tFormRank),\n\tCountAll = count(1)) ~> AggregateTmp\nDerivedColumn2 window(over(EventId),\n\tasc(PupilId, true),\n\tasc(EventId, true),\n\tasc(InstitutionId, true),\n\tasc(FormRank, true),\n\tFilter_School_Rank = count(1)) ~> Window1\nWindow1 filter(equals(toInteger(Filter_School_Rank), 1)) ~> Filter2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','EventId','EventTypeId','EventToInstitutionValidStartDate','EventToInstitutionValidEndDate','EventToInstitutionCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t)) ~> sinkEvToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/5_CINP/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "TblEvToInst"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "CpCarePlan"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IsPerson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "Pup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "EvToInst"
						}
					],
					"transformations": [
						{
							"name": "JoinTblEvTyp"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinEvToPup"
						},
						{
							"name": "JoinEvToInst"
						},
						{
							"name": "DenseRank"
						},
						{
							"name": "TEMPSCHOOLATT"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "JoinIcsRefer"
						},
						{
							"name": "Select3"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "GroupByCININST"
						},
						{
							"name": "JoinIsPerson1"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "CINColumn"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinTmpSchoolAtt"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Window1"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "RenameCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToPup\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToInst\nsource(output(\n\t\tPlanNo as integer,\n\t\tParPlanNo as integer,\n\t\tPlanLink as string,\n\t\tPlanLinkKey as string,\n\t\tServiceArea as string,\n\t\tPlanType as string,\n\t\tMarkerID as integer,\n\t\tReferralID as integer,\n\t\tMarkerKey as string,\n\t\tStatus as string,\n\t\tGlobalPlanID as integer,\n\t\tGlobalRevision as integer,\n\t\tRevision as integer,\n\t\tSubRev as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tCPComments as string,\n\t\tCreatedBy as string,\n\t\tCreationDate as timestamp,\n\t\tEmergencyPlan as string,\n\t\tEContact1 as string,\n\t\tEContact1No as string,\n\t\tEContact2 as string,\n\t\tEContact2No as string,\n\t\tConsentGiven as string,\n\t\tPlanAgreed as string,\n\t\tSUserComments as string,\n\t\tPlanCoord as string,\n\t\tConsent as string,\n\t\tOfferedBy as string,\n\t\tOfferedDate as timestamp,\n\t\tOfferedNotes as string,\n\t\tRevisionDate as timestamp,\n\t\tUpdateDate as timestamp,\n\t\tCompletedBy as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tFrozenDate as timestamp,\n\t\tFreezeNotes as string,\n\t\tFrozenBy as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tPartOneID as integer,\n\t\tPartTwoID as integer,\n\t\tReviewID as integer,\n\t\tPartTwoPlanNo as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAuthBy as string,\n\t\tAuthCode as string,\n\t\tReasonCeased as string,\n\t\tAuthDate as timestamp,\n\t\tAuthComm as string,\n\t\tOrderByOnDisplay as string,\n\t\tProvTaskNo as integer,\n\t\tEDMIntegID as string,\n\t\tReviewSummary as string,\n\t\tReviewNotes as string,\n\t\tAppVersion as integer,\n\t\tCreatedStaffHistoryID as integer,\n\t\tPlanCoordStaffHistoryID as integer,\n\t\tAuthStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/cpcareplan') ~> CpCarePlan\nsource(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> IcsRefer\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> IsPerson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> Pup\nTblEv, Filter1 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTblEvTyp\nTblEvTyp filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_EVENT'),\r\n    equals(EventTypeDescription, 'SCHOOL_TRANSFER')\r\n)) ~> Filter1\nJoinTblEvTyp, TblEvToPup join(TblEv@EventId == TblEvToPup@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToPup\nJoinEvToPup, TblEvToInst join(TblEv@EventId == TblEvToInst@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToInst\nJoinEvToInst window(over(PupilId),\n\tdesc(EventValidEndDate, true),\n\tdesc(EventValidStartDate, true),\n\tasc(InstitutionId, true),\n\tFormRank = count(1)) ~> DenseRank\nDenseRank aggregate(groupBy(PupilId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tInstitutionId,\n\t\tFormRank),\n\tCountAll = count(1)) ~> TEMPSCHOOLATT\nCpCarePlan select(mapColumn(\n\t\tAuditDate,\n\t\tReferralID,\n\t\tUniqueRecord = PlanNo,\n\t\tPlanType,\n\t\tPersonID = PlanLinkKey,\n\t\tCIN_Status = Status,\n\t\tCIN_Start_Date = StartDate,\n\t\tCIN_End_Date = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tCIN_Status = iif(equals(CIN_Status, 'NULL'), toString(null()), CIN_Status),\n\t\tCIN_Start_Date = iif(equals(toString(CIN_Start_Date), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), CIN_Start_Date),\n\t\tCIN_End_Date = iif(equals(toString(CIN_End_Date), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), CIN_End_Date)) ~> DerivedColumn1\nDerivedColumn1 filter(and(\r\n    equals(PlanType, 'FP'),\r\n    and(notEquals(CIN_Status, 'Z'),\r\n        and(not(isNull(CIN_Start_Date)),\r\n            not(isNull(CIN_End_Date))\r\n            )\r\n        )\r\n)) ~> Filter2\nIcsRefer select(mapColumn(\n\t\tICSReferralID,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 filter(isNull(EndDate)) ~> Filter3\nFilter2, Filter3 join(ReferralID == ICSReferralID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsRefer\nIsPerson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nJoinIcsRefer, Select3 join(toInteger(Select1@PersonID) == Select3@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nJoinIsPerson aggregate(groupBy(UniqueRecord,\n\t\tSelect1@PersonID,\n\t\tCIN_Status,\n\t\tCIN_Start_Date,\n\t\tCIN_End_Date),\n\tAuditDate = max(AuditDate)) ~> GroupByCININST\nGroupByCININST, Select3 join(toInteger(GroupByCININST@PersonID) == Select3@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson1\nJoinIsPerson1, Pup join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nJoinPup derive(CHILDREN_IN_NEED = 'CHILDREN_IN_NEED') ~> CINColumn\nCINColumn, TblEvTyp join(CHILDREN_IN_NEED == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEvTyp, TblEv join(UniqueRecord == toInteger(EventSourceKey)\n\t&& AuditDate == EventTransactionStartDate\n\t&& CIN_Start_Date == EventValidStartDate\n\t&& CIN_End_Date == EventValidEndDate\n\t&& TblEvTyp@EventTypeId == TblEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, TEMPSCHOOLATT join(Pup@PupilId == TEMPSCHOOLATT@PupilId\n\t&& toDate(TblEv@EventValidStartDate) >= toDate(TEMPSCHOOLATT@EventValidStartDate)\n\t&& toDate(TblEv@EventValidEndDate) <= toDate(TEMPSCHOOLATT@EventValidEndDate),\n\tjoinType:'inner',\n\tbroadcast: 'left')~> JoinTmpSchoolAtt\nJoinTmpSchoolAtt derive(InstitutionId = coalesce(InstitutionId, -1),\n\t\tEventId = coalesce(EventId, -1),\n\t\tEventTypeId = coalesce(TblEvTyp@EventTypeId, 0),\n\t\tTRNS_END_DT = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tSRC_ID = 3,\n\t\tInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tROW_INST_DT = currentTimestamp(),\n\t\tINST_CNT = iif(or(isNull(InstitutionId), isNull(EventId)), toLong(random(100)),iif(or(isNull(InstitutionId), isNull(EventId)), toLong(random(100)), toLong(0)))) ~> DerivedColumn2\nDerivedColumn2 window(over(EventId),\n\tasc(Pup@PupilId, true),\n\tasc(EventId, true),\n\tasc(InstitutionId, true),\n\tasc(FormRank, true),\n\tFilter_School_Rank = count(1)) ~> Window1\nWindow1 aggregate(groupBy(InstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tTRNS_END_DT,\n\t\tEventTransactionStartDate,\n\t\tSRC_ID,\n\t\tInstitutionDeleted,\n\t\tTblEv@EventValidStartDate,\n\t\tTblEv@EventValidEndDate,\n\t\tROW_INST_DT,\n\t\tINST_CNT,\n\t\tFilter_School_Rank),\n\tCountAll = count(1)) ~> SelectDistinct\nSelectDistinct select(mapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate = TRNS_END_DT,\n\t\tEventToInstitutionTransactionStartDate = EventTransactionStartDate,\n\t\tEventToInstitutionSourceId = SRC_ID,\n\t\tEventToInstitutionDeleted = InstitutionDeleted,\n\t\tEventToInstitutionValidStartDate = EventValidStartDate,\n\t\tEventToInstitutionValidEndDate = EventValidEndDate,\n\t\tEventToInstitutionRowInsertedDate = ROW_INST_DT,\n\t\tEventToInstitutionCounter = INST_CNT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nAggregate1 alterRow(insertIf(true())) ~> AlterRow1\nRenameCols aggregate(groupBy(InstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionCounter),\n\tEventToInstitutionTransactionEndDate = max(EventToInstitutionTransactionEndDate),\n\t\tEventToInstitutionSourceId = max(EventToInstitutionSourceId),\n\t\tEventToInstitutionDeleted = max(EventToInstitutionDeleted),\n\t\tEventToInstitutionValidEndDate = max(EventToInstitutionValidEndDate),\n\t\tEventToInstitutionRowInsertedDate = max(EventToInstitutionRowInsertedDate)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t)) ~> EvToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]",
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsplacement"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsperiodcare"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icslegalorders"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv1"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp2"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "TblEvToInst"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "EvToInst"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Joinicsperiodcare"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Joinicslegalorders"
						},
						{
							"name": "Joinwfpicklistitem"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "Filter4CLA"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "Select5"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "JoinTblEvTyp"
						},
						{
							"name": "JoinEvToPup"
						},
						{
							"name": "JoinEvToInst"
						},
						{
							"name": "DenseRank"
						},
						{
							"name": "TMPSCHOOLATT"
						},
						{
							"name": "JoinTmpSchAtt"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "FilterSchoolRank"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Select8"
						}
					],
					"script": "source(output(\n\t\tPlacementID as integer,\n\t\tPersonID as integer,\n\t\tPlacementCode as string,\n\t\tPostCode as string,\n\t\tReason as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAddrID as string,\n\t\tAddr as string,\n\t\tTelephone as string,\n\t\tPlacementLength as integer,\n\t\tMainCarerID as integer,\n\t\tHideInfo as string,\n\t\tHideName as string,\n\t\tHideAddress as string,\n\t\tHideRelChild as string,\n\t\tOutHoursName as string,\n\t\tOutHoursPhone as string,\n\t\tEndDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tPlacementType as string,\n\t\tOtherType as string,\n\t\tVersion as integer,\n\t\tFromBla as string,\n\t\tEndPrevious as string,\n\t\tAddrHistoID as integer,\n\t\tPeriodID as integer,\n\t\tPDistance as string,\n\t\tRelationID as integer,\n\t\tRelationID2 as integer,\n\t\tRelationID3 as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tFosterID as integer,\n\t\tLiveDate as timestamp,\n\t\tDeptID as string,\n\t\tPlacementProvider as string,\n\t\tPlacementLocation as string,\n\t\tPlacementChangeReason as string,\n\t\tEmergencyCarerName as string,\n\t\tEmergencyAddress as string,\n\t\tEndReason as string,\n\t\tAdoptionMarkerID as integer,\n\t\tPre_LPG_AddressKey as string,\n\t\tOfstedPlacementType as string,\n\t\tDecisionAchieved as string,\n\t\tDecisionAchievedComments as string,\n\t\tFFAIsPlanDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsplacement') ~> Icsplacement\nsource(output(\n\t\tPeriodID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tEndReason as string,\n\t\tCinCode as string,\n\t\tReasonCode as string,\n\t\tSyncFlag as string,\n\t\tACDetails as string,\n\t\tACDuration as string,\n\t\tNotes as string,\n\t\tACAccommodation as string,\n\t\tACAccommOther as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tLiveDate as timestamp,\n\t\tAdoptNumber as string,\n\t\tAdoptGender as string,\n\t\tAdoptLegalStatus as string,\n\t\tAdoptFromFoster as string,\n\t\tDateCancelled as timestamp,\n\t\tAdoptBestInterests as timestamp,\n\t\tAdoptAgree as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsperiodcare') ~> Icsperiodcare\nsource(output(\n\t\tOrderID as integer,\n\t\tStartDate as timestamp,\n\t\tCourt as string,\n\t\tPersonID as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLegalStatus as string,\n\t\tExpDate as timestamp,\n\t\tComments as string,\n\t\tEndDate as timestamp,\n\t\tPeriodID as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tLiveDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icslegalorders') ~> Icslegalorders\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv1\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp2\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToPup\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToInst\nIcsplacement select(mapColumn(\n\t\tAuditDate,\n\t\tPeriodID,\n\t\tPlacementID,\n\t\tLiveDate,\n\t\tPlacementCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nIcsperiodcare select(mapColumn(\n\t\tCinCode,\n\t\tPoCStart = StartDate,\n\t\tPoCEnd = EndDate,\n\t\tPeriodID,\n\t\tLiveDate,\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1, Filter1 join(Select1@PeriodID == Select2@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinicsperiodcare\nSelect2 filter(not(isNull(LiveDate))) ~> Filter1\nIcslegalorders select(mapColumn(\n\t\tPeriodID,\n\t\tLegalStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 filter(notEquals(LegalStatus, 'RESP75+')) ~> Filter2\nJoinicsperiodcare, Filter2 join(Select2@PeriodID == Select3@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinicslegalorders\nJoinicslegalorders, Filter3 join(LegalStatus == code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfpicklistitem\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 filter(equals(pickid, 'ICSLegalStatus')) ~> Filter3\nJoinwfpicklistitem derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tPoCEnd = coalesce(PoCEnd, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(PlacementID,\n\t\tPersonID,\n\t\tPoCStart,\n\t\tPoCEnd,\n\t\tCinCode,\n\t\tPlacementCode,\n\t\tSelect1@LiveDate),\n\tCountAll = count(1)) ~> GroupBy\nGroupBy filter(and(\n    not(isNull(LiveDate)),\n    not(like(PlacementCode, 'T%'))\n)) ~> Filter4CLA\nFilter4CLA, Select5 join(GroupBy@PersonID == Select5@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nJoinIsperson, Select6 join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nJoinPup, Select7 join(PlacementID == toInteger(EventSourceKey)\n\t&& toDate(PoCStart) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, Filter5 join(Select7@EventTypeId == Select8@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nSelect8 filter(equals(EventTypeDescription, 'CHILDREN_IN_CARE')) ~> Filter5\nTblEvTyp2 filter(and(\n    equals(EventTypeGroup, 'PUPIL_EVENT'),\n    equals(EventTypeDescription, 'SCHOOL_TRANSFER')\n)) ~> Filter6\nTblEv1, Filter6 join(TblEv1@EventTypeId == TblEvTyp2@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTblEvTyp\nJoinTblEvTyp, TblEvToPup join(TblEv1@EventId == TblEvToPup@EventId\n\t&& TblEvTyp2@EventTypeId == TblEvToPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToPup\nJoinEvToPup, TblEvToInst join(TblEv1@EventId == TblEvToInst@EventId\n\t&& TblEvTyp2@EventTypeId == TblEvToInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToInst\nJoinEvToInst window(over(PupilId),\n\tasc(InstitutionId, true),\n\tdesc(EventValidEndDate, true),\n\tdesc(EventValidStartDate, true),\n\tFormRank = count(1)) ~> DenseRank\nDenseRank aggregate(groupBy(PupilId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tInstitutionId,\n\t\tFormRank),\n\tCountAll = count(1)) ~> TMPSCHOOLATT\nJoinEvTyp, TMPSCHOOLATT join(Select6@PupilId == TMPSCHOOLATT@PupilId\n\t&& toDate(Select7@EventValidStartDate) >= toDate(TMPSCHOOLATT@EventValidStartDate)\n\t&& toDate(Select7@EventValidEndDate) <= toDate(TMPSCHOOLATT@EventValidEndDate),\n\tjoinType:'inner',\n\tbroadcast: 'both')~> JoinTmpSchAtt\nFilterSchoolRank aggregate(groupBy(InstitutionId,\n\t\tEventId,\n\t\tSelect8@EventTypeId,\n\t\tEventTransactionStartDate,\n\t\tSelect7@EventValidStartDate,\n\t\tINST_CNT),\n\tEventTransactionEndDate = max(EventTransactionEndDate),\n\t\tEventSourceId = max(SRC_ID),\n\t\tInstitutionDeleted = max(InstitutionDeleted),\n\t\tROW_INST_DT = max(ROW_INST_DT),\n\t\tEventValidEndDate = max(TMPSCHOOLATT@EventValidEndDate),\n\t\tFilter_School_Rank = max(Filter_School_Rank)) ~> Aggregate1\nJoinTmpSchAtt derive(SRC_ID = 3,\n\t\tInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tROW_INST_DT = currentTimestamp(),\n\t\tINST_CNT = iif(or(or(equals(InstitutionId,0),equals(InstitutionId,-1)),isNull(InstitutionId)), toLong(random(100)),\r\n    iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)), toLong(0))\r\n\r\n)) ~> AddCols\nAddCols window(over(EventId),\n\tasc(Select6@PupilId, true),\n\tasc(EventId, true),\n\tasc(InstitutionId, true),\n\tasc(FormRank, true),\n\tFilter_School_Rank = count(1)) ~> FilterSchoolRank\nFilter7 alterRow(upsertIf(true())) ~> AlterRow1\nAggregate1 filter(and (\r\n    equals(Filter_School_Rank, 1),\r\nnot(isNull(EventTransactionStartDate))\r\n)) ~> Filter7\nTblPupil select(mapColumn(\n\t\tPupilId,\n\t\tPupilUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nTblEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nTblEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeDescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','EventId','EventTypeId','EventToInstitutionTransactionStartDate','EventToInstitutionValidStartDate','EventToInstitutionCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate = EventTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate = EventTransactionStartDate,\n\t\tEventToInstitutionSourceId = EventSourceId,\n\t\tEventToInstitutionDeleted = InstitutionDeleted,\n\t\tEventToInstitutionValidStartDate = EventValidStartDate,\n\t\tEventToInstitutionValidEndDate = EventValidEndDate,\n\t\tEventToInstitutionRowInsertedDate = ROW_INST_DT,\n\t\tEventToInstitutionCounter = INST_CNT\n\t)) ~> EvToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToInstitution7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/7_CPC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentType"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentArchive"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceTblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "sourceEvStsTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsPerson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "sourcePup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "sourceEvtoPup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "sourceEvtoInst"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "sinkEvToInst"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectAss"
						},
						{
							"name": "SelectAssTyp"
						},
						{
							"name": "JoinAss"
						},
						{
							"name": "JoinPp"
						},
						{
							"name": "SelectPp"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "FilterEvTyp"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "SelectAssArchive"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "SelectEvStsTyp"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "SelectPup"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinTmp1"
						},
						{
							"name": "FilterEvTypTmp"
						},
						{
							"name": "JoinTmp2"
						},
						{
							"name": "JoinTmp3"
						},
						{
							"name": "DenseRankTmp"
						},
						{
							"name": "AggregateTmp"
						},
						{
							"name": "JoinTmp"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate3"
						}
					],
					"script": "source(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentType\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tArchiveID as integer,\n\t\tFormNo as integer,\n\t\tArchType as string,\n\t\tFormData as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tControlID as string,\n\t\tRenderInline as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmentarchive') ~> sourceWfAssessmentArchive\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblEv\nsource(output(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvStsTyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsPerson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourcePup\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvtoPup\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvtoInst\nsourceWfAssessmentType filter(and(\r\n    equals(Description, 'CP Conference Outcomes and Outline Plan'),\r\n    not(like('XX%', FormType))\r\n)) ~> Filter1\nsourceWfAssessment filter(notEquals(Status, 'X')) ~> Filter2\nFilter2 select(mapColumn(\n\t\tTemplateID,\n\t\tFormNo,\n\t\tMarkerID,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tCompletionDate,\n\t\tFormLinkKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAss\nFilter1 select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssTyp\nSelectAssTyp, SelectAss join(SelectAssTyp@TemplateID == SelectAss@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAss\nJoinAss, SelectPp join(SelectAss@MarkerID == SelectPp@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPp\nsourcePpMark select(mapColumn(\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPp\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup,\n\t\tEventTypeSubGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nSelectEvTyp filter(isNull(EventTypeSubGroup)) ~> FilterEvTyp\nsourceWfAssessmentArchive filter(equals(ControlID, 'IDInitDecisionsValidate')) ~> Filter3\nFilter3 select(mapColumn(\n\t\tFormNo,\n\t\tFormData\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssArchive\nsourceTblEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceKey,\n\t\tEventSourceId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nFilter4 select(mapColumn(\n\t\tEventStatusTypeId,\n\t\tEventStatusTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvStsTyp\nsourceEvStsTyp filter(equals(EventStatusTypeGroup, 'CHILD_PROTECTION_CONFERENCE')) ~> Filter4\nJoinPp, SelectIsPerson join(toInteger(FormLinkKey) == PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceIsPerson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nsourcePup select(mapColumn(\n\t\tPupilUPN,\n\t\tPupilId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPup\nFilter5 aggregate(groupBy(FormNo,\n\t\tSelectAss@TemplateID,\n\t\tUPN),\n\tCountAll = count(1)) ~> Aggregate1\nJoinIsPerson filter(not(isNull(UPN))) ~> Filter5\nAggregate1, SelectPup join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nJoinPup, SelectEv join(FormNo == toInteger(EventSourceKey),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nDerivedColumn1, FilterEvTyp join(CHILD_PROTECTION_CONFERENCE == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEv derive(CHILD_PROTECTION_CONFERENCE = 'CHILD_PROTECTION_CONFERENCE') ~> DerivedColumn1\nsourceTblEv, FilterEvTypTmp join(sourceTblEv@EventTypeId == sourceEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTmp1\nsourceEvTyp filter(and(\n    equals(EventTypeGroup, 'PUPIL_EVENT'),\n    equals(EventTypeDescription, 'SCHOOL_TRANSFER')\n)) ~> FilterEvTypTmp\nJoinTmp1, sourceEvtoPup join(sourceTblEv@EventId == sourceEvtoPup@EventId\n\t&& sourceEvTyp@EventTypeId == sourceEvtoPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTmp2\nJoinTmp2, sourceEvtoInst join(sourceTblEv@EventId == sourceEvtoInst@EventId\n\t&& sourceTblEv@EventTypeId == sourceEvtoInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTmp3\nJoinTmp3 window(over(PupilId),\n\tdesc(EventValidEndDate, true),\n\tdesc(EventValidStartDate, true),\n\tasc(InstitutionId, true),\n\tFormRank = count(1)) ~> DenseRankTmp\nDenseRankTmp aggregate(groupBy(PupilId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tInstitutionId,\n\t\tFormRank),\n\tCountAll = count(1)) ~> AggregateTmp\nJoinEvTyp, AggregateTmp join(SelectPup@PupilId == AggregateTmp@PupilId\n\t&& toDate(SelectEv@EventValidStartDate) >= toDate(AggregateTmp@EventValidStartDate)\n\t&& toDate(SelectEv@EventValidEndDate) <= toDate(AggregateTmp@EventValidEndDate),\n\tjoinType:'inner',\n\tbroadcast: 'left')~> JoinTmp\nJoinTmp select(mapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId = SelectEvTyp@EventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceId,\n\t\tEventValidStartDate = SelectEv@EventValidStartDate,\n\t\tEventValidEndDate = SelectEv@EventValidEndDate,\n\t\tPupilId = SelectPup@PupilId,\n\t\tFormRank\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(EventToInstitutionDeleted = toTimestamp('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn2\nDerivedColumn2 window(over(EventId),\n\tasc(PupilId, true),\n\tasc(EventId, true),\n\tasc(InstitutionId, true),\n\tasc(FormRank, true),\n\tFilter_School_Rank = count(1)) ~> Window1\nWindow1 filter(equals(toInteger(Filter_School_Rank), 1)) ~> Filter6\nFilter6 aggregate(groupBy(EventId,\n\t\tEventTypeId,\n\t\tInstitutionId,\n\t\tEventTransactionStartDate,\n\t\tEventValidStartDate),\n\tEventTransactionEndDate = max(EventTransactionEndDate),\n\t\tEventSourceId = max(EventSourceId),\n\t\tEventToInstitutionDeleted = max(EventToInstitutionDeleted),\n\t\tEventValidEndDate = max(EventValidEndDate)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tInstitutionId,\n\t\tEventToInstitutionTransactionEndDate = EventTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate = EventTransactionStartDate,\n\t\tEventToInstitutionSourceId = EventSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate = EventValidStartDate,\n\t\tEventToInstitutionValidEndDate = EventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 derive(InstitutionId = coalesce(InstitutionId, -1),\n\t\tEventToInstitutionRowInsertedDate = currentTimestamp(),\n\t\tEventToInstitutionCounter = iif(or(or(equals(InstitutionId,0),equals(InstitutionId,-1)),isNull(InstitutionId)), toLong(random(100)),\r\n    iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)), toLong(0))\r\n\r\n)) ~> DerivedColumn3\nAggregate3 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn3 aggregate(groupBy(EventId,\n\t\tEventTypeId,\n\t\tInstitutionId,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionCounter),\n\tEventToInstitutionTransactionEndDate = max(EventToInstitutionTransactionEndDate),\n\t\tEventToInstitutionSourceId = max(EventToInstitutionSourceId),\n\t\tEventToInstitutionDeleted = max(EventToInstitutionDeleted),\n\t\tEventToInstitutionValidEndDate = max(EventToInstitutionValidEndDate),\n\t\tEventToInstitutionRowInsertedDate = max(EventToInstitutionRowInsertedDate)) ~> Aggregate3\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','EventId','EventTypeId','EventToInstitutionTransactionStartDate','EventToInstitutionValidStartDate','EventToInstitutionCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToInstitutionTransactionEndDate,\n\t\tEventToInstitutionTransactionStartDate,\n\t\tEventToInstitutionSourceId,\n\t\tEventToInstitutionDeleted,\n\t\tEventToInstitutionValidStartDate,\n\t\tEventToInstitutionValidEndDate,\n\t\tEventToInstitutionRowInsertedDate,\n\t\tEventToInstitutionCounter\n\t)) ~> sinkEvToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToMetric')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "ExclusionsSource"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "StudHistSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "EvSource"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventMetricType",
								"type": "DatasetReference"
							},
							"name": "EvMtrTypSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToMetric",
								"type": "DatasetReference"
							},
							"name": "SinkEv"
						}
					],
					"transformations": [
						{
							"name": "GroupByDistinctRows"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Join1"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tLEA_DECISION as string,\n\t\tEXCL_ID as decimal(38,18),\n\t\tA_YEAR as string,\n\t\tTERM as string,\n\t\tBASE_ID as decimal(38,18),\n\t\tCATEGORY as string,\n\t\tREASON as string,\n\t\tSTART_DATE as timestamp,\n\t\tEXCL_DAYS as decimal(38,18),\n\t\tSTUD_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tEXCL_MEMO as decimal(38,18),\n\t\tRESULT as string,\n\t\tNO_SUP_OFF as decimal(38,18),\n\t\tGOV_CON_DT as timestamp,\n\t\tOFF_ATTEND as decimal(38,18),\n\t\tUPHELD as string,\n\t\tAPPEAL_DT as timestamp,\n\t\tMEETING_DT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tSCH_APPEAL_RECVD as string,\n\t\tAM_PM as string,\n\t\tREFERRED_DC as string,\n\t\tDC_MEETING_DT as timestamp,\n\t\tDC_DECISION as string,\n\t\tREINSTATE_DATE as timestamp,\n\t\tREINSTATE_REASON as string,\n\t\tDATE_OFF_ROLL as timestamp,\n\t\tPASTORAL_RECD as string,\n\t\tEND_MONITOR_DATE as timestamp,\n\t\tMOTIVATION as string,\n\t\tSTAGE_WHEN_EXCLUDED as string,\n\t\tSTATUS_WHEN_EXCLUDED as string,\n\t\tSITE_ID as decimal(38,18),\n\t\tEND_AM_PM as string,\n\t\tCREATED_DATE as timestamp,\n\t\tCREATED_BY as decimal(38,18),\n\t\tNCY_WHEN_EXCLUDED as decimal(38,18),\n\t\tSEN_STAGE_WHEN_EXCLUDED as string,\n\t\tSIXTH_DAY as timestamp,\n\t\tINCARE_WHEN_EXCLUDED as string,\n\t\tADDRESS_ID as decimal(38,18),\n\t\tFSM as string,\n\t\tREFERRED_APPEALS as string,\n\t\tACL as string,\n\t\tEXCL_LUNCH_LENGTH as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tSENEXPERT_REVIEW as string,\n\t\tEXC_DAYS_OS as decimal(38,18),\n\t\tVERIFIEDDATE as timestamp,\n\t\tVERIFIEDBY as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/exclusions') ~> ExclusionsSource\nsource(output(\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tBASE_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tHIST_AMEND as timestamp,\n\t\tHIST_TIME as string,\n\t\tHIST_USER as string,\n\t\tREG_BASE as string,\n\t\tRESIDENCE as string,\n\t\tRJOIN as string,\n\t\tRLEAVE as string,\n\t\tSTART_DATE as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tHIST_ID as decimal(38,18),\n\t\tD_PER_WEEK as decimal(38,18),\n\t\tREG2_BASE as string,\n\t\tREGTYPE as string,\n\t\tBOARDER as string,\n\t\tGUEST as string,\n\t\tDESTINATION as string,\n\t\tDESTINATION_LAST_UPDT as timestamp,\n\t\tDESTINATION_UPDATED_BY as decimal(38,18),\n\t\tSITE_ID as decimal(38,18),\n\t\tSCHOOL_HISTORY_TYPE as string,\n\t\tGROUNDS_REMOVAL as string,\n\t\tCML_DESTINATION as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/stud_hist') ~> StudHistSource\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvSource\nsource(output(\n\t\tEventMetricTypeId as long,\n\t\tEventMetricTypeDescription as string,\n\t\tEventMetricTypeGroup as string,\n\t\tEventMetricTypeTransactionStartDate as timestamp,\n\t\tEventMetricTypeTransactionEndDate as timestamp,\n\t\tEventMetricTypeDeleted as timestamp,\n\t\tEventMetricTypeSourceId as integer,\n\t\tEventMetricTypeRowInsertedDate as timestamp,\n\t\tEventMetricTypeSubGroup as string,\n\t\tEventMetricTypeInternalCode as string,\n\t\tEventMetricTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvMtrTypSource\nExclusionsSource aggregate(groupBy(STUD_ID,\n\t\tEXCL_ID,\n\t\tEXCL_DAYS),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByDistinctRows\nJoin3 derive(EventToMetricTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToMetricValue = toDecimal(coalesce(EXCL_DAYS, -1)),\n\t\tEventToMetricSourceId = 2,\n\t\tEventToMetricDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToMetricRowInsertedDate = currentTimestamp(),\n\t\tEventToMetricTransactionStartDate = coalesce(toDate(toString(LAST_UPDT, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventId = coalesce(EventId, -1),\n\t\tEventToMetricCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)),random(100),toLong(0)),\n\t\tEventToMetricValidStartDate = coalesce(toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"), toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToMetricValidEndDate = coalesce(toDate(toString(EventValidEndDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"), toDate('31-12-9999','dd-MM-yyyy'))) ~> AddFixedCols\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nSelect5, Select3 union(byName: true)~> Union1\nStudHistSource aggregate(groupBy(HIST_ID,\n\t\tD_PER_WEEK,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tHIST_AMEND),\n\tLAST_UPDT = max(LAST_UPDT)) ~> Aggregate1\nDerivedColumn1, DerivedColumn3 join(HIST_ID == EventSourceKey\n\t&& START_DATE == toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEv\nAggregate1 derive(SCHOOL_TRANSFER = 'SCHOOL_TRANSFER',\n\t\tPUPIL_EVENT = 'PUPIL_EVENT',\n\t\tPUPIL_SCHOOL_DAYS = 'PUPIL_SCHOOL_DAYS_PER_WEEK',\n\t\tSTART_DATE = toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\t\tHIST_ID = toString(toInteger(HIST_ID))) ~> DerivedColumn1\nDerivedColumn2 select(mapColumn(\n\t\tEventId,\n\t\tEventMetricTypeId,\n\t\tEventToMetricTransactionEndDate,\n\t\tEventToMetricSourceId,\n\t\tEventToMetricValue,\n\t\tEventToMetricTransactionStartDate,\n\t\tEventToMetricValidStartDate,\n\t\tEventToMetricValidEndDate,\n\t\tEventToMetricDeleted,\n\t\tEventToMetricRowInsertedDate,\n\t\tEventToMetricCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nJoin1 derive(EventToMetricTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventId = coalesce(EventId, -1),\n\t\tEventMetricTypeId = coalesce(EventMetricTypeId, -1),\n\t\tEventToMetricSourceId = 2,\n\t\tEventToMetricValue = toDecimal(coalesce(D_PER_WEEK, -1)),\n\t\tEventToMetricTransactionStartDate = coalesce(toDate(toString(LAST_UPDT, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToMetricValidStartDate = coalesce(toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToMetricValidEndDate = coalesce(toDate(toString(END_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),          toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToMetricDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToMetricRowInsertedDate = currentTimestamp(),\n\t\tEventToMetricCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)),random(100),toLong(0))) ~> DerivedColumn2\nAddFixedCols select(mapColumn(\n\t\tEventToMetricTransactionEndDate,\n\t\tEventToMetricValue,\n\t\tEventToMetricSourceId,\n\t\tEventToMetricDeleted,\n\t\tEventToMetricRowInsertedDate,\n\t\tEventToMetricTransactionStartDate,\n\t\tEventToMetricCounter,\n\t\tEventMetricTypeId,\n\t\tEventToMetricValidStartDate,\n\t\tEventToMetricValidEndDate,\n\t\tEventId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter4, EvMtrTypSource join(PUPIL_SCHOOL_DAYS == EventMetricTypeInternalCode\n\t&& PUPIL_EVENT == EventMetricTypeGroup\n\t&& SCHOOL_TRANSFER == EventMetricTypeDescription,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nEvSource derive(EventValidStartDate = toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\")) ~> DerivedColumn3\nGroupByDistinctRows derive(STUDENT_EXCLUSION_METRIC = 'STUDENT_EXCLUSION_DAYS',\n\t\tEXCLUSION_TYPE = 'STUDENT_EXCLUSION',\n\t\tEND_OF_TIME = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEXCL_ID = toString(toInteger(EXCL_ID))) ~> DerivedColumn4\nDerivedColumn4, EvSource join(EXCL_ID == EventSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nFilter3, DerivedColumn5 join(STUDENT_EXCLUSION_METRIC == EventMetricTypeDescription\n\t&& EXCLUSION_TYPE == EventMetricTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nEvMtrTypSource derive(EventMetricTypeTransactionEndDate = toDate(toString(EventMetricTypeTransactionEndDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\t\tEventMetricTypeDeleted = toDate(toString(EventMetricTypeDeleted, \"dd-MM-yyyy\"), \"dd-MM-yyyy\")) ~> DerivedColumn5\nJoin2 filter(and(\r\n    notEquals(EventId, -1),\r\n    notEquals(isNull(EventId), true())\r\n)) ~> Filter3\nJoinEv filter(and(\r\n    notEquals(EventId, -1),\r\n    notEquals(isNull(EventId), true())\r\n)) ~> Filter4\nUnion1 filter(equals(isNull(EventToMetricValidEndDate), false())) ~> Filter5\nFilter5 aggregate(groupBy(EventId,\n\t\tEventToMetricCounter,\n\t\tEventMetricTypeId,\n\t\tEventToMetricTransactionStartDate,\n\t\tEventToMetricValidEndDate),\n\tEventToMetricTransactionEndDate = max(EventToMetricTransactionEndDate),\n\t\tEventToMetricValue = max(EventToMetricValue),\n\t\tEventToMetricSourceId = max(EventToMetricSourceId),\n\t\tEventToMetricDeleted = max(EventToMetricDeleted),\n\t\tEventToMetricRowInsertedDate = max(EventToMetricRowInsertedDate),\n\t\tEventToMetricValidStartDate = max(EventToMetricValidStartDate)) ~> Aggregate2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventToMetricTransactionEndDate as timestamp,\n\t\tEventToMetricValue as decimal(12,9),\n\t\tEventMetricTypeId as long,\n\t\tEventToMetricTransactionStartDate as timestamp,\n\t\tEventToMetricValidEndDate as timestamp,\n\t\tEventToMetricValidStartDate as timestamp,\n\t\tEventToMetricSourceId as integer,\n\t\tEventToMetricDeleted as timestamp,\n\t\tEventToMetricRowInsertedDate as timestamp,\n\t\tEventId as long,\n\t\tEventToMetricCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventMetricTypeId','EventToMetricCounter','EventToMetricTransactionStartDate','EventToMetricValidEndDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventToMetricTransactionEndDate,\n\t\tEventToMetricValue,\n\t\tEventMetricTypeId,\n\t\tEventToMetricTransactionStartDate,\n\t\tEventToMetricValidEndDate,\n\t\tEventToMetricValidStartDate,\n\t\tEventToMetricSourceId,\n\t\tEventToMetricDeleted,\n\t\tEventToMetricRowInsertedDate,\n\t\tEventId,\n\t\tEventToMetricCounter\n\t)) ~> SinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventMetricType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToMetric')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Exclusions"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "StudHist"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "EvToTyp"
						}
					],
					"transformations": [
						{
							"name": "InnerJoinEv"
						},
						{
							"name": "AddFixedAndDerivedCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "GroupByMaxLastDT"
						},
						{
							"name": "LeftJoinPup"
						},
						{
							"name": "SelectFinalCols"
						},
						{
							"name": "SelectColsEv"
						},
						{
							"name": "CastExclId"
						},
						{
							"name": "SelectColsPup"
						},
						{
							"name": "FilterNotNullPupId"
						},
						{
							"name": "GroupByLastDate"
						},
						{
							"name": "JoinOnEv"
						},
						{
							"name": "CastHistId"
						},
						{
							"name": "LeftJoinOnPup"
						},
						{
							"name": "LeftJoinEvTyp"
						},
						{
							"name": "SelectColsEvTyp"
						},
						{
							"name": "AddFixed"
						},
						{
							"name": "AddFixedColsHist"
						},
						{
							"name": "SelectColsHist"
						},
						{
							"name": "UnionExclusionAndHist"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tLEA_DECISION as string,\n\t\tEXCL_ID as decimal(38,18),\n\t\tA_YEAR as string,\n\t\tTERM as string,\n\t\tBASE_ID as decimal(38,18),\n\t\tCATEGORY as string,\n\t\tREASON as string,\n\t\tSTART_DATE as timestamp,\n\t\tEXCL_DAYS as decimal(38,18),\n\t\tSTUD_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tEXCL_MEMO as decimal(38,18),\n\t\tRESULT as string,\n\t\tNO_SUP_OFF as decimal(38,18),\n\t\tGOV_CON_DT as timestamp,\n\t\tOFF_ATTEND as decimal(38,18),\n\t\tUPHELD as string,\n\t\tAPPEAL_DT as timestamp,\n\t\tMEETING_DT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tSCH_APPEAL_RECVD as string,\n\t\tAM_PM as string,\n\t\tREFERRED_DC as string,\n\t\tDC_MEETING_DT as timestamp,\n\t\tDC_DECISION as string,\n\t\tREINSTATE_DATE as timestamp,\n\t\tREINSTATE_REASON as string,\n\t\tDATE_OFF_ROLL as timestamp,\n\t\tPASTORAL_RECD as string,\n\t\tEND_MONITOR_DATE as timestamp,\n\t\tMOTIVATION as string,\n\t\tSTAGE_WHEN_EXCLUDED as string,\n\t\tSTATUS_WHEN_EXCLUDED as string,\n\t\tSITE_ID as decimal(38,18),\n\t\tEND_AM_PM as string,\n\t\tCREATED_DATE as timestamp,\n\t\tCREATED_BY as decimal(38,18),\n\t\tNCY_WHEN_EXCLUDED as decimal(38,18),\n\t\tSEN_STAGE_WHEN_EXCLUDED as string,\n\t\tSIXTH_DAY as timestamp,\n\t\tINCARE_WHEN_EXCLUDED as string,\n\t\tADDRESS_ID as decimal(38,18),\n\t\tFSM as string,\n\t\tREFERRED_APPEALS as string,\n\t\tACL as string,\n\t\tEXCL_LUNCH_LENGTH as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tSENEXPERT_REVIEW as string,\n\t\tEXC_DAYS_OS as decimal(38,18),\n\t\tVERIFIEDDATE as timestamp,\n\t\tVERIFIEDBY as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/exclusions') ~> Exclusions\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tBASE_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tHIST_AMEND as timestamp,\n\t\tHIST_TIME as string,\n\t\tHIST_USER as string,\n\t\tREG_BASE as string,\n\t\tRESIDENCE as string,\n\t\tRJOIN as string,\n\t\tRLEAVE as string,\n\t\tSTART_DATE as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tHIST_ID as decimal(38,18),\n\t\tD_PER_WEEK as decimal(38,18),\n\t\tREG2_BASE as string,\n\t\tREGTYPE as string,\n\t\tBOARDER as string,\n\t\tGUEST as string,\n\t\tDESTINATION as string,\n\t\tDESTINATION_LAST_UPDT as timestamp,\n\t\tDESTINATION_UPDATED_BY as decimal(38,18),\n\t\tSITE_ID as decimal(38,18),\n\t\tSCHOOL_HISTORY_TYPE as string,\n\t\tGROUNDS_REMOVAL as string,\n\t\tCML_DESTINATION as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/stud_hist') ~> StudHist\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nCastExclId, SelectColsEv join(EXCL_ID == EventSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> InnerJoinEv\nFilterNotNullPupId derive(PupilId = coalesce(PupilId,-1),\n\t\tEventId = coalesce(EventId,-1),\n\t\tEventToPupilTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeId = EventTypeId,\n\t\tEventToPupilSourceId = 2,\n\t\tEventToPupilTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilValidStartDate = coalesce(EventValidStartDate,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilValidEndDate = coalesce(EventValidEndDate,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),equals(PupilId,0)),1,0)) ~> AddFixedAndDerivedCols\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nExclusions aggregate(groupBy(EXCL_DAYS,\n\t\tSTUD_ID,\n\t\tEXCL_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByMaxLastDT\nInnerJoinEv, SelectColsPup join(STUD_ID == PupilSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinPup\nAddFixedAndDerivedCols select(mapColumn(\n\t\tEventId,\n\t\tPupilId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalCols\nTblEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsEv\nGroupByMaxLastDT derive(EXCL_ID = toString(toInteger(EXCL_ID))) ~> CastExclId\nTblPupil select(mapColumn(\n\t\tPupilId,\n\t\tPupilSourceKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsPup\nLeftJoinPup filter(not(isNull(PupilId))) ~> FilterNotNullPupId\nStudHist aggregate(groupBy(HIST_ID,\n\t\tD_PER_WEEK,\n\t\tHIST_AMEND,\n\t\tEND_DATE,\n\t\tSTUD_ID,\n\t\tSTART_DATE),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByLastDate\nCastHistId, TblEv join(HIST_ID == EventSourceKey\n\t&& toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\") == toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinOnEv\nGroupByLastDate derive(HIST_ID = toString(toInteger(HIST_ID))) ~> CastHistId\nJoinOnEv, SelectColsPup join(STUD_ID == PupilSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinOnPup\nAddFixed, SelectColsEvTyp join(SCHOOL_TRANSFER == EventTypeInternalCode\n\t&& PUPIL_EVENT == EventTypeGroup,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinEvTyp\nTblEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsEvTyp\nLeftJoinOnPup derive(SCHOOL_TRANSFER = \"SCHOOL_TRANSFER\",\n\t\tPUPIL_EVENT = \"PUPIL_EVENT\") ~> AddFixed\nFilter2 derive(PupilId = coalesce(PupilId,-1),\n\t\tEventId = EventId,\n\t\tEventToPupilTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeId = TblEv@EventTypeId,\n\t\tEventToPupilSourceId = 2,\n\t\tEventToPupilTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilValidStartDate = coalesce(START_DATE,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilValidEndDate = coalesce(END_DATE,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),equals(PupilId,0)),1,0)) ~> AddFixedColsHist\nAddFixedColsHist select(mapColumn(\n\t\tEventId,\n\t\tPupilId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsHist\nSelectFinalCols, SelectColsHist union(byName: true)~> UnionExclusionAndHist\nLeftJoinEvTyp filter(or(or(notEquals(EventId,1),notEquals(EventId,0)),not(isNull(EventId)))) ~> Filter1\nFilter1 filter(or(or(notEquals(PupilId,1),notEquals(PupilId,0)),not(isNull(PupilId)))) ~> Filter2\nUnionExclusionAndHist filter(and(\r\n    notEquals(EventId, -1),\r\n    notEquals(isNull(EventId), true())\r\n)) ~> Filter3\nFilter3 aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilCounter),\n\tEventToPupilTransactionEndDate = max(EventToPupilTransactionEndDate),\n\t\tEventToPupilSourceId = max(EventToPupilSourceId),\n\t\tEventToPupilValidEndDate = max(EventToPupilValidEndDate),\n\t\tEventToPupilRowInsertedDate = max(EventToPupilRowInsertedDate)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId','EventId','EventTypeId','EventToPupilValidStartDate','EventToPupilDeleted','EventToPupilCounter','EventToPupilTransactionStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> EvToTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ppmark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessmenttype"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						}
					],
					"transformations": [
						{
							"name": "JoinPpmark"
						},
						{
							"name": "JoinWfassessment"
						},
						{
							"name": "JoinWfassessmenttype"
						},
						{
							"name": "JoinTblEvTyp"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "JoinTblPupil"
						},
						{
							"name": "JoinTblEv"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "SelectRelevantCols3"
						},
						{
							"name": "SelectRelevantCols4"
						},
						{
							"name": "SelectRelevantCols5"
						},
						{
							"name": "SelectCols"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "ColumnValues"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> IcsRefer\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> Ppmark\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> Wfassessmenttype\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nSelectRelevantCols, Filter2 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1)),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPpmark\nJoinPpmark, Filter3 join(SelectRelevantCols2@MarkerID == SelectRelevantCols3@MarkerID\n\t&& toInteger(left(MainRef, instr(MainRef, '/')-1)) == toInteger(FormLinkKey),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessment\nJoinWfassessment, SelectRelevantCols4 join(SelectRelevantCols3@TemplateID == SelectRelevantCols4@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessmenttype\nJoinWfassessmenttype, Filter4 join(SelectRelevantCols3@TemplateID == toInteger(EventTypeInternalCode),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTblEvTyp\nJoinTblEvTyp, SelectRelevantCols5 join(SelectRelevantCols@PersonID == SelectRelevantCols5@PersonID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIsperson\nJoinIsperson, TblPupil join(trim(UPN) == trim(PupilUPN),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTblPupil\nJoinTblPupil, TblEv join(SelectRelevantCols3@FormNo == toInteger(EventSourceKey)\n\t&& TblEvTyp@EventTypeId == TblEv@EventTypeId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTblEv\nAggregate1 alterRow(insertIf(true())) ~> AlterRow1\nSelectRelevantCols2 filter(and(\r\n    equals(right(UnitRef, minus(length(UnitRef),instr(UnitRef, '/'))+1), '/com.liquidlogic.assessment.DBAssessment'),\r\n    notEquals(SubStatus, 'X')\r\n)) ~> Filter2\nSelectRelevantCols3 filter(and(notEquals(Status, 'X'),\n    in(['C','D','E'], Status))) ~> Filter3\nTblEvTyp filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_ASSESSMENT'),\r\n    notEquals(EventTypeInternalCode, 'PUPIL_ASSESSMENT')\r\n)) ~> Filter4\nIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nPpmark select(mapColumn(\n\t\tMainRef,\n\t\tUnitRef,\n\t\tSubStatus,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nWfassessment select(mapColumn(\n\t\tMarkerID,\n\t\tFormLinkKey,\n\t\tStatus,\n\t\tTemplateID,\n\t\tFormNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols3\nWfassessmenttype select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols4\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols5\nJoinTblEv select(mapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate = EventTransactionEndDate,\n\t\tEventTypeId = TblEvTyp@EventTypeId,\n\t\tEventToPupilTransactionStartDate = EventTransactionStartDate,\n\t\tEventToPupilValidStartDate = EventValidStartDate,\n\t\tEventToPupilValidEndDate = EventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCols\nColumnValues derive(EventToPupilSourceId = 3,\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)), toLong(random(100)),toLong(0))) ~> AddFixedCols\nSelectCols derive(PupilId = coalesce(PupilId, -1),\n\t\tEventId = coalesce(EventId,0),\n\t\tEventToPupilTransactionEndDate = coalesce(EventToPupilTransactionEndDate, (toTimestamp('31-12-9999','dd-MM-yyyy'))),\n\t\tEventTypeId = coalesce(EventTypeId,-1),\n\t\tEventToPupilTransactionStartDate = coalesce(EventToPupilTransactionStartDate, (toTimestamp('31-12-9999','dd-MM-yyyy'))),\n\t\tEventToPupilValidStartDate = coalesce(EventToPupilValidStartDate, (toTimestamp('31-12-9999','dd-MM-yyyy'))),\n\t\tEventToPupilValidEndDate = coalesce(EventToPupilValidEndDate, (toTimestamp('31-12-9999','dd-MM-yyyy')))) ~> ColumnValues\nAddFixedCols aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilCounter),\n\tEventToPupilTransactionEndDate = max(EventToPupilTransactionEndDate),\n\t\tEventToPupilValidEndDate = max(EventToPupilValidEndDate),\n\t\tEventToPupilSourceId = max(EventToPupilSourceId),\n\t\tEventToPupilRowInsertedDate = max(EventToPupilRowInsertedDate)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> TblEvToPup"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icscontact2"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ecafcontact"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						}
					],
					"transformations": [
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "SelectRelevantCols1"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "Joinwfassessment"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "SelectRelevantCols3"
						},
						{
							"name": "JoinIsperson1"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "JoinWfaasessment1"
						},
						{
							"name": "GroupBy1"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Union"
						},
						{
							"name": "JoinIsperson2"
						},
						{
							"name": "SelectRelevantCols4"
						},
						{
							"name": "SelectRelevantCols5"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "SelectRelevantCols6"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "JoinEvTyp1"
						},
						{
							"name": "JoinEvTyp2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "SelectRelevantCols7"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "SelectECAF"
						},
						{
							"name": "SelectICS"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tICSContactID as integer,\n\t\tPersonID as integer,\n\t\tReferralID as integer,\n\t\tStartDate as timestamp,\n\t\tContactDetails as string,\n\t\tFormNo as integer,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLinkedDate as timestamp,\n\t\tLinkedBy as string,\n\t\tMarkerID as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSourceType as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tKeyAgencyID as integer,\n\t\tSyncEvent as string,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tContactGroupID as integer,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string,\n\t\tExternalFormNo as integer,\n\t\tRecordedStaffHistoryID as integer,\n\t\tLinkedStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscontact2') ~> Icscontact2\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tECAFContactID as integer,\n\t\tPersonID as integer,\n\t\tEpisodeID as integer,\n\t\tContactGroupID as integer,\n\t\tFormNo as integer,\n\t\tStartDate as timestamp,\n\t\tSuggDate as timestamp,\n\t\tCreationDate as timestamp,\n\t\tMarkerID as integer,\n\t\tRecordedBy as string,\n\t\tRecordedByDept as string,\n\t\tLinkedBy as string,\n\t\tLinkedDate as timestamp,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tAnonymous as string,\n\t\tKeyAgencyID as integer,\n\t\tSysAgency as string,\n\t\tSysProfessional as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tFollowUp as string,\n\t\tContactType as string,\n\t\tContactMethod as string,\n\t\tSourceType as string,\n\t\tContactReason as string,\n\t\tContactReasonDesc as string,\n\t\tContactDetails as string,\n\t\tContactTopic as string,\n\t\tContactIssue as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tOutOfHours as string,\n\t\tEpisodeNeeds as string,\n\t\tPrimNeed as string,\n\t\tExternalFormNo as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ecafcontact') ~> Ecafcontact\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nIcscontact2 select(mapColumn(\n\t\tStartDate,\n\t\tPersonID,\n\t\tContactSourceKey = ICSContactID,\n\t\tSourceType,\n\t\tFormNo,\n\t\tAuditDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols1\nSelectRelevantCols, SelectRelevantCols1 join(SelectRelevantCols@PersonID == SelectRelevantCols1@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson\nJoinIsperson, Filter1 join(SelectRelevantCols@FormNo == SelectRelevantCols2@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfassessment\nWfassessment select(mapColumn(\n\t\tFormNo,\n\t\tFormType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nSelectRelevantCols2 filter(and(\r\n    equals(FormType, 'ICS/Contact'),\r\n    in(['C','D'], Status)\r\n)) ~> Filter1\nJoinwfassessment aggregate(groupBy(StartDate,\n\t\tSelectRelevantCols@PersonID,\n\t\tContactSourceKey,\n\t\tSourceType,\n\t\tFormType,\n\t\tAuditDate),\n\tCountAll = count(1)) ~> GroupBy\nGroupBy filter(notEquals(toString(StartDate), 'NULL')) ~> Filter2\nFilter2 derive(AuditDate = replace(toString(AuditDate), 'NULL', '9999-12-31 23:59:59.9999')) ~> DerivedColumn1\nEcafcontact select(mapColumn(\n\t\tStartDate,\n\t\tPersonID,\n\t\tContactSoureKey = ECAFContactID,\n\t\tSourceType,\n\t\tFormNo,\n\t\tAuditDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols3\nSelectRelevantCols3, SelectRelevantCols1 join(SelectRelevantCols3@PersonID == SelectRelevantCols1@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson1\nSelectRelevantCols2 filter(and(\r\n    equals(FormType, 'ECAF/Contact'),\r\n    in(['C','D'], Status)\r\n)) ~> Filter3\nJoinIsperson1, Filter3 join(SelectRelevantCols3@FormNo == SelectRelevantCols2@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfaasessment1\nJoinWfaasessment1 aggregate(groupBy(StartDate,\n\t\tSelectRelevantCols3@PersonID,\n\t\tContactSoureKey,\n\t\tSourceType,\n\t\tFormType,\n\t\tAuditDate),\n\tCountAll = count(1)) ~> GroupBy1\nGroupBy1 filter(notEquals(toString(StartDate), 'NULL')) ~> Filter4\nFilter4 derive(AuditDate = replace(toString(AuditDate), 'NULL', '9999-12-31 23:59:59.9999')) ~> DerivedColumn2\nDerivedColumn1, DerivedColumn2 union(byName: true)~> Union\nUnion, SelectRelevantCols1 join(Union@PersonID == SelectRelevantCols1@PersonID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIsperson2\nTblPupil select(mapColumn(\n\t\tPupilId,\n\t\tPupilUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols4\nTblEv select(mapColumn(\n\t\tEventSourceKey,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventValidStartDate,\n\t\tEventId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols5\nJoinIsperson2, SelectRelevantCols4 join(UPN == PupilUPN,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPup\nJoinPup, SelectRelevantCols5 join(ContactSourceKey == toInteger(EventSourceKey)\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate)\n\t&& toDate(StartDate) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nTblEvTyp select(mapColumn(\n\t\tEventTypeGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols6\nSelectRelevantCols6 filter(equals(EventTypeGroup, 'ICS_CONTACT')) ~> Filter5\nSelectRelevantCols6 filter(equals(EventTypeGroup, 'ECAF_CONTACT')) ~> Filter7\nJoinEv, SelectICS join(iif(equals(SourceType, 'NULL'), '10', coalesce(SourceType, '10')) == EventTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTyp1\nSelect1, SelectECAF join(iif(equals(SourceType, 'NULL'), '10', coalesce(SourceType, '10')) == SelectECAF@EventTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvTyp2\nJoinEvTyp1 select(mapColumn(\n\t\tStartDate,\n\t\tPersonID = Union@PersonID,\n\t\tContactSourceKey,\n\t\tSourceType,\n\t\tFormType,\n\t\tAuditDate,\n\t\tCountAll,\n\t\tContactSoureKey,\n\t\tPersonID = SelectRelevantCols1@PersonID,\n\t\tUPN,\n\t\tPupilId,\n\t\tPupilUPN,\n\t\tEventSourceKey,\n\t\tEventTransactionStartDate,\n\t\tEventValidStartDate,\n\t\tEventId,\n\t\tEventTypeGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeId_ICS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nJoinEvTyp2 select(mapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventTypeId_ICS,\n\t\tEventTypeId_ECAF,\n\t\tEventToPupilTransactionStartDate = AuditDate,\n\t\tEventToPupilValidStartDate = StartDate,\n\t\tFormType\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols7\nSelectRelevantCols7 derive(EventToPupilTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeId = iif(equals(FormType, 'ICS/Contact'), \r\n    EventTypeId_ICS,\r\n    iif(equals(FormType, 'ECAF/Contact'), \r\n        EventTypeId_ECAF, toLong(0))\r\n),\n\t\tEventToPupilSourceId = 3,\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilValidEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)), toLong(random(100)),toLong(0)),\n\t\tEventToPupilTransactionStartDate = toTimestamp(EventToPupilTransactionStartDate),\n\t\tPupilId = coalesce(PupilId, -1),\n\t\tEventId = coalesce(EventId, -1)) ~> AddFixedCols\nFilter7 select(mapColumn(\n\t\tEventTypeGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeId_ECAF = EventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectECAF\nFilter5 select(mapColumn(\n\t\tEventTypeGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeId_ICS = EventTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectICS\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAddFixedCols aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter),\n\tCountAll = count(1)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventToPupilTransactionStartDate','EventToPupilValidStartDate','EventToPupilCounter','PupilId'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> TblEvToPup"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsrefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ppmark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "EvToPup"
						}
					],
					"transformations": [
						{
							"name": "SelectCols"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "JoinWfassessment"
						},
						{
							"name": "Filter"
						},
						{
							"name": "AuditDate"
						},
						{
							"name": "SelectRelevantCols1"
						},
						{
							"name": "JoinPpmark"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "JoinTblPupil"
						},
						{
							"name": "SelectRelevantCols3"
						},
						{
							"name": "JoinTblEv"
						},
						{
							"name": "SelectRelevantCols4"
						},
						{
							"name": "SelectRelevantCols5"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectDistinct"
						},
						{
							"name": "AddCols"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> Icsrefer\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> Ppmark\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nIcsrefer select(mapColumn(\n\t\tAuditDate,\n\t\tFormNo,\n\t\tUniqueRecord = ICSReferralID,\n\t\tPersonID,\n\t\tReferralStart = StartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCols\nWfassessment select(mapColumn(\n\t\tFormNo,\n\t\tStatus,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nAuditDate, Filter join(SelectCols@FormNo == SelectRelevantCols@FormNo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfassessment\nSelectRelevantCols filter(in(['C', 'D', 'F'], Status)) ~> Filter\nSelectCols derive(AuditDate = replace(toString(AuditDate), 'NULL', '9999-12-31 23:59:59.9999')) ~> AuditDate\nPpmark select(mapColumn(\n\t\tMainRef,\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols1\nJoinWfassessment, SelectRelevantCols1 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1))\n\t&& SelectRelevantCols@MarkerID == SelectRelevantCols1@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPpmark\nJoinPpmark aggregate(groupBy(UniqueRecord,\n\t\tPersonID,\n\t\tReferralStart,\n\t\tAuditDate),\n\tCountAll = count(1)) ~> GroupBy\nGroupBy, SelectRelevantCols2 join(GroupBy@PersonID == SelectRelevantCols2@PersonID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIsperson\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nJoinIsperson, SelectRelevantCols3 join(UPN == PupilUPN,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTblPupil\nTblPupil select(mapColumn(\n\t\tPupilUPN,\n\t\tPupilId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols3\nJoinTblPupil, SelectRelevantCols4 join(UniqueRecord == toInteger(EventSourceKey)\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate)\n\t&& toDate(ReferralStart) == toDate(EventValidStartDate),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTblEv\nTblEv select(mapColumn(\n\t\tEventSourceKey,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventValidStartDate,\n\t\tEventId,\n\t\tEventTransactionEndDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols4\nTblEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols5\nSelectRelevantCols5 filter(equals(EventTypeGroup, 'PUPIL_REFERRAL')) ~> Filter1\nJoinTblEv, Filter1 join(SelectRelevantCols4@EventTypeId == SelectRelevantCols5@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nAddCols alterRow(insertIf(true())) ~> AlterRow1\nJoinEvTyp aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventTransactionEndDate,\n\t\tEventTransactionStartDate,\n\t\tSelectRelevantCols5@EventTypeId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate),\n\tCountAll = count(1)) ~> SelectDistinct\nSelectDistinct derive(PupilId = coalesce(PupilId, -1),\n\t\tEventId = coalesce(EventId, -1),\n\t\tEventToPupilSourceId = 3,\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(isNull(PupilId), isNull(EventId)), toLong(random(100)),\r\niif(or(isNull(PupilId), isNull(EventId)), toLong(random(100)), toLong(0))\r\n)) ~> AddCols\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate = EventTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate = EventTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate = EventValidStartDate,\n\t\tEventToPupilValidEndDate = EventValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> EvToPup"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/4_CPP/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsPerson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsPreg"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIcsCprchist"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "sourceTblPupil"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "sinkEvToPup"
						}
					],
					"transformations": [
						{
							"name": "SelectIcsRefer"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "SelectIcsPreg"
						},
						{
							"name": "JoinIcsPreg"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "SelectCprchist"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "FilterIcsPreg"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinIcsCprhist"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "DerivedColumnCPP"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "SelectPup"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> sourceIcsRefer\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsPerson\nsource(output(\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tRegComments as string,\n\t\tDeRegReason as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tInitialMeetingID as integer,\n\t\tFinalMeetingID as integer,\n\t\tOLACSSR as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscpreg') ~> sourceIcsPreg\nsource(output(\n\t\tCPRegCatID as integer,\n\t\tCPRegID as integer,\n\t\tPersonID as integer,\n\t\tMeetingID as integer,\n\t\tStartDate as timestamp,\n\t\tRegNeglect as string,\n\t\tRegPhysical as string,\n\t\tRegSexual as string,\n\t\tRegEmotional as string,\n\t\tRegComments as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tEndDate as timestamp,\n\t\tSyncDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icscprchist') ~> sourceIcsCprchist\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEv\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblPupil\nsourceIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tAuditDate,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsRefer\nSelectIcsRefer, SelectIsPerson join(SelectIcsRefer@PersonID == SelectIsPerson@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceIsPerson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nsourceIcsPreg select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tStartDate,\n\t\tEndDate,\n\t\tOLACSSR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIcsPreg\nJoinIsPerson, FilterIcsPreg join(SelectIcsRefer@PersonID == SelectIcsPreg@PersonID\n\t&& toDate(SelectIcsRefer@StartDate) <= toDate(SelectIcsPreg@StartDate)\n\t&& toDate(    coalesce(SelectIcsRefer@EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) >= toDate(SelectIcsPreg@StartDate),\n\tjoinType:'inner',\n\tbroadcast: 'left')~> JoinIcsPreg\nDerivedColumn1 aggregate(groupBy(SelectIcsRefer@PersonID,\n\t\tEndDate,\n\t\tSelectIcsPreg@StartDate,\n\t\tCPRegID,\n\t\tUPN),\n\tAuditDate = max(AuditDate)) ~> Aggregate1\nsourceIcsCprchist select(mapColumn(\n\t\tCPRegID,\n\t\tPersonID,\n\t\tRegNeglect,\n\t\tRegPhysical,\n\t\tRegSexual,\n\t\tRegEmotional\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCprchist\nsourceEvTyp filter(equals(EventTypeGroup, 'CHILD_PROTECTION_PLAN')) ~> Filter1\nFilter1 select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nSelectIcsPreg filter(isNull(OLACSSR)) ~> FilterIcsPreg\nJoinIcsPreg derive(EndDate = coalesce(SelectIcsRefer@EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nAggregate1, SelectCprchist join(Aggregate1@CPRegID == SelectCprchist@CPRegID\n\t&& Aggregate1@PersonID == SelectCprchist@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsCprhist\nDerivedColumnCPP, SelectEvTyp join(CHILD_PROTECTION_PLAN == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinIcsCprhist derive(CHILD_PROTECTION_PLAN = 'CHILD_PROTECTION_PLAN') ~> DerivedColumnCPP\nsourceEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nJoinEvTyp, SelectEv join(toString(Aggregate1@CPRegID) == EventSourceKey\n\t&& toDate(AuditDate) == toDate(EventTransactionStartDate)\n\t&& toDate(StartDate) == toDate(EventValidStartDate)\n\t&& toDate(        coalesce(EndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) == toDate(EventValidEndDate)\n\t&& SelectEvTyp@EventTypeId == SelectEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, SelectPup join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nsourceTblPupil select(mapColumn(\n\t\tPupilId,\n\t\tPupilUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPup\nSelect1 derive(PupilId = coalesce(PupilId, 0),\n\t\tEventId = coalesce(EventId, 0),\n\t\tEventToPupilSourceId = 3,\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)), toLong(random(100)),\r\n    iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)), toLong(0))\r\n\r\n)) ~> DerivedColumn2\nJoinPup select(mapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate = EventTransactionEndDate,\n\t\tEventTypeId = SelectEvTyp@EventTypeId,\n\t\tEventToPupilTransactionStartDate = EventTransactionStartDate,\n\t\tEventToPupilValidStartDate = EventValidStartDate,\n\t\tEventToPupilValidEndDate = EventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter),\n\tCountAll = count(1)) ~> Aggregate2\nAggregate2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId','EventId','EventTypeId','EventToPupilValidStartDate','EventToPupilValidEndDate','EventToPupilCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> sinkEvToPup"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/5_CINP/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "CpCarePlan"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IsPerson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "Ev"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "Pup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "EvToPup"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinIcsRefer"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "CINColumn"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinIsPerson1"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select4"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tPlanNo as integer,\n\t\tParPlanNo as integer,\n\t\tPlanLink as string,\n\t\tPlanLinkKey as string,\n\t\tServiceArea as string,\n\t\tPlanType as string,\n\t\tMarkerID as integer,\n\t\tReferralID as integer,\n\t\tMarkerKey as string,\n\t\tStatus as string,\n\t\tGlobalPlanID as integer,\n\t\tGlobalRevision as integer,\n\t\tRevision as integer,\n\t\tSubRev as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tCPComments as string,\n\t\tCreatedBy as string,\n\t\tCreationDate as timestamp,\n\t\tEmergencyPlan as string,\n\t\tEContact1 as string,\n\t\tEContact1No as string,\n\t\tEContact2 as string,\n\t\tEContact2No as string,\n\t\tConsentGiven as string,\n\t\tPlanAgreed as string,\n\t\tSUserComments as string,\n\t\tPlanCoord as string,\n\t\tConsent as string,\n\t\tOfferedBy as string,\n\t\tOfferedDate as timestamp,\n\t\tOfferedNotes as string,\n\t\tRevisionDate as timestamp,\n\t\tUpdateDate as timestamp,\n\t\tCompletedBy as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tFrozenDate as timestamp,\n\t\tFreezeNotes as string,\n\t\tFrozenBy as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tPartOneID as integer,\n\t\tPartTwoID as integer,\n\t\tReviewID as integer,\n\t\tPartTwoPlanNo as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAuthBy as string,\n\t\tAuthCode as string,\n\t\tReasonCeased as string,\n\t\tAuthDate as timestamp,\n\t\tAuthComm as string,\n\t\tOrderByOnDisplay as string,\n\t\tProvTaskNo as integer,\n\t\tEDMIntegID as string,\n\t\tReviewSummary as string,\n\t\tReviewNotes as string,\n\t\tAppVersion as integer,\n\t\tCreatedStaffHistoryID as integer,\n\t\tPlanCoordStaffHistoryID as integer,\n\t\tAuthStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/cpcareplan') ~> CpCarePlan\nsource(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> IcsRefer\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> IsPerson\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> Ev\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> Pup\nCpCarePlan select(mapColumn(\n\t\tAuditDate,\n\t\tUniqueRecord = PlanNo,\n\t\tPersonID = PlanLinkKey,\n\t\tCIN_Status = Status,\n\t\tCIN_Start_Date = StartDate,\n\t\tCIN_End_Date = EndDate,\n\t\tPlanType,\n\t\tReferralID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tCIN_Status = iif(equals(CIN_Status, 'NULL'), toString(null()), CIN_Status),\n\t\tCIN_Start_Date = iif(equals(toString(CIN_Start_Date), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), CIN_Start_Date),\n\t\tCIN_End_Date = iif(equals(toString(CIN_End_Date), 'NULL'), toTimestamp('31-12-9999','dd-MM-yyyy'), CIN_End_Date)) ~> DerivedColumn1\nIcsRefer select(mapColumn(\n\t\tICSReferralID,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nIsPerson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nDerivedColumn1 filter(and(\r\n    equals(PlanType, 'FP'),\r\n    and(notEquals(CIN_Status, 'Z'),\r\n        and(not(isNull(CIN_Start_Date)),\r\n            not(isNull(CIN_End_Date))\r\n            )\r\n        )\r\n)) ~> Filter1\nFilter1, Filter2 join(ReferralID == ICSReferralID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcsRefer\nSelect2 filter(isNull(EndDate)) ~> Filter2\nJoinIcsRefer, Select3 join(toInteger(Select1@PersonID) == Select3@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nJoinIsPerson aggregate(groupBy(UniqueRecord,\n\t\tSelect1@PersonID,\n\t\tCIN_Status,\n\t\tCIN_Start_Date,\n\t\tCIN_End_Date),\n\tAuditDate = max(AuditDate)) ~> GroupBy\nGroupBy derive(CHILDREN_IN_NEED = 'CHILDREN_IN_NEED') ~> CINColumn\nCINColumn, EvTyp join(CHILDREN_IN_NEED == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEvTyp, Ev join(UniqueRecord == toInteger(EventSourceKey)\n\t&& AuditDate == EventTransactionStartDate\n\t&& CIN_Start_Date == EventValidStartDate\n\t&& CIN_End_Date == EventValidEndDate\n\t&& EvTyp@EventTypeId == Ev@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, Select3 join(toInteger(GroupBy@PersonID) == Select3@PersonID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIsPerson1\nJoinIsPerson1, Pup join(UPN == PupilUPN,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPup\nAggregate2 alterRow(insertIf(true())) ~> AlterRow1\nJoinPup select(mapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate = EventTransactionEndDate,\n\t\tEventTypeId = EvTyp@EventTypeId,\n\t\tEventToPupilTransactionStartDate = EventTransactionStartDate,\n\t\tEventToPupilValidStartDate = EventValidStartDate,\n\t\tEventToPupilValidEndDate = EventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 derive(EventToPupilSourceId = 3,\n\t\tPupilId = coalesce(PupilId, -1),\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(isNull(PupilId), isNull(EventId)), toLong(random(100)),iif(or(isNull(PupilId), isNull(EventId)), toLong(random(100)), toLong(0)))) ~> DerivedColumn3\nDerivedColumn3 aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilCounter,\n\t\tEventToPupilDeleted),\n\tEventToPupilTransactionEndDate = max(EventToPupilTransactionEndDate),\n\t\tEventToPupilValidEndDate = max(EventToPupilValidEndDate),\n\t\tEventToPupilSourceId = max(EventToPupilSourceId),\n\t\tEventToPupilRowInsertedDate = max(EventToPupilRowInsertedDate)) ~> Aggregate2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> EvToPup"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsplacement"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsperiodcare"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icslegalorders"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Isperson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "EvToPup"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Joinicsperiodcare"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Joinicslegalorders"
						},
						{
							"name": "Joinwfpicklistitem"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinIsperson"
						},
						{
							"name": "Select5"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter6"
						}
					],
					"script": "source(output(\n\t\tPlacementID as integer,\n\t\tPersonID as integer,\n\t\tPlacementCode as string,\n\t\tPostCode as string,\n\t\tReason as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAddrID as string,\n\t\tAddr as string,\n\t\tTelephone as string,\n\t\tPlacementLength as integer,\n\t\tMainCarerID as integer,\n\t\tHideInfo as string,\n\t\tHideName as string,\n\t\tHideAddress as string,\n\t\tHideRelChild as string,\n\t\tOutHoursName as string,\n\t\tOutHoursPhone as string,\n\t\tEndDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tPlacementType as string,\n\t\tOtherType as string,\n\t\tVersion as integer,\n\t\tFromBla as string,\n\t\tEndPrevious as string,\n\t\tAddrHistoID as integer,\n\t\tPeriodID as integer,\n\t\tPDistance as string,\n\t\tRelationID as integer,\n\t\tRelationID2 as integer,\n\t\tRelationID3 as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tFosterID as integer,\n\t\tLiveDate as timestamp,\n\t\tDeptID as string,\n\t\tPlacementProvider as string,\n\t\tPlacementLocation as string,\n\t\tPlacementChangeReason as string,\n\t\tEmergencyCarerName as string,\n\t\tEmergencyAddress as string,\n\t\tEndReason as string,\n\t\tAdoptionMarkerID as integer,\n\t\tPre_LPG_AddressKey as string,\n\t\tOfstedPlacementType as string,\n\t\tDecisionAchieved as string,\n\t\tDecisionAchievedComments as string,\n\t\tFFAIsPlanDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsplacement') ~> Icsplacement\nsource(output(\n\t\tPeriodID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tEndReason as string,\n\t\tCinCode as string,\n\t\tReasonCode as string,\n\t\tSyncFlag as string,\n\t\tACDetails as string,\n\t\tACDuration as string,\n\t\tNotes as string,\n\t\tACAccommodation as string,\n\t\tACAccommOther as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tLiveDate as timestamp,\n\t\tAdoptNumber as string,\n\t\tAdoptGender as string,\n\t\tAdoptLegalStatus as string,\n\t\tAdoptFromFoster as string,\n\t\tDateCancelled as timestamp,\n\t\tAdoptBestInterests as timestamp,\n\t\tAdoptAgree as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsperiodcare') ~> Icsperiodcare\nsource(output(\n\t\tOrderID as integer,\n\t\tStartDate as timestamp,\n\t\tCourt as string,\n\t\tPersonID as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLegalStatus as string,\n\t\tExpDate as timestamp,\n\t\tComments as string,\n\t\tEndDate as timestamp,\n\t\tPeriodID as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tLiveDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icslegalorders') ~> Icslegalorders\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> Isperson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nIcsplacement select(mapColumn(\n\t\tAuditDate,\n\t\tPeriodID,\n\t\tPlacementID,\n\t\tLiveDate,\n\t\tPlacementCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nIcsperiodcare select(mapColumn(\n\t\tCinCode,\n\t\tPoCStart = StartDate,\n\t\tPoCEnd = EndDate,\n\t\tPeriodID,\n\t\tLiveDate,\n\t\tPersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1, Filter1 join(Select1@PeriodID == Select2@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinicsperiodcare\nSelect2 filter(equals(isNull(LiveDate), false())) ~> Filter1\nIcslegalorders select(mapColumn(\n\t\tPeriodID,\n\t\tLegalStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 filter(notEquals(LegalStatus, 'RESP75+')) ~> Filter2\nJoinicsperiodcare, Filter2 join(Select2@PeriodID == Select3@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinicslegalorders\nJoinicslegalorders, Filter3 join(LegalStatus == code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfpicklistitem\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 filter(equals(pickid, 'ICSLegalStatus')) ~> Filter3\nJoinwfpicklistitem derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tPoCEnd = coalesce(PoCEnd, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(PlacementID,\n\t\tPersonID,\n\t\tPoCStart,\n\t\tPoCEnd,\n\t\tCinCode,\n\t\tPlacementCode,\n\t\tSelect1@LiveDate),\n\tCountAll = count(1)) ~> GroupBy\nGroupBy filter(and(\n    not(isNull(LiveDate)),\n    not(like(PlacementCode, 'T%'))\n)) ~> Filter4\nFilter4, Select5 join(GroupBy@PersonID == Select5@PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsperson\nIsperson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nJoinIsperson, TblPupil join(UPN == PupilUPN,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPup\nJoinPup, TblEv join(PlacementID == toInteger(EventSourceKey)\n\t&& toDate(PoCStart) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, Filter5 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nTblEvTyp filter(equals(EventTypeDescription, 'CHILDREN_IN_CARE')) ~> Filter5\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nJoinEvTyp derive(EventToPupilSourceId = 3,\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)), toLong(random(100)),\r\n    iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)), toLong(0))\r\n\r\n)) ~> AddCols\nFilter6 aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventTransactionEndDate,\n\t\tTblEvTyp@EventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventTransactionStartDate,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter),\n\tCountAll = count(1)) ~> Aggregate1\nAddCols filter(not(isNull(EventTransactionStartDate))) ~> Filter6\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','PupilId','EventTypeId','EventToPupilTransactionStartDate','EventToPupilDeleted','EventToPupilValidStartDate','EventToPupilCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate = EventTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilSourceId,\n\t\tEventToPupilTransactionStartDate = EventTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate = EventValidStartDate,\n\t\tEventToPupilValidEndDate = EventValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> EvToPup"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToPupil7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/7_CPC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentType"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentArchive"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceTblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "sourceEvStsTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceIsPerson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "sourcePup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "sinkEvToPup"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectAss"
						},
						{
							"name": "SelectAssTyp"
						},
						{
							"name": "JoinAss"
						},
						{
							"name": "JoinPp"
						},
						{
							"name": "SelectPp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "FilterEvTyp"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "SelectAssArchive"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "SelectEvStsTyp"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinIsPerson"
						},
						{
							"name": "SelectIsPerson"
						},
						{
							"name": "SelectPup"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentType\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tArchiveID as integer,\n\t\tFormNo as integer,\n\t\tArchType as string,\n\t\tFormData as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tControlID as string,\n\t\tRenderInline as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmentarchive') ~> sourceWfAssessmentArchive\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblEv\nsource(output(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvStsTyp\nsource(output(\n\t\tPersonID as integer,\n\t\tSurname as string,\n\t\tForename as string,\n\t\tDOB as timestamp,\n\t\tGender as string,\n\t\tACType as string,\n\t\tRSource as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tTitle as string,\n\t\tHOReg as string,\n\t\tImmigStatus as string,\n\t\tDUC as timestamp,\n\t\tNationality as string,\n\t\tEthnicityComm as string,\n\t\tEthnicity as string,\n\t\tReligionP as string,\n\t\tReligion as string,\n\t\tReligionDenomination as string,\n\t\tReligionNotes as string,\n\t\tLangInterp as string,\n\t\tOccupation as string,\n\t\tCPRStart as timestamp,\n\t\tCPREnd as timestamp,\n\t\tDOBStr as string,\n\t\tMatchValue as double,\n\t\tDOD as timestamp,\n\t\tEmail as string,\n\t\tPrefName as string,\n\t\tMaritalStatus as string,\n\t\tSexualOrientation as string,\n\t\tLACStart as timestamp,\n\t\tLACEnd as timestamp,\n\t\tIntegID as string,\n\t\tNHSNo as string,\n\t\tSOneOffDate as timestamp,\n\t\tSOneOffDetails as string,\n\t\tApproxAge as string,\n\t\tRoutineImmune as string,\n\t\tNoQualReason as string,\n\t\tReferralStart as timestamp,\n\t\tReferralEnd as timestamp,\n\t\tCoreGroupMember as string,\n\t\tUPN as string,\n\t\tFormerUPN as string,\n\t\tUnknownUPNReason as string,\n\t\tCINCode as string,\n\t\tCINCodeStart as timestamp,\n\t\tCSSR as string,\n\t\tCSSRCaseNo as string,\n\t\tIsDisabled as string,\n\t\tIsDisabledReg as string,\n\t\tHazardCount as integer,\n\t\tUnempReason as string,\n\t\tLegalStatus as string,\n\t\tLegalStatusDate as timestamp,\n\t\tSyncDate as timestamp,\n\t\tAliasInfo as string,\n\t\tCPCategory as string,\n\t\tFPlaceCount as integer,\n\t\tARCRef as string,\n\t\tPortRef as string,\n\t\tAllegationCount as integer,\n\t\tRiskCount as integer,\n\t\tPlaceOfBirth as string,\n\t\tNINumber as string,\n\t\tYOTNumber as string,\n\t\tOtherId1 as string,\n\t\tOtherId2 as string,\n\t\tOtherId3 as string,\n\t\tOtherId4 as string,\n\t\tOtherId5 as string,\n\t\tOtherDate1 as timestamp,\n\t\tOtherDate2 as timestamp,\n\t\tOtherDate3 as timestamp,\n\t\tSecure as string,\n\t\tSecureInfo as string,\n\t\tSecureReviewDate as timestamp,\n\t\tSecureUpdatedDate as timestamp,\n\t\tSecureUpdatedBy as string,\n\t\tHideAllAddresses as string,\n\t\tIsDuplicate as string,\n\t\tWhoMarkedAsDuplicate as string,\n\t\tDuplicatedPersonID as integer,\n\t\tMarkedAsDuplicateDate as timestamp,\n\t\tIsAdopted as string,\n\t\tAdoptedLinkedPersonID as integer,\n\t\tWasUASC as string,\n\t\tEDMIntegID as string,\n\t\tIsHidden as string,\n\t\tEDMSyncDate as timestamp,\n\t\tEDMUpdate as string,\n\t\tEDMTemporaryID as string,\n\t\tReasonSecure as string,\n\t\tProfilePhotoDocID as integer,\n\t\tSecureManager as string,\n\t\tInSearch as string,\n\t\tRaaID as string,\n\t\tDODEstimated as string,\n\t\tHasFosterRecord as string,\n\t\tUnbornDeceased as string,\n\t\tUnbornDeceasedReason as string,\n\t\tPreAdoptionSecure as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/isperson') ~> sourceIsPerson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourcePup\nsourceWfAssessmentType filter(and(\r\n    equals(Description, 'CP Conference Outcomes and Outline Plan'),\r\n    not(like('XX%', FormType))\r\n)) ~> Filter1\nsourceWfAssessment filter(notEquals(Status, 'X')) ~> Filter2\nFilter2 select(mapColumn(\n\t\tTemplateID,\n\t\tFormNo,\n\t\tMarkerID,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tCompletionDate,\n\t\tFormLinkKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAss\nFilter1 select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssTyp\nSelectAssTyp, SelectAss join(SelectAssTyp@TemplateID == SelectAss@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAss\nJoinAss, SelectPp join(SelectAss@MarkerID == SelectPp@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPp\nsourcePpMark select(mapColumn(\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPp\nJoinPp derive(CHILD_PROTECTION_CONFERENCE = 'CHILD_PROTECTION_CONFERENCE') ~> DerivedColumn1\nDerivedColumn1, FilterEvTyp join(CHILD_PROTECTION_CONFERENCE == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup,\n\t\tEventTypeSubGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nSelectEvTyp filter(isNull(EventTypeSubGroup)) ~> FilterEvTyp\nsourceWfAssessmentArchive filter(equals(ControlID, 'IDInitDecisionsValidate')) ~> Filter3\nFilter3 select(mapColumn(\n\t\tFormNo,\n\t\tFormData\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssArchive\nsourceTblEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventTransactionEndDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nFilter4 select(mapColumn(\n\t\tEventStatusTypeId,\n\t\tEventStatusTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvStsTyp\nsourceEvStsTyp filter(equals(EventStatusTypeGroup, 'CHILD_PROTECTION_CONFERENCE')) ~> Filter4\nJoinEvTyp, SelectIsPerson join(toInteger(FormLinkKey) == PersonID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIsPerson\nsourceIsPerson select(mapColumn(\n\t\tPersonID,\n\t\tUPN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIsPerson\nsourcePup select(mapColumn(\n\t\tPupilUPN,\n\t\tPupilId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPup\nJoinIsPerson, SelectPup join(UPN == PupilUPN,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPup\nJoinPup, SelectEv join(FormNo == toInteger(EventSourceKey)\n\t&& SelectEvTyp@EventTypeId == SelectEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv select(mapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionStartDate = EventTransactionStartDate,\n\t\tEventTypeId = SelectEvTyp@EventTypeId,\n\t\tEventToPupilTransactionEndDate = EventTransactionEndDate,\n\t\tEventToPupilValidStartDate = EventValidStartDate,\n\t\tEventToPupilValidEndDate = EventValidEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(PupilId = coalesce(PupilId, -1),\n\t\tEventId = coalesce(EventId, -1),\n\t\tEventToPupilTransactionEndDate = coalesce(EventToPupilTransactionEndDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventTypeId = coalesce(EventTypeId, -1),\n\t\tEventToPupilTransactionStartDate = coalesce(EventToPupilTransactionStartDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToPupilValidStartDate = coalesce(EventToPupilValidStartDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilValidEndDate = coalesce(EventToPupilValidEndDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tEventToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventToPupilCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)), toLong(random(100)), toLong(0))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(PupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventTypeId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId','EventId','EventTypeId','EventToPupilTransactionStartDate','EventToPupilValidStartDate','EventToPupilCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tEventId,\n\t\tEventToPupilTransactionEndDate,\n\t\tEventTypeId,\n\t\tEventToPupilTransactionStartDate,\n\t\tEventToPupilDeleted,\n\t\tEventToPupilValidStartDate,\n\t\tEventToPupilValidEndDate,\n\t\tEventToPupilRowInsertedDate,\n\t\tEventToPupilCounter\n\t)) ~> sinkEvToPup"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToStatus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "TblEvStsTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToStatus",
								"type": "DatasetReference"
							},
							"name": "Sink"
						}
					],
					"transformations": [
						{
							"name": "GroupBy"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "AddFixedColumns"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "GroupBy2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Join4"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "GroupBy3"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Join6"
						},
						{
							"name": "SelectRelevantCols3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tBASE_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tHIST_AMEND as timestamp,\n\t\tHIST_TIME as string,\n\t\tHIST_USER as string,\n\t\tREG_BASE as string,\n\t\tRESIDENCE as string,\n\t\tRJOIN as string,\n\t\tRLEAVE as string,\n\t\tSTART_DATE as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tHIST_ID as decimal(38,18),\n\t\tD_PER_WEEK as decimal(38,18),\n\t\tREG2_BASE as string,\n\t\tREGTYPE as string,\n\t\tBOARDER as string,\n\t\tGUEST as string,\n\t\tDESTINATION as string,\n\t\tDESTINATION_LAST_UPDT as timestamp,\n\t\tDESTINATION_UPDATED_BY as decimal(38,18),\n\t\tSITE_ID as decimal(38,18),\n\t\tSCHOOL_HISTORY_TYPE as string,\n\t\tGROUNDS_REMOVAL as string,\n\t\tCML_DESTINATION as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/stud_hist') ~> Source\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvStsTyp\nSource aggregate(groupBy(HIST_ID,\n\t\tGUEST,\n\t\tSTART_DATE,\n\t\tHIST_AMEND,\n\t\tEND_DATE),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupBy\nGroupBy, TblEv join(toString(toInteger(HIST_ID)) == EventSourceKey\n\t&& toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\") == toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1, TblEvStsTyp join('GUEST' == EventStatusTypeInternalCode\n\t&& 'PUPIL_EVENT' == EventStatusTypeGroup\n\t&& 'SCHOOL_TRANSFER' == EventStatusTypeDescription,\n\tjoinType:'left',\n\tbroadcast: 'both')~> Join2\nUnion1 filter(and(\r\n    notEquals(EventId, -1),\r\n    notEquals(isNull(EventId), true())\r\n)) ~> Filter1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nJoin2 select(mapColumn(\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusFlag = GUEST,\n\t\tEventToStatusValidStartDate = START_DATE,\n\t\tEventToStatusValidEndDate = END_DATE,\n\t\tEventToStatusTransactionStartDate = LAST_UPDT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols derive(EventToStatusTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusSourceId = 2,\n\t\tEventToStatusDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusRowInsertedDate = currentTimestamp(),\n\t\tEventToStatusCounter = iif(or(or(equals(EventId,0),equals(EventId,1)),isNull(EventId)),random(100),toLong(0))) ~> AddFixedColumns\nAddFixedColumns derive(EventId = coalesce(EventId, -1),\n\t\tEventStatusTypeId = coalesce(EventStatusTypeId, -1),\n\t\tEventToStatusFlag = iif(equals(EventToStatusFlag,'T'),1,0),\n\t\tEventToStatusValidEndDate = coalesce(toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nSource aggregate(groupBy(END_DATE,\n\t\tHIST_AMEND,\n\t\tREG_BASE,\n\t\tSTART_DATE,\n\t\tHIST_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupBy2\nGroupBy2, TblEv join(toString(toInteger(HIST_ID)) == EventSourceKey\n\t&& toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\") == toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3, TblEvStsTyp join('REG_BASE' == EventStatusTypeInternalCode\n\t&& 'PUPIL_EVENT' == EventStatusTypeGroup\n\t&& 'SCHOOL_TRANSFER' == EventStatusTypeDescription,\n\tjoinType:'left',\n\tbroadcast: 'both')~> Join4\nJoin4 select(mapColumn(\n\t\tEventToStatusTransactionStartDate = LAST_UPDT,\n\t\tEventToStatusValidEndDate = END_DATE,\n\t\tEventToStatusValidStartDate = START_DATE,\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusFlag = REG_BASE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nSelectRelevantCols2 derive(EventToStatusTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusSourceId = 2,\n\t\tEventToStatusDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusRowInsertedDate = currentTimestamp(),\n\t\tEventToStatusCounter = iif(or(or(equals(EventId,0),equals(EventId,1)),isNull(EventId)),random(100),toLong(0))) ~> DerivedColumn2\nDerivedColumn2 derive(EventId = coalesce(EventId, -1),\n\t\tEventStatusTypeId = coalesce(EventStatusTypeId, -1),\n\t\tEventToStatusValidEndDate = coalesce(EventToStatusValidEndDate, EventToStatusTransactionEndDate),\n\t\tEventToStatusFlag = iif(equals(EventToStatusFlag,'T'),1,0)) ~> DerivedColumn3\nSource aggregate(groupBy(END_DATE,\n\t\tHIST_AMEND,\n\t\tREG2_BASE,\n\t\tHIST_ID,\n\t\tSTART_DATE),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupBy3\nGroupBy3, TblEv join(toString(toInteger(HIST_ID)) == EventSourceKey\n\t&& toDate(toString(START_DATE, \"dd-MM-yyyy\"), \"dd-MM-yyyy\") == toDate(toString(EventValidStartDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join5\nJoin5, TblEvStsTyp join('REG2_BASE' == EventStatusTypeInternalCode\n\t&& 'PUPIL_EVENT' == EventStatusTypeGroup\n\t&& 'SCHOOL_TRANSFER' == EventStatusTypeDescription,\n\tjoinType:'left',\n\tbroadcast: 'both')~> Join6\nJoin6 select(mapColumn(\n\t\tEventToStatusTransactionStartDate = LAST_UPDT,\n\t\tEventToStatusValidEndDate = END_DATE,\n\t\tEventToStatusFlag = REG2_BASE,\n\t\tEventToStatusValidStartDate = START_DATE,\n\t\tEventId,\n\t\tEventStatusTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols3\nSelectRelevantCols3 derive(EventToStatusTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusSourceId = 2,\n\t\tEventToStatusDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusRowInsertedDate = currentTimestamp(),\n\t\tEventToStatusCounter = iif(or(or(equals(EventId,0),equals(EventId,1)),isNull(EventId)),random(100),toLong(0))) ~> DerivedColumn4\nDerivedColumn4 derive(EventId = coalesce(EventId, -1),\n\t\tEventStatusTypeId = coalesce(EventStatusTypeId, -1),\n\t\tEventToStatusFlag = iif(equals(EventToStatusFlag,'T'),1,0),\n\t\tEventToStatusValidEndDate = coalesce(EventToStatusValidEndDate, EventToStatusTransactionEndDate)) ~> DerivedColumn5\nDerivedColumn1, DerivedColumn3, DerivedColumn5 union(byName: true)~> Union1\nFilter1 aggregate(groupBy(EventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionStartDate,\n\t\tEventToStatusValidStartDate,\n\t\tEventToStatusCounter),\n\tEventToStatusFlag = max(EventToStatusFlag),\n\t\tEventToStatusValidEndDate = max(EventToStatusValidEndDate),\n\t\tEventToStatusTransactionEndDate = max(EventToStatusTransactionEndDate),\n\t\tEventToStatusSourceId = max(EventToStatusSourceId),\n\t\tEventToStatusDeleted = max(EventToStatusDeleted),\n\t\tEventToStatusRowInsertedDate = max(EventToStatusRowInsertedDate)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventStatusTypeId as long,\n\t\tEventToStatusTransactionEndDate as timestamp,\n\t\tEventToStatusFlag as boolean,\n\t\tEventToStatusSourceId as integer,\n\t\tEventToStatusTransactionStartDate as timestamp,\n\t\tEventToStatusValidStartDate as timestamp,\n\t\tEventToStatusValidEndDate as timestamp,\n\t\tEventToStatusDeleted as timestamp,\n\t\tEventToStatusRowInsertedDate as timestamp,\n\t\tEventToStatusCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventStatusTypeId','EventToStatusValidStartDate','EventToStatusTransactionStartDate','EventToStatusCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionEndDate,\n\t\tEventToStatusFlag,\n\t\tEventToStatusSourceId,\n\t\tEventToStatusTransactionStartDate,\n\t\tEventToStatusValidStartDate,\n\t\tEventToStatusValidEndDate,\n\t\tEventToStatusDeleted,\n\t\tEventToStatusRowInsertedDate,\n\t\tEventToStatusCounter\n\t)) ~> Sink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToStatus')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToStatus1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "IcsRefer"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Ppmark"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "WfAssessmentType"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "TblEvStsTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToStatus",
								"type": "DatasetReference"
							},
							"name": "TblEvToSts"
						}
					],
					"transformations": [
						{
							"name": "Joinppmark"
						},
						{
							"name": "Joinwfassessment"
						},
						{
							"name": "Joinwfassessmenttype"
						},
						{
							"name": "Joinevtyp"
						},
						{
							"name": "Joinevststyp"
						},
						{
							"name": "Joinev"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tICSReferralID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tInitialContactID as integer,\n\t\tReason as string,\n\t\tOrigFailed as string,\n\t\tReferralGroupID as integer,\n\t\tFormNo as integer,\n\t\tParentsAware as string,\n\t\tChildAware as string,\n\t\tAnonymous as string,\n\t\tRecordedBy as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tContactType as string,\n\t\tProfContact as string,\n\t\tPersonMakingContact as string,\n\t\tRelToChild as string,\n\t\tSysAgency as string,\n\t\tProfNameOutSystem as string,\n\t\tProfPositionOutSystem as string,\n\t\tProfAgencyOutSystem as string,\n\t\tProfAddrOutSystem as string,\n\t\tProfTelOutSystem as string,\n\t\tStatus as string,\n\t\tCategoryType as string,\n\t\tSubCategory as string,\n\t\tSSConsent as string,\n\t\tCheckConsent as string,\n\t\tKeyAgencyID as integer,\n\t\tSourceType as string,\n\t\tOrigGroupRefID as integer,\n\t\tSuggDate as timestamp,\n\t\tReasonCode as string,\n\t\tCreationDate as timestamp,\n\t\tEndReason as string,\n\t\tRecordedByDept as string,\n\t\tSysProfessional as string,\n\t\tOutOfHours as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsrefer') ~> IcsRefer\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> Ppmark\nsource(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> Wfassessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> WfAssessmentType\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvStsTyp\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nSelect2, Filter4 join(PersonID == toInteger(left(MainRef, instr(MainRef, '/')-1)),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinppmark\nJoinppmark, Filter5 join(Select3@MarkerID == Select4@MarkerID\n\t&& left(MainRef, instr(MainRef, '/')-1) == FormLinkKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfassessment\nJoinwfassessment, WfAssessmentType join(Select4@TemplateID == WfAssessmentType@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinwfassessmenttype\nJoinwfassessmenttype, Filter2 join(Select4@TemplateID == toInteger(EventTypeInternalCode),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinevtyp\nJoinevtyp, Filter3 join(trim(Select4@Status) == trim(EventStatusTypeInternalCode),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinevststyp\nJoinevststyp, TblEv join(Select4@FormNo == toInteger(EventSourceKey)\n\t&& toDate(Select4@StartDate) == toDate(EventValidStartDate)\n\t&& TblEvTyp@EventTypeId == TblEv@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinev\nJoinev filter(in(['C','D','E'], Select4@Status)) ~> Filter1\nTblEvTyp filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_ASSESSMENT'),\r\n    notEquals(EventTypeInternalCode, 'PUPIL_ASSESSMENT')\r\n)) ~> Filter2\nTblEvStsTyp filter(equals(EventStatusTypeGroup, 'PUPIL_ASSESSMENT')) ~> Filter3\nSelect3 filter(and(\r\n    equals(right(UnitRef, minus(length(UnitRef),instr(UnitRef, '/'))+1), '/com.liquidlogic.assessment.DBAssessment'),\r\n    notEquals(SubStatus, 'X')\r\n)) ~> Filter4\nSelect4 filter(notEquals(Status, 'X')) ~> Filter5\nFilter1 select(mapColumn(\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionStartDate = EventTransactionStartDate,\n\t\tEventToStatusValidStartDate = Select4@StartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(EventToStatusTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusFlag = toBoolean(toString(null())),\n\t\tEventToStatusSourceId = 3,\n\t\tEventToStatusValidEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusRowInsertedDate = currentTimestamp(),\n\t\tEventToStatusCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)),toLong(0))) ~> AddFixedCols\nAggregate1 alterRow(insertIf(true())) ~> AlterRow1\nIcsRefer select(mapColumn(\n\t\tPersonID,\n\t\tStartDate,\n\t\tEndDate,\n\t\tInitialContactID,\n\t\tFormNo,\n\t\tAuditDate,\n\t\tSyncDate,\n\t\tProfTelOutSystem,\n\t\tStatus,\n\t\tCategoryType,\n\t\tSubCategory,\n\t\tSuggDate,\n\t\tReasonCode,\n\t\tCreationDate,\n\t\tEndReason\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nPpmark select(mapColumn(\n\t\tMarkerID,\n\t\tMainRef,\n\t\tUnitRef,\n\t\tStatusCode,\n\t\tSubStatus,\n\t\tStartDate,\n\t\tEndDate,\n\t\tDueDate,\n\t\tStartedBy,\n\t\tCompBy,\n\t\tReasons,\n\t\tStartedByDept,\n\t\tCompByDept,\n\t\tDataEntryDate,\n\t\tDataEntryBy,\n\t\tDataEntryByDept,\n\t\tSubKey,\n\t\tCancelReason,\n\t\tRealParentMarkerID,\n\t\tConsolidatedID,\n\t\tStartedStaffHistoryID,\n\t\tCompStaffHistoryID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nWfassessment select(mapColumn(\n\t\tFormNo,\n\t\tFormDate,\n\t\tFormCreator,\n\t\tTemplateID,\n\t\tMarkerID,\n\t\tGroupedFormNo,\n\t\tFormType,\n\t\tFormLink,\n\t\tFormLinkKey,\n\t\tStatus,\n\t\tCompletionDate,\n\t\tParentFormNo,\n\t\tModDate,\n\t\tSyncDate,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tEndReason,\n\t\tRevisionNo,\n\t\tOriginalFormNo,\n\t\tIDENTIFIER_ICSREFER\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nWfAssessmentType select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nAddFixedCols aggregate(groupBy(EventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionStartDate,\n\t\tEventToStatusValidStartDate,\n\t\tEventToStatusTransactionEndDate,\n\t\tEventToStatusFlag,\n\t\tEventToStatusSourceId,\n\t\tEventToStatusValidEndDate,\n\t\tEventToStatusDeleted,\n\t\tEventToStatusRowInsertedDate,\n\t\tEventToStatusCounter),\n\tCountAll = count(1)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventStatusTypeId as long,\n\t\tEventToStatusTransactionEndDate as timestamp,\n\t\tEventToStatusFlag as boolean,\n\t\tEventToStatusSourceId as integer,\n\t\tEventToStatusTransactionStartDate as timestamp,\n\t\tEventToStatusValidStartDate as timestamp,\n\t\tEventToStatusValidEndDate as timestamp,\n\t\tEventToStatusDeleted as timestamp,\n\t\tEventToStatusRowInsertedDate as timestamp,\n\t\tEventToStatusCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionEndDate,\n\t\tEventToStatusFlag,\n\t\tEventToStatusSourceId,\n\t\tEventToStatusTransactionStartDate,\n\t\tEventToStatusValidStartDate,\n\t\tEventToStatusValidEndDate,\n\t\tEventToStatusDeleted,\n\t\tEventToStatusRowInsertedDate,\n\t\tEventToStatusCounter\n\t)) ~> TblEvToSts"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToStatus')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToStatus6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsplacement"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icsperiodcare"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Icslegalorders"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "Ev"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "EvStsTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToStatus",
								"type": "DatasetReference"
							},
							"name": "EvToSts"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Joinicsperiodcare"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "JoinIcslegalorders"
						},
						{
							"name": "JoinWfpicklistitem"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "GroupBy"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "JoinEvStsTyp"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter7"
						}
					],
					"script": "source(output(\n\t\tPlacementID as integer,\n\t\tPersonID as integer,\n\t\tPlacementCode as string,\n\t\tPostCode as string,\n\t\tReason as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tAddrID as string,\n\t\tAddr as string,\n\t\tTelephone as string,\n\t\tPlacementLength as integer,\n\t\tMainCarerID as integer,\n\t\tHideInfo as string,\n\t\tHideName as string,\n\t\tHideAddress as string,\n\t\tHideRelChild as string,\n\t\tOutHoursName as string,\n\t\tOutHoursPhone as string,\n\t\tEndDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tPlacementType as string,\n\t\tOtherType as string,\n\t\tVersion as integer,\n\t\tFromBla as string,\n\t\tEndPrevious as string,\n\t\tAddrHistoID as integer,\n\t\tPeriodID as integer,\n\t\tPDistance as string,\n\t\tRelationID as integer,\n\t\tRelationID2 as integer,\n\t\tRelationID3 as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tFosterID as integer,\n\t\tLiveDate as timestamp,\n\t\tDeptID as string,\n\t\tPlacementProvider as string,\n\t\tPlacementLocation as string,\n\t\tPlacementChangeReason as string,\n\t\tEmergencyCarerName as string,\n\t\tEmergencyAddress as string,\n\t\tEndReason as string,\n\t\tAdoptionMarkerID as integer,\n\t\tPre_LPG_AddressKey as string,\n\t\tOfstedPlacementType as string,\n\t\tDecisionAchieved as string,\n\t\tDecisionAchievedComments as string,\n\t\tFFAIsPlanDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsplacement') ~> Icsplacement\nsource(output(\n\t\tPeriodID as integer,\n\t\tPersonID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tEndReason as string,\n\t\tCinCode as string,\n\t\tReasonCode as string,\n\t\tSyncFlag as string,\n\t\tACDetails as string,\n\t\tACDuration as string,\n\t\tNotes as string,\n\t\tACAccommodation as string,\n\t\tACAccommOther as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tLiveDate as timestamp,\n\t\tAdoptNumber as string,\n\t\tAdoptGender as string,\n\t\tAdoptLegalStatus as string,\n\t\tAdoptFromFoster as string,\n\t\tDateCancelled as timestamp,\n\t\tAdoptBestInterests as timestamp,\n\t\tAdoptAgree as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icsperiodcare') ~> Icsperiodcare\nsource(output(\n\t\tOrderID as integer,\n\t\tStartDate as timestamp,\n\t\tCourt as string,\n\t\tPersonID as integer,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tLegalStatus as string,\n\t\tExpDate as timestamp,\n\t\tComments as string,\n\t\tEndDate as timestamp,\n\t\tPeriodID as integer,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tSyncFlag as string,\n\t\tLiveDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/icslegalorders') ~> Icslegalorders\nsource(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> Ev\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvTyp\nsource(output(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> EvStsTyp\nIcsplacement select(mapColumn(\n\t\tAuditDate,\n\t\tPeriodID,\n\t\tPlacementID,\n\t\tLiveDate,\n\t\tPlacementCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, Filter1 join(Select1@PeriodID == Select2@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joinicsperiodcare\nIcsperiodcare select(mapColumn(\n\t\tPeriodID,\n\t\tLiveDate,\n\t\tPoCStart = StartDate,\n\t\tPoCEnd = EndDate,\n\t\tCinCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 filter(not(isNull(LiveDate))) ~> Filter1\nIcslegalorders select(mapColumn(\n\t\tPeriodID,\n\t\tLegalStatus,\n\t\tLegalStartDate = StartDate,\n\t\tLegalEndDate = EndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 filter(notEquals(LegalStatus, 'RESP75+')) ~> Filter2\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 filter(equals(pickid, 'ICSLegalStatus')) ~> Filter3\nJoinicsperiodcare, Filter2 join(Select2@PeriodID == Select3@PeriodID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcslegalorders\nJoinIcslegalorders, Filter3 join(LegalStatus == code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWfpicklistitem\nJoinWfpicklistitem derive(AuditDate = coalesce(AuditDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tPoCEnd = coalesce(PoCEnd, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tLegalStartDate = coalesce(LegalStartDate, toTimestamp('31-12-9999','dd-MM-yyyy')),\n\t\tLegalEndDate = coalesce(LegalEndDate, toTimestamp('31-12-9999','dd-MM-yyyy'))) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(PlacementID,\n\t\tPoCStart,\n\t\tPoCEnd,\n\t\tCinCode,\n\t\tLegalStartDate,\n\t\tLegalEndDate,\n\t\tLegalStatus,\n\t\tcode,\n\t\tSelect1@LiveDate,\n\t\tPlacementCode),\n\tCountAll = count(1)) ~> GroupBy\nGroupBy filter(and(\n    not(isNull(LiveDate)),\n    not(like(PlacementCode, 'T%'))\n)) ~> Filter4\nEvTyp filter(equals(EventTypeDescription, 'CHILDREN_IN_CARE')) ~> Filter5\nEvStsTyp filter(and(\r\n    equals(EventStatusTypeGroup, 'CHILDREN_IN_CARE'),\r\n    equals(EventStatusTypeSubGroup, 'CHILDREN_IN_CARE_LEGAL_STATUS')\r\n)) ~> Filter6\nFilter4, Ev join(PlacementID == toInteger(EventSourceKey)\n\t&& toDate(PoCStart) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, Filter5 join(Ev@EventTypeId == EvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nJoinEvTyp, Filter6 join(code == EventStatusTypeInternalCode,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvStsTyp\nJoinEvStsTyp derive(EventToStatusFlag = 1,\n\t\tEventToStatusSourceId = 3,\n\t\tEventToStatusDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusRowInsertedDate = currentTimestamp(),\n\t\tEventToStatusCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)),toLong(0))) ~> AddCols\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 aggregate(groupBy(EventId,\n\t\tEventStatusTypeId,\n\t\tEventTransactionStartDate,\n\t\tLegalStartDate,\n\t\tEventToStatusCounter),\n\tEventTransactionEndDate = max(EventTransactionEndDate),\n\t\tEventToStatusFlag = max(EventToStatusFlag),\n\t\tEventToStatusSourceId = max(EventToStatusSourceId),\n\t\tLegalEndDate = max(LegalEndDate),\n\t\tEventToStatusDeleted = max(EventToStatusDeleted),\n\t\tEventToStatusRowInsertedDate = max(EventToStatusRowInsertedDate)) ~> Aggregate1\nAddCols filter(not(isNull(EventTransactionStartDate))) ~> Filter7\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventStatusTypeId as long,\n\t\tEventToStatusTransactionEndDate as timestamp,\n\t\tEventToStatusFlag as boolean,\n\t\tEventToStatusSourceId as integer,\n\t\tEventToStatusTransactionStartDate as timestamp,\n\t\tEventToStatusValidStartDate as timestamp,\n\t\tEventToStatusValidEndDate as timestamp,\n\t\tEventToStatusDeleted as timestamp,\n\t\tEventToStatusRowInsertedDate as timestamp,\n\t\tEventToStatusCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventStatusTypeId','EventId','EventToStatusTransactionStartDate','EventToStatusValidStartDate','EventToStatusCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionEndDate = EventTransactionEndDate,\n\t\tEventToStatusFlag,\n\t\tEventToStatusSourceId,\n\t\tEventToStatusTransactionStartDate = EventTransactionStartDate,\n\t\tEventToStatusValidStartDate = LegalStartDate,\n\t\tEventToStatusValidEndDate = LegalEndDate,\n\t\tEventToStatusDeleted,\n\t\tEventToStatusRowInsertedDate,\n\t\tEventToStatusCounter\n\t)) ~> EvToSts"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToStatus')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventToStatus7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/7_CPC/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentType"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourcePpMark"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sourceEvTyp"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfAssessmentArchive"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "sourceTblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventStatusType",
								"type": "DatasetReference"
							},
							"name": "sourceEvStsTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventToStatus",
								"type": "DatasetReference"
							},
							"name": "sinkEv"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SelectAss"
						},
						{
							"name": "SelectAssTyp"
						},
						{
							"name": "JoinAss"
						},
						{
							"name": "JoinPp"
						},
						{
							"name": "SelectPp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinEvTyp"
						},
						{
							"name": "SelectEvTyp"
						},
						{
							"name": "FilterEvTyp"
						},
						{
							"name": "JoinAssArchive"
						},
						{
							"name": "SelectAssArchive"
						},
						{
							"name": "SelectEv"
						},
						{
							"name": "SelectEvStsTyp"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "JoinEv"
						},
						{
							"name": "JoinEvStsTyp"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "DerivedColumnAssArchive"
						}
					],
					"script": "source(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfAssessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> sourceWfAssessmentType\nsource(output(\n\t\tMarkerID as integer,\n\t\tMarkerKey as string,\n\t\tMainRef as string,\n\t\tPathRef as string,\n\t\tUnitRef as string,\n\t\tStatusCode as string,\n\t\tSubStatus as string,\n\t\tTaskID as integer,\n\t\tParentMarkerID as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tStartedBy as string,\n\t\tCompBy as string,\n\t\tReasons as string,\n\t\tStartedByDept as string,\n\t\tCompByDept as string,\n\t\tDataEntryDate as timestamp,\n\t\tDataEntryBy as string,\n\t\tDataEntryByDept as string,\n\t\tSubKey as string,\n\t\tCancelReason as string,\n\t\tRealParentMarkerID as integer,\n\t\tConsolidatedID as integer,\n\t\tStartedStaffHistoryID as integer,\n\t\tCompStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/ppmark') ~> sourcePpMark\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvTyp\nsource(output(\n\t\tArchiveID as integer,\n\t\tFormNo as integer,\n\t\tArchType as string,\n\t\tFormData as string,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tControlID as string,\n\t\tRenderInline as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmentarchive') ~> sourceWfAssessmentArchive\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTblEv\nsource(output(\n\t\tEventStatusTypeTransactionStartDate as timestamp,\n\t\tEventStatusTypeTransactionEndDate as timestamp,\n\t\tEventStatusTypeId as long,\n\t\tEventStatusTypeDescription as string,\n\t\tEventStatusTypeDeleted as timestamp,\n\t\tEventStatusTypeGroup as string,\n\t\tEventStatusTypeSourceId as long,\n\t\tEventStatusTypeRowInsertedDate as timestamp,\n\t\tEventStatusTypeSubGroup as string,\n\t\tEventStatusTypeInternalCode as string,\n\t\tEventStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceEvStsTyp\nsourceWfAssessmentType filter(and(\r\n    equals(Description, 'CP Conference Outcomes and Outline Plan'),\r\n    not(like('XX%', FormType))\r\n)) ~> Filter1\nsourceWfAssessment filter(notEquals(Status, 'X')) ~> Filter2\nFilter2 select(mapColumn(\n\t\tTemplateID,\n\t\tFormNo,\n\t\tMarkerID,\n\t\tCreationDate,\n\t\tStartDate,\n\t\tCompletionDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAss\nFilter1 select(mapColumn(\n\t\tTemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssTyp\nSelectAssTyp, SelectAss join(SelectAssTyp@TemplateID == SelectAss@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAss\nJoinAss, SelectPp join(SelectAss@MarkerID == SelectPp@MarkerID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPp\nsourcePpMark select(mapColumn(\n\t\tMarkerID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPp\nJoinAssArchive derive(CHILD_PROTECTION_CONFERENCE = 'CHILD_PROTECTION_CONFERENCE') ~> DerivedColumn1\nDerivedColumn1, FilterEvTyp join(CHILD_PROTECTION_CONFERENCE == EventTypeGroup,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvTyp\nsourceEvTyp select(mapColumn(\n\t\tEventTypeId,\n\t\tEventTypeGroup,\n\t\tEventTypeSubGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvTyp\nSelectEvTyp filter(isNull(EventTypeSubGroup)) ~> FilterEvTyp\nJoinPp, DerivedColumnAssArchive join(SelectAss@FormNo == SelectAssArchive@FormNo,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAssArchive\nFilter5 select(mapColumn(\n\t\tFormNo,\n\t\tFormData\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAssArchive\nsourceTblEv select(mapColumn(\n\t\tEventId,\n\t\tEventTypeId,\n\t\tEventTransactionStartDate,\n\t\tEventSourceKey,\n\t\tEventValidStartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEv\nFilter4 select(mapColumn(\n\t\tEventStatusTypeId,\n\t\tEventStatusTypeInternalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEvStsTyp\nsourceEvStsTyp filter(equals(EventStatusTypeGroup, 'CHILD_PROTECTION_CONFERENCE')) ~> Filter4\nJoinEvTyp, SelectEv join(SelectAss@FormNo == toInteger(EventSourceKey)\n\t&& SelectEvTyp@EventTypeId == SelectEv@EventTypeId\n\t&& toDate(StartDate) == toDate(EventValidStartDate),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEv\nJoinEv, SelectEvStsTyp join(Internal_Code == EventStatusTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEvStsTyp\nJoinEvStsTyp select(mapColumn(\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionStartDate = EventTransactionStartDate,\n\t\tEventToStatusValidStartDate = StartDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(EventToStatusTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventStatusTypeId = coalesce(EventStatusTypeId, -1),\n\t\tEventToStatusFlag = toBoolean('n'),\n\t\tEventToStatusSourceId = 3,\n\t\tEventToStatusValidEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventToStatusRowInsertedDate = currentTimestamp(),\n\t\tEventToStatusCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)), toLong(0))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(EventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionStartDate,\n\t\tEventToStatusValidStartDate,\n\t\tEventToStatusTransactionEndDate,\n\t\tEventToStatusFlag,\n\t\tEventToStatusSourceId,\n\t\tEventToStatusValidEndDate,\n\t\tEventToStatusDeleted,\n\t\tEventToStatusRowInsertedDate,\n\t\tEventToStatusCounter),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nsourceWfAssessmentArchive filter(equals(ControlID, 'IDInitDecisionsValidate')) ~> Filter5\nSelectAssArchive derive(Internal_Code = substring(FormData, \r\n    instr(FormData, 'Create Child '),\r\n    length('Create Child Protection Plan')\r\n)) ~> DerivedColumnAssArchive\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventId as long,\n\t\tEventStatusTypeId as long,\n\t\tEventToStatusTransactionEndDate as timestamp,\n\t\tEventToStatusFlag as boolean,\n\t\tEventToStatusSourceId as integer,\n\t\tEventToStatusTransactionStartDate as timestamp,\n\t\tEventToStatusValidStartDate as timestamp,\n\t\tEventToStatusValidEndDate as timestamp,\n\t\tEventToStatusDeleted as timestamp,\n\t\tEventToStatusRowInsertedDate as timestamp,\n\t\tEventToStatusCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventId','EventStatusTypeId','EventToStatusTransactionStartDate','EventToStatusValidStartDate','EventToStatusCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventId,\n\t\tEventStatusTypeId,\n\t\tEventToStatusTransactionEndDate,\n\t\tEventToStatusFlag,\n\t\tEventToStatusSourceId,\n\t\tEventToStatusTransactionStartDate,\n\t\tEventToStatusValidStartDate,\n\t\tEventToStatusValidEndDate,\n\t\tEventToStatusDeleted,\n\t\tEventToStatusRowInsertedDate,\n\t\tEventToStatusCounter\n\t)) ~> sinkEv"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToStatus')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"transformations": [
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "GroupByDistinctRows"
						},
						{
							"name": "FilterSchoolTransfer"
						},
						{
							"name": "FilterStudentExclusion"
						},
						{
							"name": "UnionFilters"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nAddFixedCols alterRow(upsertIf(true())) ~> UpsertIfTrue\nGroupByDistinctRows select(mapColumn(\n\t\tTYP_DESC = DESCRIPTION,\n\t\tTYP_GRP = GROUP,\n\t\tTYP_SUB_GRP = SUB_GROUP,\n\t\tTYP_INTRN_CD = INTERNAL_CODE,\n\t\tTYP_EXTRN_CD = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns\nUnionFilters derive(TYP_SRC_ID = 1,\n\t\tTYP_ROW_INST_DT = currentTimestamp(),\n\t\tTYP_TRNS_STR_DT = currentTimestamp(),\n\t\tTYP_TRNS_END_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL = toDate('31-12-9999','dd-MM-yyyy')) ~> AddFixedCols\nInternalReferenceData aggregate(groupBy(DESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tINTERNAL_CODE,\n\t\tEXTERNAL_CODE),\n\tCountall = count(1)) ~> GroupByDistinctRows\nRenameColumns filter(and(\r\nequals(TYP_GRP,\"PUPIL_EVENT\"),\r\nequals(TYP_DESC,\"SCHOOL_TRANSFER\")\r\n)) ~> FilterSchoolTransfer\nRenameColumns filter(and(\r\nequals(TYP_GRP,\"STUDENT_EXCLUSION\"),\r\nequals(TYP_DESC,\"STUDENT_EXCLUSION\")\r\n)) ~> FilterStudentExclusion\nFilterSchoolTransfer, FilterStudentExclusion union(byName: true)~> UnionFilters\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeGroup','EventTypeSubGroup','EventTypeInternalCode','EventTypeExternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeDescription = TYP_DESC,\n\t\tEventTypeGroup = TYP_GRP,\n\t\tEventTypeTransactionStartDate = TYP_TRNS_STR_DT,\n\t\tEventTypeTransactionEndDate = TYP_TRNS_END_DT,\n\t\tEventTypeDeleted = TYP_DEL,\n\t\tEventTypeSourceId = TYP_SRC_ID,\n\t\tEventTypeRowInsertedDate = TYP_ROW_INST_DT,\n\t\tEventTypeSubGroup = TYP_SUB_GRP,\n\t\tEventTypeInternalCode = TYP_INTRN_CD,\n\t\tEventTypeExternalCode = TYP_EXTRN_CD\n\t)) ~> TblEvTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceWfassessment"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "WfAssessmentType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "Join"
						},
						{
							"name": "RenameCols"
						}
					],
					"script": "source(output(\n\t\tFormNo as integer,\n\t\tProcessNo as integer,\n\t\tFormDate as timestamp,\n\t\tFormCreator as string,\n\t\tTemplateID as integer,\n\t\tMarkerID as integer,\n\t\tGroupedFormNo as integer,\n\t\tFormType as string,\n\t\tFormLink as string,\n\t\tFormLinkKey as string,\n\t\tStatus as string,\n\t\tComments as string,\n\t\tCompletionDate as timestamp,\n\t\tCompletionNotes as string,\n\t\tParentFormNo as integer,\n\t\tRepeatDate as timestamp,\n\t\tModDate as timestamp,\n\t\tSecure as string,\n\t\tSecureHidden as string,\n\t\tWSpaceHidden as string,\n\t\tViewType as string,\n\t\tAPlanNo as integer,\n\t\tConsent as string,\n\t\tTaskCompleteDate as timestamp,\n\t\tScoresArchived as timestamp,\n\t\tSource as string,\n\t\tIntegID as string,\n\t\tSyncDate as timestamp,\n\t\tApprover as string,\n\t\tApprovalDate as timestamp,\n\t\tRejectionComments as string,\n\t\tCreationDate as timestamp,\n\t\tStartDate as timestamp,\n\t\tCreatorDept as string,\n\t\tEDMIntegID as string,\n\t\tReqestedDate as timestamp,\n\t\tRequiredByDate as timestamp,\n\t\tTargetStartDate as timestamp,\n\t\tTargetEndDate as timestamp,\n\t\tActualStartDate as timestamp,\n\t\tActualEndDate as timestamp,\n\t\tOutcome as string,\n\t\tDelayReason as string,\n\t\tStartActionPlanning as string,\n\t\tProcessMode as integer,\n\t\tCopiedFrom as string,\n\t\tReportPeriod as string,\n\t\tEndReason as string,\n\t\tRevisionNo as integer,\n\t\tOriginalFormNo as integer,\n\t\tIDENTIFIER_ICSREFER as string,\n\t\tCANCELLATION_REASON as string,\n\t\tCANCELLED as string,\n\t\tContextLink as string,\n\t\tContextLinkKey as string,\n\t\tStaffHistoryID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessment') ~> sourceWfassessment\nsource(output(\n\t\tTemplateID as integer,\n\t\tDescription as string,\n\t\tFormType as string,\n\t\tValid as string,\n\t\tBranchDepts as string,\n\t\tHardRevision as integer,\n\t\tCustomerRevision as decimal(19,0),\n\t\tSoftRevision as integer,\n\t\tFilename as string,\n\t\tPlanEntity as string,\n\t\tFormCreator as string,\n\t\tDraftDate as timestamp,\n\t\tReleaseDate as timestamp,\n\t\tRetireDate as timestamp,\n\t\tAuditID as string,\n\t\tAuditDate as timestamp,\n\t\tSiteID as string,\n\t\tApprover as string,\n\t\tFolderID as integer,\n\t\tTargetEndDateTrigger as string,\n\t\tTargetEndDateDays as decimal(19,0),\n\t\tTargetEndInWorkingDays as string,\n\t\tTargetStartDateTrigger as string,\n\t\tTargetStartDateDays as decimal(19,0),\n\t\tTargetStartInWorkingDays as string,\n\t\tRequestedDateTrigger as string,\n\t\tRequestedDateDays as decimal(19,0),\n\t\tRequestedInWorkingDays as string,\n\t\tRequiredDateTrigger as string,\n\t\tRequiredDateDays as decimal(19,0),\n\t\tRequiredInWorkingDays as string,\n\t\tAltFormType as string,\n\t\tCFRFormTypeStream as string,\n\t\tLastParseDate as decimal(19,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfassessmenttype') ~> WfAssessmentType\nJoin aggregate(groupBy(WfAssessmentType@FormType,\n\t\tWfAssessmentType@TemplateID),\n\tCountAll = count(1)) ~> Aggregate1\nRenameCols derive(EventTypeGroup = 'PUPIL_ASSESSMENT',\n\t\tEventTypeDescription = EventTypeExternalCode,\n\t\tEventTypeInternalCode = toString(EventTypeInternalCode),\n\t\tEventTypeTransactionStartDate = currentTimestamp(),\n\t\tEventTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeSourceId = 3,\n\t\tEventTypeRowInsertedDate = currentTimestamp(),\n\t\tEventTypeSubGroup = toString(null())) ~> AddCols\nsourceWfassessment, WfAssessmentType join(sourceWfassessment@TemplateID == WfAssessmentType@TemplateID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join\nAggregate1 select(mapColumn(\n\t\tEventTypeExternalCode = FormType,\n\t\tEventTypeInternalCode = TemplateID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nAddCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode\n\t)) ~> TblEvTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/2_Contacts/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Wfpicklistitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"transformations": [
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "Filter"
						},
						{
							"name": "SelectRelevantCols2"
						},
						{
							"name": "AddFixedCols2"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Aggregate"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "UnionAll"
						}
					],
					"script": "source(output(\n\t\tpickid as string,\n\t\tcode as string,\n\t\tdescription as string,\n\t\tSecureCategory as string,\n\t\tExtra1 as string,\n\t\tExtra2 as string,\n\t\tCodeMap as string,\n\t\tDefCodeMap as string,\n\t\tExpired as string,\n\t\tNonExpirable as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tDeprecatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'liquidlogic/wfpicklistitem') ~> Wfpicklistitem\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tTYP_INT_CD = code,\n\t\tTYP_EXT_CD = code,\n\t\tTYP_DESC = description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols derive(TYP_GRP = 'ICS_CONTACT',\n\t\tTYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_START_DATE = currentTimestamp(),\n\t\tTYP_END_DATE = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_SRC_ID = 3,\n\t\tTYP_SUB_GRP = 'ICS_CONTACT',\n\t\tTYP_ROW_INST = currentTimestamp(),\n\t\tTYP_DESC = left(TYP_DESC, 70)) ~> AddFixedCols\nAggregate filter(equals(pickid, 'ICSContactSourceTypes')) ~> Filter\nWfpicklistitem select(mapColumn(\n\t\tpickid,\n\t\tTYP_INT_CD = code,\n\t\tTYP_EXT_CD = code,\n\t\tTYP_DESC = description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols2\nSelectRelevantCols2 derive(TYP_GRP = 'ECAF_CONTACT',\n\t\tTYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_START_DATE = currentTimestamp(),\n\t\tTYP_END_DATE = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_SRC_ID = 3,\n\t\tTYP_SUB_GRP = 'ECAF_CONTACT',\n\t\tTYP_ROW_INST = currentTimestamp(),\n\t\tTYP_DESC = left(TYP_DESC, 70)) ~> AddFixedCols2\nAddFixedCols2 aggregate(groupBy(pickid,\n\t\tTYP_ROW_INST,\n\t\tTYP_SUB_GRP,\n\t\tTYP_SRC_ID,\n\t\tTYP_END_DATE,\n\t\tTYP_START_DATE,\n\t\tTYP_DEL,\n\t\tTYP_GRP,\n\t\tTYP_INT_CD,\n\t\tTYP_DESC),\n\tCountAll = count(1)) ~> Aggregate2\nAddFixedCols aggregate(groupBy(pickid,\n\t\tTYP_ROW_INST,\n\t\tTYP_SUB_GRP,\n\t\tTYP_SRC_ID,\n\t\tTYP_END_DATE,\n\t\tTYP_START_DATE,\n\t\tTYP_DEL,\n\t\tTYP_GRP,\n\t\tTYP_DESC,\n\t\tTYP_INT_CD),\n\tCountAll = count(1)) ~> Aggregate\nAggregate2 filter(equals(pickid, 'ECAFContactSourceTypes')) ~> Filter2\nFilter2, Filter union(byName: true)~> UnionAll\nUnionAll sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeDescription = TYP_DESC,\n\t\tEventTypeGroup = TYP_GRP,\n\t\tEventTypeTransactionStartDate = TYP_START_DATE,\n\t\tEventTypeTransactionEndDate = TYP_END_DATE,\n\t\tEventTypeDeleted = TYP_DEL,\n\t\tEventTypeSourceId = TYP_SRC_ID,\n\t\tEventTypeRowInsertedDate = TYP_ROW_INST,\n\t\tEventTypeSubGroup = TYP_SUB_GRP,\n\t\tEventTypeInternalCode = TYP_INT_CD,\n\t\tEventTypeExternalCode = TYP_INT_CD\n\t)) ~> TblEvTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/3_Referral/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sinkEvTyp"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> source1\nsource1 filter(equals(GROUP, 'PUPIL_REFERRAL')) ~> Filter1\nFilter1 select(mapColumn(\n\t\tEventTypeDescription = DESCRIPTION,\n\t\tEventTypeGroup = GROUP,\n\t\tEventTypeSubGroup = SUB_GROUP,\n\t\tEventTypeInternalCode = INTERNAL_CODE,\n\t\tEventTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(EventTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeTransactionStartDate = currentTimestamp(),\n\t\tEventTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeSourceId = 0,\n\t\tEventTypeRowInsertedDate = currentTimestamp()) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(EventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkEvTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/4_CPP/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						}
					],
					"transformations": [
						{
							"name": "Select"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nInternalReferenceData select(mapColumn(\n\t\tTYP_DESC = DESCRIPTION,\n\t\tTYP_GRP = GROUP,\n\t\tTYP_SUB_GROUP = SUB_GROUP,\n\t\tTYP_INT_CD = INTERNAL_CODE,\n\t\tTYP_EXT_CD = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nSelect derive(TYP_START_DATE = currentTimestamp(),\n\t\tTYP_END_DATE = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_SRC_ID = 0,\n\t\tTYP_ROW_INST = currentTimestamp()) ~> AddCols\nAddCols filter(and(\r\n    equals(TYP_GRP, 'CHILD_PROTECTION_PLAN'),\r\n    isNull(TYP_SUB_GROUP)\r\n)) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeDescription = TYP_DESC,\n\t\tEventTypeGroup = TYP_GRP,\n\t\tEventTypeTransactionStartDate = TYP_START_DATE,\n\t\tEventTypeTransactionEndDate = TYP_END_DATE,\n\t\tEventTypeDeleted = TYP_DEL,\n\t\tEventTypeSourceId = TYP_SRC_ID,\n\t\tEventTypeRowInsertedDate = TYP_ROW_INST,\n\t\tEventTypeSubGroup = TYP_SUB_GROUP,\n\t\tEventTypeInternalCode = TYP_INT_CD,\n\t\tEventTypeExternalCode = TYP_EXT_CD\n\t)) ~> TblEvTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/5_CINP/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "sourceInternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> sourceInternalReferenceData\nFilter1 derive(EventTypeTransactionStartDate = currentTimestamp(),\n\t\tEventTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeRowInsertedDate = currentTimestamp(),\n\t\tEventTypeSourceId = 0) ~> DerivedColumn1\nsourceInternalReferenceData filter(equals(GROUP, 'CHILDREN_IN_NEED')) ~> Filter1\nDerivedColumn1 select(mapColumn(\n\t\tEventTypeDescription = DESCRIPTION,\n\t\tEventTypeGroup = GROUP,\n\t\tEventTypeSubGroup = SUB_GROUP,\n\t\tEventTypeInternalCode = INTERNAL_CODE,\n\t\tEventTypeExternalCode = EXTERNAL_CODE,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSourceId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeDescription','EventTypeGroup','EventTypeSubGroup','EventTypeInternalCode','EventTypeExternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/6_CIC/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "EvTyp"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nInternalReferenceData select(mapColumn(\n\t\tTYP_DESC = DESCRIPTION,\n\t\tTYP_GRP = GROUP,\n\t\tTYP_SUB_GRP = SUB_GROUP,\n\t\tTYP_INT_CD = INTERNAL_CODE,\n\t\tTYP_EXT_CD = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(TYP_START_DATE = currentTimestamp(),\n\t\tTYP_END_DATE = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\t{TYP_SRC_ID } = 0,\n\t\t{AS TYP_ROW_INST} = currentTimestamp()) ~> AddCols\nAddCols filter(equals(TYP_GRP, 'CHILDREN_IN_CARE')) ~> Filter1\nFilter1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeGroup','EventTypeDescription','EventTypeSubGroup','EventTypeInternalCode','EventTypeExternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeDescription = TYP_DESC,\n\t\tEventTypeGroup = TYP_GRP,\n\t\tEventTypeTransactionStartDate = TYP_START_DATE,\n\t\tEventTypeTransactionEndDate = TYP_END_DATE,\n\t\tEventTypeDeleted = TYP_DEL,\n\t\tEventTypeSourceId = {TYP_SRC_ID },\n\t\tEventTypeRowInsertedDate = {AS TYP_ROW_INST},\n\t\tEventTypeSubGroup = TYP_SUB_GRP,\n\t\tEventTypeInternalCode = TYP_INT_CD,\n\t\tEventTypeExternalCode = TYP_EXT_CD\n\t)) ~> EvTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblEventType7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/7_CPC/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "sinkEvStsTyp"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> source1\nSelect1 derive(EventTypeTransactionStartDate = currentTimestamp(),\n\t\tEventTypeTransactionEndDate = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeDeleted = toTimestamp('31-12-9999','dd-MM-yyyy'),\n\t\tEventTypeSourceId = 3,\n\t\tEventTypeRowInsertedDate = currentTimestamp()) ~> DerivedColumn1\nFilter1 select(mapColumn(\n\t\tEventTypeGroup = GROUP,\n\t\tEventTypeDescription = DESCRIPTION,\n\t\tEventTypeSubGroup = SUB_GROUP,\n\t\tEventTypeInternalCode = INTERNAL_CODE,\n\t\tEventTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsource1 filter(equals(GROUP, 'CHILD_PROTECTION_CONFERENCE')) ~> Filter1\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventTypeDescription','EventTypeGroup','EventTypeSubGroup','EventTypeInternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEventTypeDescription,\n\t\tEventTypeGroup,\n\t\tEventTypeTransactionStartDate,\n\t\tEventTypeTransactionEndDate,\n\t\tEventTypeDeleted,\n\t\tEventTypeSourceId,\n\t\tEventTypeRowInsertedDate,\n\t\tEventTypeSubGroup,\n\t\tEventTypeInternalCode,\n\t\tEventTypeExternalCode\n\t)) ~> sinkEvStsTyp"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblInstitution')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Institution"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "CityMasterSchoolInformation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblInstitution",
								"type": "DatasetReference"
							},
							"name": "TblInstitution"
						}
					],
					"transformations": [
						{
							"name": "SelectAndRenameCols"
						},
						{
							"name": "CastToIntegerCols"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "alterRow"
						}
					],
					"script": "source(output(\n\t\tsch_base_id as integer,\n\t\tsch_urn_no as integer,\n\t\tsch_dfe_no as integer,\n\t\tsch_name as string,\n\t\tsch_type as string,\n\t\tAllocation as string,\n\t\tsch_age_range as string,\n\t\tsch_roll as short,\n\t\tsch_roll_date as date,\n\t\tsch_add_one as string,\n\t\tsch_add_two as string,\n\t\tsch_add_three as string,\n\t\tsch_sponsor as string,\n\t\tsch_sponsor_date as date,\n\t\tSourceName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/CityMasterSchoolInformation') ~> CityMasterSchoolInformation\nCastToIntegerCols select(mapColumn(\n\t\tInstitutionSourceKey = sch_base_id,\n\t\tInstitutionURN = sch_urn_no,\n\t\tInstitutionDFE = sch_dfe_no,\n\t\tInstitutionName = sch_name,\n\t\tInstitutionPhase = sch_type,\n\t\tInstitutionAgeRange = sch_age_range\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAndRenameCols\nCityMasterSchoolInformation derive(sch_urn_no = toInteger(sch_urn_no),\n\t\tsch_base_id = toInteger(sch_base_id),\n\t\tsch_dfe_no = toInteger(sch_dfe_no)) ~> CastToIntegerCols\nSelectAndRenameCols derive(InstitutionDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionTransactionStartDate = toDate(toString(currentTimestamp(), \"dd-MM-YYY\"), \"dd-MM-YYY\"),\n\t\tInstitutionTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionSourceId = 1,\n\t\tInstitutionRowInstitutionDate = currentTimestamp(),\n\t\tInstitutionToHistory = -1) ~> AddFixedCols\nAddFixedCols alterRow(upsertIf(true())) ~> alterRow\nalterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tInstitutionURN as integer,\n\t\tInstitutionPhase as string,\n\t\tInstitutionName as string,\n\t\tInstitutionSourceKey as integer,\n\t\tInstitutionDeleted as timestamp,\n\t\tInstitutionTransactionStartDate as timestamp,\n\t\tInstitutionTransactionEndDate as timestamp,\n\t\tInstitutionAgeRange as string,\n\t\tInstitutionDFE as integer,\n\t\tInstitutionSourceId as integer,\n\t\tInstitutionRowInstitutionDate as timestamp,\n\t\tInstitutionToHistory as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError') ~> TblInstitution"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitution')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblInstitutionToInstitutionType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Institution"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "EducationDetails"
						},
						{
							"dataset": {
								"referenceName": "ds_TblInstitution",
								"type": "DatasetReference"
							},
							"name": "TblInstitution"
						},
						{
							"dataset": {
								"referenceName": "ds_TblInstitutionType",
								"type": "DatasetReference"
							},
							"name": "TblInstitutionType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblInstitutionToInstitutionType",
								"type": "DatasetReference"
							},
							"name": "TblInstitutionToInst"
						}
					],
					"transformations": [
						{
							"name": "alterRow"
						},
						{
							"name": "InnerJoinTblInstitution"
						},
						{
							"name": "AddSourceId"
						},
						{
							"name": "LeftJoinTblInstitutionType"
						},
						{
							"name": "FilterInstDelAndTrnsEndDt"
						},
						{
							"name": "AllocationColChange"
						},
						{
							"name": "FilterSchoolAllocationType"
						},
						{
							"name": "SelectCols"
						},
						{
							"name": "AddFixedRows"
						},
						{
							"name": "FilterNonNullInstTypId"
						}
					],
					"script": "source(output(\n\t\tsch_base_id as integer,\n\t\tsch_urn_no as integer,\n\t\tsch_dfe_no as integer,\n\t\tsch_name as string,\n\t\tsch_type as string,\n\t\tAllocation as string,\n\t\tsch_age_range as string,\n\t\tsch_roll as short,\n\t\tsch_roll_date as date,\n\t\tsch_add_one as string,\n\t\tsch_add_two as string,\n\t\tsch_add_three as string,\n\t\tsch_sponsor as string,\n\t\tsch_sponsor_date as date,\n\t\tSourceName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/CityMasterSchoolInformation') ~> EducationDetails\nsource(output(\n\t\tInstitutionId as long,\n\t\tInstitutionURN as integer,\n\t\tInstitutionPhase as string,\n\t\tInstitutionName as string,\n\t\tInstitutionSourceKey as integer,\n\t\tInstitutionDeleted as timestamp,\n\t\tInstitutionTransactionStartDate as timestamp,\n\t\tInstitutionTransactionEndDate as timestamp,\n\t\tInstitutionAgeRange as string,\n\t\tInstitutionDFE as integer,\n\t\tInstitutionSourceId as integer,\n\t\tInstitutionRowInstitutionDate as timestamp,\n\t\tInstitutionToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblInstitution\nsource(output(\n\t\tInstitutionTypeDeleted as timestamp,\n\t\tInstitutionTypeSourceId as integer,\n\t\tInstitutionTypeDescription as string,\n\t\tInstitutionTypeGroup as string,\n\t\tInstitutionTypeTransactionStartDate as timestamp,\n\t\tInstitutionTypeTransactionEndDate as timestamp,\n\t\tInstitutionTypeId as long,\n\t\tInstitutionTypeRowInsertedDate as timestamp,\n\t\tInstitutionTypeSubGroup as string,\n\t\tInstitutionTypeExternalCode as string,\n\t\tInstitutionTypeInternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblInstitutionType\nAddFixedRows alterRow(upsertIf(true())) ~> alterRow\nAddSourceId, FilterInstDelAndTrnsEndDt join(sch_base_id == InstitutionSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> InnerJoinTblInstitution\nEducationDetails derive(InstitutionToInstitutionTypeSourceId = 1) ~> AddSourceId\nAllocationColChange, FilterSchoolAllocationType join(Allocation == InstitutionTypeInternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinTblInstitutionType\nTblInstitution filter(and(\r\nequals(InstitutionDeleted,toTimestamp('9999-12-31 00:00:00')),\r\nequals(InstitutionTransactionEndDate,toTimestamp('9999-12-31 00:00:00'))\r\n)) ~> FilterInstDelAndTrnsEndDt\nInnerJoinTblInstitution derive(Allocation = iifNull(Allocation,'0',Allocation)) ~> AllocationColChange\nTblInstitutionType filter(equals(InstitutionTypeGroup,\"SCHOOL_ALLOCATION_TYPE\")) ~> FilterSchoolAllocationType\nLeftJoinTblInstitutionType select(mapColumn(\n\t\tInstitutionTypeId,\n\t\tInstitutionId,\n\t\tInstitutionToInstitutionTypeCounter = InstitutionId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCols\nFilterNonNullInstTypId derive(InstitutionToInstitutionTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionToInstitutionTypeCounter = 0,\n\t\tInstitutionToInstitutionTypeTransactionStartDate = currentTimestamp(),\n\t\tInstitutionToInstitutionTypeSourceId = 1,\n\t\tInstitutionToInstitutionTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionToInstitutionTypeValidStartDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionToInstitutionTypeValidEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionToInstitutionTypeRowInsertedDate = currentTimestamp(),\n\t\tInstitutionId = coalesce(InstitutionId,-1)) ~> AddFixedRows\nSelectCols filter(not(isNull(InstitutionTypeId))) ~> FilterNonNullInstTypId\nalterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionId as long,\n\t\tInstitutionToInstitutionTypeTransactionEndDate as timestamp,\n\t\tInstitutionToInstitutionTypeTransactionStartDate as timestamp,\n\t\tInstitutionToInstitutionTypeSourceId as integer,\n\t\tInstitutionToInstitutionTypeDeleted as timestamp,\n\t\tInstitutionTypeId as long,\n\t\tInstitutionToInstitutionTypeValidStartDate as timestamp,\n\t\tInstitutionToInstitutionTypeValidEndDate as timestamp,\n\t\tInstitutionToInstitutionTypeRowInsertedDate as timestamp,\n\t\tEventId as long,\n\t\tInstitutionToInstitutionTypeCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionId','InstitutionTypeId','InstitutionToInstitutionTypeValidStartDate'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionToInstitutionTypeRowInsertedDate,\n\t\tInstitutionId,\n\t\tInstitutionToInstitutionTypeTransactionEndDate,\n\t\tInstitutionToInstitutionTypeTransactionStartDate,\n\t\tInstitutionToInstitutionTypeSourceId,\n\t\tInstitutionToInstitutionTypeDeleted,\n\t\tInstitutionTypeId,\n\t\tInstitutionToInstitutionTypeValidStartDate,\n\t\tInstitutionToInstitutionTypeValidEndDate,\n\t\tInstitutionToInstitutionTypeCounter\n\t)) ~> TblInstitutionToInst"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitution')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitutionType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitutionToInstitutionType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblInstitutionType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "SchoolAllocation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblInstitutionType",
								"type": "DatasetReference"
							},
							"name": "InstitutionalType"
						}
					],
					"transformations": [
						{
							"name": "SelectCols"
						},
						{
							"name": "GroupBySchType"
						},
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "AddFixedColumns"
						},
						{
							"name": "RenameCols"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tsch_base_id as integer,\n\t\tsch_urn_no as integer,\n\t\tsch_dfe_no as integer,\n\t\tsch_name as string,\n\t\tsch_type as string,\n\t\tAllocation as string,\n\t\tsch_age_range as string,\n\t\tsch_roll as short,\n\t\tsch_roll_date as date,\n\t\tsch_add_one as string,\n\t\tsch_add_two as string,\n\t\tsch_add_three as string,\n\t\tsch_sponsor as string,\n\t\tsch_sponsor_date as date,\n\t\tSourceName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/CityMasterSchoolInformation') ~> SchoolAllocation\nRenameCols select(mapColumn(\n\t\tInstitutionTypeDescription = allocation,\n\t\tInstitutionTypeExternalCode = allocation,\n\t\tINST_TYPE_INTRN_CD = allocation\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCols\nSchoolAllocation aggregate(groupBy(Allocation),\n\tsch_type_count = count(1)) ~> GroupBySchType\nUnion1 alterRow(upsertIf(true())) ~> UpsertIfTrue\nSelectCols derive(InstitutionTypeSourceId = 1,\n\t\tInstitutionTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionTypeTransactionStartDate = currentTimestamp(),\n\t\tInstitutionTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tInstitutionTypeSubGroup = toString(null()),\n\t\tInstitutionTypeGroup = 'SCHOOL_ALLOCATION_TYPE',\n\t\tINST_TYPE_ROW_INST_DT = currentTimestamp()) ~> AddFixedColumns\nGroupBySchType select(mapColumn(\n\t\tallocation = Allocation\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nAddFixedColumns union(byName: true)~> Union1\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tInstitutionTypeDeleted as timestamp,\n\t\tInstitutionTypeSourceId as integer,\n\t\tInstitutionTypeDescription as string,\n\t\tInstitutionTypeGroup as string,\n\t\tInstitutionTypeTransactionStartDate as timestamp,\n\t\tInstitutionTypeTransactionEndDate as timestamp,\n\t\tInstitutionTypeId as long,\n\t\tInstitutionTypeRowInsertedDate as timestamp,\n\t\tInstitutionTypeSubGroup as string,\n\t\tInstitutionTypeExternalCode as string,\n\t\tInstitutionTypeInternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['InstitutionTypeGroup','InstitutionTypeSubGroup','InstitutionTypeExternalCode','InstitutionTypeInternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tInstitutionTypeDescription,\n\t\tInstitutionTypeExternalCode,\n\t\tInstitutionTypeInternalCode = INST_TYPE_INTRN_CD,\n\t\tInstitutionTypeSourceId,\n\t\tInstitutionTypeDeleted,\n\t\tInstitutionTypeTransactionStartDate,\n\t\tInstitutionTypeTransactionEndDate,\n\t\tInstitutionTypeSubGroup,\n\t\tInstitutionTypeGroup,\n\t\tInstitutionTypeRowInsertedDate = INST_TYPE_ROW_INST_DT\n\t)) ~> InstitutionalType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitutionType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPerson')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "EducationDetails"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "People"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPerson",
								"type": "DatasetReference"
							},
							"name": "TblPerson"
						}
					],
					"transformations": [
						{
							"name": "AddFixedAndDerivedCols"
						},
						{
							"name": "RenameCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectColsEducation"
						},
						{
							"name": "InnerJoinPeople"
						},
						{
							"name": "GroupByPeople"
						},
						{
							"name": "JoinPeople"
						},
						{
							"name": "SelectDistinctRows"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "CalculateDoDDoB"
						},
						{
							"name": "PersonIDtoInt"
						},
						{
							"name": "FilterOnActive"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter2"
						}
					],
					"script": "source(output(\n\t\tTRAN_EDATE as timestamp,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tINACTDATE as timestamp,\n\t\tACTIVE as string,\n\t\tINACTRSN as string,\n\t\tADDRESSEE as string,\n\t\tAT_MEMO as decimal(38,18),\n\t\tEC_BASEID as decimal(38,18),\n\t\tES_ORD as string,\n\t\tFORM7_CAT as string,\n\t\tFSMEAL as string,\n\t\tFSM_END as timestamp,\n\t\tGB_RECS as decimal(38,18),\n\t\tINCARE as string,\n\t\tISREFCODE as string,\n\t\tLEA_ROUTE as string,\n\t\tLEA_TRAN as string,\n\t\tMON_SOC as string,\n\t\tPRIM_NEED as string,\n\t\tSEN as string,\n\t\tSENSTAGE as string,\n\t\tSERV_FAM as string,\n\t\tSTAT_ISSD as timestamp,\n\t\tSTAT_REPT as timestamp,\n\t\tSTAT_STOP as timestamp,\n\t\tSTUD_AMEND as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tSTUD_TIME as string,\n\t\tSTUD_UPDT as string,\n\t\tSTUD_USER as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tTRAN_RECS as decimal(38,18),\n\t\tTRAV_FAM as string,\n\t\tLOCAL_UPI as string,\n\t\tASSESS_REC as string,\n\t\tACTIVE_SEN as string,\n\t\tACTIVE_TRN as string,\n\t\tCPD_BASE_ID as decimal(38,18),\n\t\tSTUD_ID_DESC as decimal(38,18),\n\t\tMOTHERTONGUE as string,\n\t\tMEDICAL as string,\n\t\tCONNEXIONS as string,\n\t\tNATIONALITY as string,\n\t\tPART_TIME as string,\n\t\tU_DATA_SHARING_CONSENT as string,\n\t\tEY_MEMO as decimal(38,18),\n\t\tU_CODE_RED as string,\n\t\tU_CODERED as string,\n\t\tU_CODES_RED as string,\n\t\tDEFERRED as string,\n\t\tU_U_KS5PLUS_GROUP as string,\n\t\tU_CIPC as string,\n\t\tU_CIE as string,\n\t\tAT_MEMO_EUPDATE as timestamp,\n\t\tGANDTINDICATOR as string,\n\t\tTRANSPORT_PROTECTED as string,\n\t\tTRANSPORT_PROTECTION_END as timestamp,\n\t\tCARER as string,\n\t\tPEP as string,\n\t\tTRAV_STATUS as string,\n\t\tTRAV_STATUS_DATA_SOURCE as string,\n\t\tTRAV_SITE_TYPE as string,\n\t\tTRAV_MOBILITY as string,\n\t\tDATE_FIRST_LOOKED_AFTER as timestamp,\n\t\tEOTAS as string,\n\t\tINCORRECT_DETAILS_ID as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tEY_2YEAR_FUNDING as string,\n\t\tEY_EFFECTIVE_DATE as timestamp,\n\t\tADOPTEDFROMCARE as string,\n\t\tPROTECTEDFSM as string,\n\t\tPROTECTEDFSMUNTIL as timestamp,\n\t\tAPP_CURRENT_BASE_ID as decimal(38,18),\n\t\tAPP_CURRENT_BASE_NAME as string,\n\t\tEOTAS_NIP as string,\n\t\tU_PARENTRESPONSIBLE as string,\n\t\tU_DBTEST1 as string,\n\t\tU_LASTPASS as timestamp,\n\t\tU_PEREXCL as string,\n\t\tU_PNEED as string,\n\t\tU_SENAREACODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/education_details') ~> EducationDetails\nsource(output(\n\t\tREFERENCE as string,\n\t\tBUS_PHONE as string,\n\t\tMOB_PHONE as string,\n\t\tFAX_NUMBER as string,\n\t\tEMAIL as string,\n\t\tPERSON_ID as decimal(38,18),\n\t\tDOB as timestamp,\n\t\tE_ORIGIN as string,\n\t\tFORENAME as string,\n\t\tGENDER as string,\n\t\tH_LANG as string,\n\t\tMIDNAME as string,\n\t\tSURNAME as string,\n\t\tTITLE as string,\n\t\tDISABILITY as string,\n\t\tREG_DISABL as string,\n\t\tGREEN_CARD as string,\n\t\tKIN_NAME as string,\n\t\tKIN_PHONE as string,\n\t\tKNOWN_BY as string,\n\t\tNI_NUMBER as string,\n\t\tPERSONNEL_CONTROL as string,\n\t\tEMPLOYEE as string,\n\t\tNI_KEY as string,\n\t\tNI_KEY_DESC as string,\n\t\tNAME_KEY as string,\n\t\tNAME_KEY_DESC as string,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tMEMO_ID as decimal(38,18),\n\t\tPOST_CODE as string,\n\t\tACTIVE as string,\n\t\tINACRSN as string,\n\t\tINACDATE as timestamp,\n\t\tASYLUM_SEEKER as string,\n\t\tNOTES_MEMO_ID as decimal(38,18),\n\t\tBLOB_ID as decimal(38,18),\n\t\tUPDATE_CALENDAR_ONLINE as string,\n\t\tU_TEST as string,\n\t\tUTAKING_PGM_FOR_CTS as string,\n\t\tUTAKING_PGM_FOR_HEAD as string,\n\t\tACHD_STD_FOR_HEAD as string,\n\t\tLEGAL_SURNAME as string,\n\t\tLEGAL_FORENAME as string,\n\t\tUPPER_LEGAL_SURNAME as string,\n\t\tUPPER_LEGAL_FORENAME as string,\n\t\tCHANGEBYBASE as decimal(38,18),\n\t\tU_EMPLOYE_STATUS as string,\n\t\tU_UNEMPLYE_PERIOD as string,\n\t\tU_PUBLIC_SECTOR as string,\n\t\tU_PUBLIC as string,\n\t\tU_REDUNDANCY as string,\n\t\tU_LESS_249 as string,\n\t\tH_LANG2 as string,\n\t\tHOME_REL as string,\n\t\tASYLUM_STATUS as string,\n\t\tUP_ID as string,\n\t\tUPPER_SURNAME as string,\n\t\tUPPER_FORENAME as string,\n\t\tFORENAME_METAPHONE as string,\n\t\tMIDNAME_METAPHONE as string,\n\t\tSURNAME_METAPHONE as string,\n\t\tL_SNAME_METAPHONE as string,\n\t\tL_FNAME_METAPHONE as string,\n\t\tIMPAIRMENTSTATUS as string,\n\t\tDATE_DECEASED as timestamp,\n\t\tDATE_NOTIFIED as timestamp,\n\t\tDATE_CONFIRMED as timestamp,\n\t\tACL as string,\n\t\tCOORDINATOR_NAME as string,\n\t\tHAS_HISTORICAL_EPISODE as string,\n\t\tHAS_LIVE_EPISODE as string,\n\t\tCOORDINATOR_ID as decimal(38,18),\n\t\tSUFFIX as string,\n\t\tGENDER_EXTRA as string,\n\t\tNAME_KEY_STUD as string,\n\t\tNAME_KEY_STUD_DESC as string,\n\t\tNCY as decimal(38,18),\n\t\tOS_NCY as decimal(38,18),\n\t\tNON_NCY as string,\n\t\tSTAGE as string,\n\t\tNCYSTAGE as string,\n\t\tCOUNTRY_ID as decimal(38,18),\n\t\tETHSOURCE as string,\n\t\tETHNIC_OR as string,\n\t\tSTUD_BASE_ID as decimal(38,18),\n\t\tLEA as string,\n\t\tF_LEA as string,\n\t\tR_LEA as string,\n\t\tU_PAYROLL_NO as decimal(38,18),\n\t\tU_SOCIAL_WORK as string,\n\t\tU_SOCIAL_START as timestamp,\n\t\tU_SOICAL_END as timestamp,\n\t\tULN as decimal(38,18),\n\t\tUPPER_MIDNAME as string,\n\t\tU_REG_NUMBER as string,\n\t\tU_CWDC as timestamp,\n\t\tU_CG_REG as string,\n\t\tU_CWDC_START as timestamp,\n\t\tNATIONAL_IDENTITY as string,\n\t\tSTOP_NOTICE as string,\n\t\tLEFT_ENGLAND as string,\n\t\tADULT_TRANSITION_DATE as timestamp,\n\t\tCONSENT as string,\n\t\tU_ADDR_CONF as string,\n\t\tU_NASS as string,\n\t\tU_U_PAYROLL_NUM as string,\n\t\tU_U_DIRECTORATE as string,\n\t\tU_DIRECTORATE as string,\n\t\tU_SERVICE_AREA as string,\n\t\tU_HCC_DIRECTORATE as string,\n\t\tU_HCC_SERVICE_AREA as string,\n\t\tU_HCC_ORGANISATION as string,\n\t\tU_GRADE as string,\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tBIRTH_CERT_SEEN as string,\n\t\tUCI as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tNASS_NUMBER as string,\n\t\tALERT_INFO as string,\n\t\tETAG as string,\n\t\tBIRTH_ID as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/people') ~> People\nJoinPeople derive(PersonDateOfBirth = coalesce(DOB,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPersonDateOfDeath = coalesce(DATE_DECEASED,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPersonGender = coalesce(GENDER,'-1'),\n\t\tPersonTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonTitle = coalesce(TITLE,'N/A'),\n\t\tPersonActive = iif(equals(SelectColsEducation@ACTIVE,'T'),1,0),\n\t\tPersonDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonRowInsertedDate = currentTimestamp(),\n\t\tPersonSourceId = 2,\n\t\tPersonToHistory = -1,\n\t\tPersonChecksum = concatWS(\" | \",MIDNAME,SURNAME,toString(DOB),toString(DATE_DECEASED),GENDER,FORENAME,TITLE,KNOWN_BY,LEGAL_FORENAME,LEGAL_SURNAME),\n\t\tPersonMdmId = -1) ~> AddFixedAndDerivedCols\nCalculateDoDDoB select(mapColumn(\n\t\tPersonMiddleName = MIDNAME,\n\t\tPersonSurname = SURNAME,\n\t\tPersonKnownBy = KNOWN_BY,\n\t\tPersonLegalForename = LEGAL_FORENAME,\n\t\tPersonLegalSurname = LEGAL_SURNAME,\n\t\tPersonDateOfBirth,\n\t\tPersonDateOfDeath,\n\t\tPersonGender,\n\t\tPersonTransactionStartDate = MAX_LAST_UPDT,\n\t\tPersonTransactionEndDate,\n\t\tPersonForename = FORENAME,\n\t\tPersonTitle,\n\t\tPersonActive,\n\t\tPersonDeleted,\n\t\tPersonRowInsertedDate,\n\t\tPersonSourceId,\n\t\tPersonToHistory,\n\t\tPersonChecksum,\n\t\tPersonSourceKey = PERSON_ID_UPDT,\n\t\tPersonMdmId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nSelectDistinctRows alterRow(upsertIf(true()),\n\tpartitionBy('hash', 3,\n\t\tPersonChecksum\n\t)) ~> AlterRow1\nEducationDetails select(mapColumn(\n\t\tLAST_UPDT,\n\t\tACTIVE,\n\t\tSTUD_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsEducation\nDerivedColumn1, FilterOnActive join(PERSON_ID_UPDT == PersonIDtoInt@PERSON_ID_INT\n\t&& MAX_LAST_UPDT == LAST_UPDT,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerJoinPeople\nFilterOnActive aggregate(groupBy(PERSON_ID_INT),\n\tMAX_LAST_UPDT = max(LAST_UPDT)) ~> GroupByPeople\nFilter2, InnerJoinPeople join(STUD_ID_INT == PERSON_ID_UPDT,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinPeople\nAggregate1 select(mapColumn(\n\t\tPersonMiddleName,\n\t\tPersonMdmId,\n\t\tPersonSurname,\n\t\tPersonLegalForename,\n\t\tPersonLegalSurname,\n\t\tPersonDateOfBirth,\n\t\tPersonDateOfDeath,\n\t\tPersonGender,\n\t\tPersonTransactionStartDate,\n\t\tPersonTransactionEndDate,\n\t\tPersonForename,\n\t\tPersonTitle,\n\t\tPersonActive,\n\t\tPersonDeleted,\n\t\tPersonRowInsertedDate,\n\t\tPersonSourceId,\n\t\tPersonToHistory,\n\t\tPersonChecksum,\n\t\tPersonSourceKey,\n\t\tPersonKnownBy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDistinctRows\nGroupByPeople derive(PERSON_ID_UPDT = toInteger(PERSON_ID_INT)) ~> DerivedColumn1\nSelectColsEducation derive(STUD_ID_INT = toInteger(STUD_ID)) ~> DerivedColumn3\nRenameCols derive(PersonDeleted = toTimestamp(PersonDeleted),\n\t\tPersonTransactionEndDate = toTimestamp(PersonTransactionEndDate)) ~> DerivedColumn4\nAddFixedAndDerivedCols derive(PersonDateOfDeath = iif(year(PersonDateOfDeath)<1753,toDate('31-12-9999','dd-MM-yyyy'),toDate(PersonDateOfDeath)),\n\t\tPersonDateOfBirth = iif(year(PersonDateOfBirth)<1753,toDate('31-12-9999','dd-MM-yyyy'),toDate(PersonDateOfBirth))) ~> CalculateDoDDoB\nPeople derive(PERSON_ID_INT = toInteger(PERSON_ID)) ~> PersonIDtoInt\nPersonIDtoInt filter(equals(ACTIVE,'T')) ~> FilterOnActive\nDerivedColumn4 aggregate(groupBy(PersonMiddleName,\n\t\tPersonSurname,\n\t\tPersonKnownBy,\n\t\tPersonLegalForename,\n\t\tPersonLegalSurname,\n\t\tPersonDateOfBirth,\n\t\tPersonDateOfDeath,\n\t\tPersonGender,\n\t\tPersonTransactionStartDate,\n\t\tPersonTransactionEndDate,\n\t\tPersonForename,\n\t\tPersonTitle,\n\t\tPersonActive,\n\t\tPersonDeleted,\n\t\tPersonRowInsertedDate,\n\t\tPersonSourceId,\n\t\tPersonToHistory,\n\t\tPersonChecksum,\n\t\tPersonSourceKey,\n\t\tPersonMdmId),\n\tCountAll = count(1)) ~> Aggregate1\nDerivedColumn3 filter(equals(ACTIVE,'T')) ~> Filter2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPersonId as long,\n\t\tPersonMdmId as decimal(18,0),\n\t\tPersonMiddleName as string,\n\t\tPersonSurname as string,\n\t\tPersonDateOfBirth as timestamp,\n\t\tPersonDateOfDeath as timestamp,\n\t\tPersonGender as string,\n\t\tPersonTransactionStartDate as timestamp,\n\t\tPersonTransactionEndDate as timestamp,\n\t\tPersonForename as string,\n\t\tPersonTitle as string,\n\t\tPersonActive as boolean,\n\t\tPersonKnownBy as string,\n\t\tPersonLegalSurname as string,\n\t\tPersonLegalForename as string,\n\t\tPersonSourceKey as decimal(18,0),\n\t\tPersonChecksum as string,\n\t\tPersonDeleted as timestamp,\n\t\tPersonSourceId as long,\n\t\tPersonRowInsertedDate as timestamp,\n\t\tPersonToHistory as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PersonTransactionStartDate','PersonTransactionEndDate','PersonSourceKey','PersonDeleted','PersonSourceId'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPersonMdmId,\n\t\tPersonMiddleName,\n\t\tPersonSurname,\n\t\tPersonDateOfBirth,\n\t\tPersonDateOfDeath,\n\t\tPersonGender,\n\t\tPersonTransactionStartDate,\n\t\tPersonTransactionEndDate,\n\t\tPersonForename,\n\t\tPersonTitle,\n\t\tPersonActive,\n\t\tPersonKnownBy,\n\t\tPersonLegalSurname,\n\t\tPersonLegalForename,\n\t\tPersonSourceKey,\n\t\tPersonChecksum,\n\t\tPersonDeleted,\n\t\tPersonSourceId,\n\t\tPersonRowInsertedDate,\n\t\tPersonToHistory\n\t)) ~> TblPerson"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPerson')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPersonStatusType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "InternalReferenceData"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "LookUpFull"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPersonStatusType",
								"type": "DatasetReference"
							},
							"name": "TblPersonStatusType"
						}
					],
					"transformations": [
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "FilterActiveSenTypCode"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "GroupByDistinctRows"
						},
						{
							"name": "FilterStudentInCareTyp"
						},
						{
							"name": "UnionFilters"
						},
						{
							"name": "FilterLookUp"
						},
						{
							"name": "GroupByExclCat"
						},
						{
							"name": "RenameCols"
						},
						{
							"name": "AddFixedColumns"
						},
						{
							"name": "UnionLookUps"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> InternalReferenceData\nsource(output(\n\t\tCODE_DES as string,\n\t\tEXT_CODE as string,\n\t\tINACTIVE as string,\n\t\tINT_CODE as string,\n\t\tTABLE_ID as string,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tRECORD_ID as decimal(38,18),\n\t\tLOCALE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/lookups_full') ~> LookUpFull\nUnionLookUps alterRow(upsertIf(true())) ~> UpsertIfTrue\nGroupByDistinctRows select(mapColumn(\n\t\tPersonStatusTypeDescription = DESCRIPTION,\n\t\tPersonStatusTypeGroup = GROUP,\n\t\tPersonStatusTypeSubGroup = SUB_GROUP,\n\t\tPersonStatusTypeInternalCode = INTERNAL_CODE,\n\t\tPersonStatusTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns\nRenameColumns filter(and(\r\nequals(PersonStatusTypeGroup,\"PUPIL_STATUS\"),\r\nequals(PersonStatusTypeDescription,\"ACTIVE_SEN\")\r\n)) ~> FilterActiveSenTypCode\nUnionFilters derive(PersonStatusTypeSourceId = 1,\n\t\tPersonStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tPersonStatusTypeTransactionStartDate = currentTimestamp(),\n\t\tPersonStatusTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonStatusTypeDeleted = toDate('31-12-9999','dd-MM-yyyy')) ~> AddFixedCols\nInternalReferenceData aggregate(groupBy(DESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tINTERNAL_CODE,\n\t\tEXTERNAL_CODE),\n\tCountall = count(1)) ~> GroupByDistinctRows\nRenameColumns filter(and(\r\nequals(PersonStatusTypeGroup,\"PUPIL_STATUS\"),\r\nequals(PersonStatusTypeDescription,\"STUDENT_IN_CARE\")\r\n)) ~> FilterStudentInCareTyp\nFilterActiveSenTypCode, FilterStudentInCareTyp union(byName: true)~> UnionFilters\nLookUpFull filter(and(and(equals(LOCALE, '1'), equals(TABLE_ID, \"0608\")), equals(INACTIVE, \"F\"))) ~> FilterLookUp\nFilterLookUp aggregate(groupBy(CODE_DES,\n\t\tINT_CODE,\n\t\tEXT_CODE),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByExclCat\nGroupByExclCat select(mapColumn(\n\t\tPersonStatusTypeDescription = CODE_DES,\n\t\tPersonStatusTypeTransactionStartDate = LAST_UPDT,\n\t\tPersonStatusTypeInternalCode = INT_CODE,\n\t\tPersonStatusTypeExternalCode = EXT_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nRenameCols derive(PersonStatusTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonStatusTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonStatusTypeSourceId = 2,\n\t\tPersonStatusTypeRowInsertedDate = currentTimestamp(),\n\t\tPersonStatusTypeSubGroup = \"SEN_STAGE\",\n\t\tPersonStatusTypeGroup = \"PUPIL_STATUS\",\n\t\tPersonStatusTypeTransactionStartDate = coalesce(PersonStatusTypeTransactionStartDate,toDate('31-12-9999','dd-MM-yyyy'))) ~> AddFixedColumns\nAddFixedCols, AddFixedColumns union(byName: true)~> UnionLookUps\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPersonStatusTypeId as long,\n\t\tPersonStatusTypeDescription as string,\n\t\tPersonStatusTypeGroup as string,\n\t\tPersonStatusTypeTransactionStartDate as timestamp,\n\t\tPersonStatusTypeTransactionEndDate as timestamp,\n\t\tPersonStatusTypeDeleted as timestamp,\n\t\tPersonStatusTypeSourceId as integer,\n\t\tPersonStatusTypeRowInsertedDate as timestamp,\n\t\tPersonStatusTypeSubGroup as string,\n\t\tPersonStatusTypeInternalCode as string,\n\t\tPersonStatusTypeExternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PersonStatusTypeGroup','PersonStatusTypeSubGroup','PersonStatusTypeInternalCode','PersonStatusTypeExternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPersonStatusTypeDescription,\n\t\tPersonStatusTypeGroup,\n\t\tPersonStatusTypeTransactionStartDate,\n\t\tPersonStatusTypeTransactionEndDate,\n\t\tPersonStatusTypeDeleted,\n\t\tPersonStatusTypeSourceId,\n\t\tPersonStatusTypeRowInsertedDate,\n\t\tPersonStatusTypeSubGroup,\n\t\tPersonStatusTypeInternalCode,\n\t\tPersonStatusTypeExternalCode\n\t)) ~> TblPersonStatusType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPersonStatusType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPersonToPupil')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "EducationDetails"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPerson",
								"type": "DatasetReference"
							},
							"name": "TblPerson"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPersonToPupil",
								"type": "DatasetReference"
							},
							"name": "TblPersonToPupil"
						}
					],
					"transformations": [
						{
							"name": "FilterOnActive"
						},
						{
							"name": "InnerJoinPrs"
						},
						{
							"name": "SelectColsPrs"
						},
						{
							"name": "AddFixedAndDerivedCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectColsEducation"
						},
						{
							"name": "GroupByMaxLastDT"
						},
						{
							"name": "SelectColsPup"
						},
						{
							"name": "InnerJoinPup"
						},
						{
							"name": "SelectFinalCols"
						}
					],
					"script": "source(output(\n\t\tTRAN_EDATE as timestamp,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tINACTDATE as timestamp,\n\t\tACTIVE as string,\n\t\tINACTRSN as string,\n\t\tADDRESSEE as string,\n\t\tAT_MEMO as decimal(38,18),\n\t\tEC_BASEID as decimal(38,18),\n\t\tES_ORD as string,\n\t\tFORM7_CAT as string,\n\t\tFSMEAL as string,\n\t\tFSM_END as timestamp,\n\t\tGB_RECS as decimal(38,18),\n\t\tINCARE as string,\n\t\tISREFCODE as string,\n\t\tLEA_ROUTE as string,\n\t\tLEA_TRAN as string,\n\t\tMON_SOC as string,\n\t\tPRIM_NEED as string,\n\t\tSEN as string,\n\t\tSENSTAGE as string,\n\t\tSERV_FAM as string,\n\t\tSTAT_ISSD as timestamp,\n\t\tSTAT_REPT as timestamp,\n\t\tSTAT_STOP as timestamp,\n\t\tSTUD_AMEND as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tSTUD_TIME as string,\n\t\tSTUD_UPDT as string,\n\t\tSTUD_USER as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tTRAN_RECS as decimal(38,18),\n\t\tTRAV_FAM as string,\n\t\tLOCAL_UPI as string,\n\t\tASSESS_REC as string,\n\t\tACTIVE_SEN as string,\n\t\tACTIVE_TRN as string,\n\t\tCPD_BASE_ID as decimal(38,18),\n\t\tSTUD_ID_DESC as decimal(38,18),\n\t\tMOTHERTONGUE as string,\n\t\tMEDICAL as string,\n\t\tCONNEXIONS as string,\n\t\tNATIONALITY as string,\n\t\tPART_TIME as string,\n\t\tU_DATA_SHARING_CONSENT as string,\n\t\tEY_MEMO as decimal(38,18),\n\t\tU_CODE_RED as string,\n\t\tU_CODERED as string,\n\t\tU_CODES_RED as string,\n\t\tDEFERRED as string,\n\t\tU_U_KS5PLUS_GROUP as string,\n\t\tU_CIPC as string,\n\t\tU_CIE as string,\n\t\tAT_MEMO_EUPDATE as timestamp,\n\t\tGANDTINDICATOR as string,\n\t\tTRANSPORT_PROTECTED as string,\n\t\tTRANSPORT_PROTECTION_END as timestamp,\n\t\tCARER as string,\n\t\tPEP as string,\n\t\tTRAV_STATUS as string,\n\t\tTRAV_STATUS_DATA_SOURCE as string,\n\t\tTRAV_SITE_TYPE as string,\n\t\tTRAV_MOBILITY as string,\n\t\tDATE_FIRST_LOOKED_AFTER as timestamp,\n\t\tEOTAS as string,\n\t\tINCORRECT_DETAILS_ID as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tEY_2YEAR_FUNDING as string,\n\t\tEY_EFFECTIVE_DATE as timestamp,\n\t\tADOPTEDFROMCARE as string,\n\t\tPROTECTEDFSM as string,\n\t\tPROTECTEDFSMUNTIL as timestamp,\n\t\tAPP_CURRENT_BASE_ID as decimal(38,18),\n\t\tAPP_CURRENT_BASE_NAME as string,\n\t\tEOTAS_NIP as string,\n\t\tU_PARENTRESPONSIBLE as string,\n\t\tU_DBTEST1 as string,\n\t\tU_LASTPASS as timestamp,\n\t\tU_PEREXCL as string,\n\t\tU_PNEED as string,\n\t\tU_SENAREACODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/education_details') ~> EducationDetails\nsource(output(\n\t\tPersonId as long,\n\t\tPersonMdmId as decimal(18,0),\n\t\tPersonMiddleName as string,\n\t\tPersonSurname as string,\n\t\tPersonDateOfBirth as timestamp,\n\t\tPersonDateOfDeath as timestamp,\n\t\tPersonGender as string,\n\t\tPersonTransactionStartDate as timestamp,\n\t\tPersonTransactionEndDate as timestamp,\n\t\tPersonForename as string,\n\t\tPersonTitle as string,\n\t\tPersonActive as boolean,\n\t\tPersonKnownBy as string,\n\t\tPersonLegalSurname as string,\n\t\tPersonLegalForename as string,\n\t\tPersonSourceKey as decimal(18,0),\n\t\tPersonChecksum as string,\n\t\tPersonDeleted as timestamp,\n\t\tPersonSourceId as long,\n\t\tPersonRowInsertedDate as timestamp,\n\t\tPersonToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPerson\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nGroupByMaxLastDT filter(equals(ACTIVE, 'T')) ~> FilterOnActive\nSelectColsEducation, SelectColsPrs join(STUD_ID == PersonSourceKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerJoinPrs\nTblPerson select(mapColumn(\n\t\tPersonSourceKey,\n\t\tPersonId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsPrs\nInnerJoinPup derive(PupilId = coalesce(PupilId,-1),\n\t\tPersonId = coalesce(PersonId,-1),\n\t\tPersonToPupilTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonToPupilSourceId = 2,\n\t\tPersonToPupilTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPersonToPupilDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonToPupilRowInsertedDate = currentTimestamp(),\n\t\tEventId = 0,\n\t\tPersonToPupilCounter = iif(or(or(equals(PersonId,0),equals(PersonId,-1)),equals(PersonId,0)),1,0)) ~> AddFixedAndDerivedCols\nSelectFinalCols alterRow(upsertIf(true())) ~> AlterRow1\nFilterOnActive select(mapColumn(\n\t\tLAST_UPDT,\n\t\tACTIVE,\n\t\tSTUD_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsEducation\nEducationDetails aggregate(groupBy(ACTIVE,\n\t\tSTUD_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByMaxLastDT\nTblPupil select(mapColumn(\n\t\tPupilId,\n\t\tPupilSourceKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsPup\nInnerJoinPrs, SelectColsPup join(STUD_ID == PupilSourceKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerJoinPup\nAddFixedAndDerivedCols select(mapColumn(\n\t\tPersonId,\n\t\tPupilId,\n\t\tPupilSourceKey,\n\t\tPersonToPupilTransactionEndDate,\n\t\tPersonToPupilSourceId,\n\t\tPersonToPupilTransactionStartDate,\n\t\tPersonToPupilDeleted,\n\t\tPersonToPupilRowInsertedDate,\n\t\tEventId,\n\t\tPersonToPupilCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalCols\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tPersonId as long,\n\t\tPersonToPupilTransactionEndDate as timestamp,\n\t\tPersonToPupilSourceId as integer,\n\t\tPersonToPupilTransactionStartDate as timestamp,\n\t\tPersonToPupilDeleted as timestamp,\n\t\tPersonToPupilRowInsertedDate as timestamp,\n\t\tEventId as long,\n\t\tPersonToPupilCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId','PersonId','PersonToPupilTransactionStartDate','PersonToPupilTransactionEndDate','PersonToPupilCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tPersonId,\n\t\tPersonToPupilTransactionEndDate,\n\t\tPersonToPupilSourceId,\n\t\tPersonToPupilTransactionStartDate,\n\t\tPersonToPupilDeleted,\n\t\tPersonToPupilRowInsertedDate,\n\t\tEventId,\n\t\tPersonToPupilCounter\n\t)) ~> TblPersonToPupil"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPerson')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPersonToPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPupil')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "EducationDetails"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "People"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPerson",
								"type": "DatasetReference"
							},
							"name": "TblPerson"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "People2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						}
					],
					"transformations": [
						{
							"name": "InnerJoinPeople"
						},
						{
							"name": "SelectCols"
						},
						{
							"name": "AddFixedAndDerivedCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectColsEducation"
						},
						{
							"name": "GroupByMaxLastDT"
						},
						{
							"name": "InnerJoinPrs"
						},
						{
							"name": "SelectPRSId"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						}
					],
					"script": "source(output(\n\t\tTRAN_EDATE as timestamp,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tINACTDATE as timestamp,\n\t\tACTIVE as string,\n\t\tINACTRSN as string,\n\t\tADDRESSEE as string,\n\t\tAT_MEMO as decimal(38,18),\n\t\tEC_BASEID as decimal(38,18),\n\t\tES_ORD as string,\n\t\tFORM7_CAT as string,\n\t\tFSMEAL as string,\n\t\tFSM_END as timestamp,\n\t\tGB_RECS as decimal(38,18),\n\t\tINCARE as string,\n\t\tISREFCODE as string,\n\t\tLEA_ROUTE as string,\n\t\tLEA_TRAN as string,\n\t\tMON_SOC as string,\n\t\tPRIM_NEED as string,\n\t\tSEN as string,\n\t\tSENSTAGE as string,\n\t\tSERV_FAM as string,\n\t\tSTAT_ISSD as timestamp,\n\t\tSTAT_REPT as timestamp,\n\t\tSTAT_STOP as timestamp,\n\t\tSTUD_AMEND as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tSTUD_TIME as string,\n\t\tSTUD_UPDT as string,\n\t\tSTUD_USER as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tTRAN_RECS as decimal(38,18),\n\t\tTRAV_FAM as string,\n\t\tLOCAL_UPI as string,\n\t\tASSESS_REC as string,\n\t\tACTIVE_SEN as string,\n\t\tACTIVE_TRN as string,\n\t\tCPD_BASE_ID as decimal(38,18),\n\t\tSTUD_ID_DESC as decimal(38,18),\n\t\tMOTHERTONGUE as string,\n\t\tMEDICAL as string,\n\t\tCONNEXIONS as string,\n\t\tNATIONALITY as string,\n\t\tPART_TIME as string,\n\t\tU_DATA_SHARING_CONSENT as string,\n\t\tEY_MEMO as decimal(38,18),\n\t\tU_CODE_RED as string,\n\t\tU_CODERED as string,\n\t\tU_CODES_RED as string,\n\t\tDEFERRED as string,\n\t\tU_U_KS5PLUS_GROUP as string,\n\t\tU_CIPC as string,\n\t\tU_CIE as string,\n\t\tAT_MEMO_EUPDATE as timestamp,\n\t\tGANDTINDICATOR as string,\n\t\tTRANSPORT_PROTECTED as string,\n\t\tTRANSPORT_PROTECTION_END as timestamp,\n\t\tCARER as string,\n\t\tPEP as string,\n\t\tTRAV_STATUS as string,\n\t\tTRAV_STATUS_DATA_SOURCE as string,\n\t\tTRAV_SITE_TYPE as string,\n\t\tTRAV_MOBILITY as string,\n\t\tDATE_FIRST_LOOKED_AFTER as timestamp,\n\t\tEOTAS as string,\n\t\tINCORRECT_DETAILS_ID as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tEY_2YEAR_FUNDING as string,\n\t\tEY_EFFECTIVE_DATE as timestamp,\n\t\tADOPTEDFROMCARE as string,\n\t\tPROTECTEDFSM as string,\n\t\tPROTECTEDFSMUNTIL as timestamp,\n\t\tAPP_CURRENT_BASE_ID as decimal(38,18),\n\t\tAPP_CURRENT_BASE_NAME as string,\n\t\tEOTAS_NIP as string,\n\t\tU_PARENTRESPONSIBLE as string,\n\t\tU_DBTEST1 as string,\n\t\tU_LASTPASS as timestamp,\n\t\tU_PEREXCL as string,\n\t\tU_PNEED as string,\n\t\tU_SENAREACODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/education_details') ~> EducationDetails\nsource(output(\n\t\tREFERENCE as string,\n\t\tBUS_PHONE as string,\n\t\tMOB_PHONE as string,\n\t\tFAX_NUMBER as string,\n\t\tEMAIL as string,\n\t\tPERSON_ID as decimal(38,18),\n\t\tDOB as timestamp,\n\t\tE_ORIGIN as string,\n\t\tFORENAME as string,\n\t\tGENDER as string,\n\t\tH_LANG as string,\n\t\tMIDNAME as string,\n\t\tSURNAME as string,\n\t\tTITLE as string,\n\t\tDISABILITY as string,\n\t\tREG_DISABL as string,\n\t\tGREEN_CARD as string,\n\t\tKIN_NAME as string,\n\t\tKIN_PHONE as string,\n\t\tKNOWN_BY as string,\n\t\tNI_NUMBER as string,\n\t\tPERSONNEL_CONTROL as string,\n\t\tEMPLOYEE as string,\n\t\tNI_KEY as string,\n\t\tNI_KEY_DESC as string,\n\t\tNAME_KEY as string,\n\t\tNAME_KEY_DESC as string,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tMEMO_ID as decimal(38,18),\n\t\tPOST_CODE as string,\n\t\tACTIVE as string,\n\t\tINACRSN as string,\n\t\tINACDATE as timestamp,\n\t\tASYLUM_SEEKER as string,\n\t\tNOTES_MEMO_ID as decimal(38,18),\n\t\tBLOB_ID as decimal(38,18),\n\t\tUPDATE_CALENDAR_ONLINE as string,\n\t\tU_TEST as string,\n\t\tUTAKING_PGM_FOR_CTS as string,\n\t\tUTAKING_PGM_FOR_HEAD as string,\n\t\tACHD_STD_FOR_HEAD as string,\n\t\tLEGAL_SURNAME as string,\n\t\tLEGAL_FORENAME as string,\n\t\tUPPER_LEGAL_SURNAME as string,\n\t\tUPPER_LEGAL_FORENAME as string,\n\t\tCHANGEBYBASE as decimal(38,18),\n\t\tU_EMPLOYE_STATUS as string,\n\t\tU_UNEMPLYE_PERIOD as string,\n\t\tU_PUBLIC_SECTOR as string,\n\t\tU_PUBLIC as string,\n\t\tU_REDUNDANCY as string,\n\t\tU_LESS_249 as string,\n\t\tH_LANG2 as string,\n\t\tHOME_REL as string,\n\t\tASYLUM_STATUS as string,\n\t\tUP_ID as string,\n\t\tUPPER_SURNAME as string,\n\t\tUPPER_FORENAME as string,\n\t\tFORENAME_METAPHONE as string,\n\t\tMIDNAME_METAPHONE as string,\n\t\tSURNAME_METAPHONE as string,\n\t\tL_SNAME_METAPHONE as string,\n\t\tL_FNAME_METAPHONE as string,\n\t\tIMPAIRMENTSTATUS as string,\n\t\tDATE_DECEASED as timestamp,\n\t\tDATE_NOTIFIED as timestamp,\n\t\tDATE_CONFIRMED as timestamp,\n\t\tACL as string,\n\t\tCOORDINATOR_NAME as string,\n\t\tHAS_HISTORICAL_EPISODE as string,\n\t\tHAS_LIVE_EPISODE as string,\n\t\tCOORDINATOR_ID as decimal(38,18),\n\t\tSUFFIX as string,\n\t\tGENDER_EXTRA as string,\n\t\tNAME_KEY_STUD as string,\n\t\tNAME_KEY_STUD_DESC as string,\n\t\tNCY as decimal(38,18),\n\t\tOS_NCY as decimal(38,18),\n\t\tNON_NCY as string,\n\t\tSTAGE as string,\n\t\tNCYSTAGE as string,\n\t\tCOUNTRY_ID as decimal(38,18),\n\t\tETHSOURCE as string,\n\t\tETHNIC_OR as string,\n\t\tSTUD_BASE_ID as decimal(38,18),\n\t\tLEA as string,\n\t\tF_LEA as string,\n\t\tR_LEA as string,\n\t\tU_PAYROLL_NO as decimal(38,18),\n\t\tU_SOCIAL_WORK as string,\n\t\tU_SOCIAL_START as timestamp,\n\t\tU_SOICAL_END as timestamp,\n\t\tULN as decimal(38,18),\n\t\tUPPER_MIDNAME as string,\n\t\tU_REG_NUMBER as string,\n\t\tU_CWDC as timestamp,\n\t\tU_CG_REG as string,\n\t\tU_CWDC_START as timestamp,\n\t\tNATIONAL_IDENTITY as string,\n\t\tSTOP_NOTICE as string,\n\t\tLEFT_ENGLAND as string,\n\t\tADULT_TRANSITION_DATE as timestamp,\n\t\tCONSENT as string,\n\t\tU_ADDR_CONF as string,\n\t\tU_NASS as string,\n\t\tU_U_PAYROLL_NUM as string,\n\t\tU_U_DIRECTORATE as string,\n\t\tU_DIRECTORATE as string,\n\t\tU_SERVICE_AREA as string,\n\t\tU_HCC_DIRECTORATE as string,\n\t\tU_HCC_SERVICE_AREA as string,\n\t\tU_HCC_ORGANISATION as string,\n\t\tU_GRADE as string,\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tBIRTH_CERT_SEEN as string,\n\t\tUCI as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tNASS_NUMBER as string,\n\t\tALERT_INFO as string,\n\t\tETAG as string,\n\t\tBIRTH_ID as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/people') ~> People\nsource(output(\n\t\tPersonId as long,\n\t\tPersonMdmId as decimal(18,0),\n\t\tPersonMiddleName as string,\n\t\tPersonSurname as string,\n\t\tPersonDateOfBirth as timestamp,\n\t\tPersonDateOfDeath as timestamp,\n\t\tPersonGender as string,\n\t\tPersonTransactionStartDate as timestamp,\n\t\tPersonTransactionEndDate as timestamp,\n\t\tPersonForename as string,\n\t\tPersonTitle as string,\n\t\tPersonActive as boolean,\n\t\tPersonKnownBy as string,\n\t\tPersonLegalSurname as string,\n\t\tPersonLegalForename as string,\n\t\tPersonSourceKey as decimal(18,0),\n\t\tPersonChecksum as string,\n\t\tPersonDeleted as timestamp,\n\t\tPersonSourceId as long,\n\t\tPersonRowInsertedDate as timestamp,\n\t\tPersonToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPerson\nsource(output(\n\t\tREFERENCE as string,\n\t\tBUS_PHONE as string,\n\t\tMOB_PHONE as string,\n\t\tFAX_NUMBER as string,\n\t\tEMAIL as string,\n\t\tPERSON_ID as decimal(38,18),\n\t\tDOB as timestamp,\n\t\tE_ORIGIN as string,\n\t\tFORENAME as string,\n\t\tGENDER as string,\n\t\tH_LANG as string,\n\t\tMIDNAME as string,\n\t\tSURNAME as string,\n\t\tTITLE as string,\n\t\tDISABILITY as string,\n\t\tREG_DISABL as string,\n\t\tGREEN_CARD as string,\n\t\tKIN_NAME as string,\n\t\tKIN_PHONE as string,\n\t\tKNOWN_BY as string,\n\t\tNI_NUMBER as string,\n\t\tPERSONNEL_CONTROL as string,\n\t\tEMPLOYEE as string,\n\t\tNI_KEY as string,\n\t\tNI_KEY_DESC as string,\n\t\tNAME_KEY as string,\n\t\tNAME_KEY_DESC as string,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tMEMO_ID as decimal(38,18),\n\t\tPOST_CODE as string,\n\t\tACTIVE as string,\n\t\tINACRSN as string,\n\t\tINACDATE as timestamp,\n\t\tASYLUM_SEEKER as string,\n\t\tNOTES_MEMO_ID as decimal(38,18),\n\t\tBLOB_ID as decimal(38,18),\n\t\tUPDATE_CALENDAR_ONLINE as string,\n\t\tU_TEST as string,\n\t\tUTAKING_PGM_FOR_CTS as string,\n\t\tUTAKING_PGM_FOR_HEAD as string,\n\t\tACHD_STD_FOR_HEAD as string,\n\t\tLEGAL_SURNAME as string,\n\t\tLEGAL_FORENAME as string,\n\t\tUPPER_LEGAL_SURNAME as string,\n\t\tUPPER_LEGAL_FORENAME as string,\n\t\tCHANGEBYBASE as decimal(38,18),\n\t\tU_EMPLOYE_STATUS as string,\n\t\tU_UNEMPLYE_PERIOD as string,\n\t\tU_PUBLIC_SECTOR as string,\n\t\tU_PUBLIC as string,\n\t\tU_REDUNDANCY as string,\n\t\tU_LESS_249 as string,\n\t\tH_LANG2 as string,\n\t\tHOME_REL as string,\n\t\tASYLUM_STATUS as string,\n\t\tUP_ID as string,\n\t\tUPPER_SURNAME as string,\n\t\tUPPER_FORENAME as string,\n\t\tFORENAME_METAPHONE as string,\n\t\tMIDNAME_METAPHONE as string,\n\t\tSURNAME_METAPHONE as string,\n\t\tL_SNAME_METAPHONE as string,\n\t\tL_FNAME_METAPHONE as string,\n\t\tIMPAIRMENTSTATUS as string,\n\t\tDATE_DECEASED as timestamp,\n\t\tDATE_NOTIFIED as timestamp,\n\t\tDATE_CONFIRMED as timestamp,\n\t\tACL as string,\n\t\tCOORDINATOR_NAME as string,\n\t\tHAS_HISTORICAL_EPISODE as string,\n\t\tHAS_LIVE_EPISODE as string,\n\t\tCOORDINATOR_ID as decimal(38,18),\n\t\tSUFFIX as string,\n\t\tGENDER_EXTRA as string,\n\t\tNAME_KEY_STUD as string,\n\t\tNAME_KEY_STUD_DESC as string,\n\t\tNCY as decimal(38,18),\n\t\tOS_NCY as decimal(38,18),\n\t\tNON_NCY as string,\n\t\tSTAGE as string,\n\t\tNCYSTAGE as string,\n\t\tCOUNTRY_ID as decimal(38,18),\n\t\tETHSOURCE as string,\n\t\tETHNIC_OR as string,\n\t\tSTUD_BASE_ID as decimal(38,18),\n\t\tLEA as string,\n\t\tF_LEA as string,\n\t\tR_LEA as string,\n\t\tU_PAYROLL_NO as decimal(38,18),\n\t\tU_SOCIAL_WORK as string,\n\t\tU_SOCIAL_START as timestamp,\n\t\tU_SOICAL_END as timestamp,\n\t\tULN as decimal(38,18),\n\t\tUPPER_MIDNAME as string,\n\t\tU_REG_NUMBER as string,\n\t\tU_CWDC as timestamp,\n\t\tU_CG_REG as string,\n\t\tU_CWDC_START as timestamp,\n\t\tNATIONAL_IDENTITY as string,\n\t\tSTOP_NOTICE as string,\n\t\tLEFT_ENGLAND as string,\n\t\tADULT_TRANSITION_DATE as timestamp,\n\t\tCONSENT as string,\n\t\tU_ADDR_CONF as string,\n\t\tU_NASS as string,\n\t\tU_U_PAYROLL_NUM as string,\n\t\tU_U_DIRECTORATE as string,\n\t\tU_DIRECTORATE as string,\n\t\tU_SERVICE_AREA as string,\n\t\tU_HCC_DIRECTORATE as string,\n\t\tU_HCC_SERVICE_AREA as string,\n\t\tU_HCC_ORGANISATION as string,\n\t\tU_GRADE as string,\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tBIRTH_CERT_SEEN as string,\n\t\tUCI as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tNASS_NUMBER as string,\n\t\tALERT_INFO as string,\n\t\tETAG as string,\n\t\tBIRTH_ID as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/people') ~> People2\nSelectColsEducation, SelectCols join(STUD_ID == PERSON_ID_people,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerJoinPeople\nJoin1 select(mapColumn(\n\t\tLAST_UPDT_people = Aggregate1@LAST_UPDT,\n\t\tPERSON_ID_people = Aggregate1@PERSON_ID,\n\t\tUP_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCols\nInnerJoinPrs derive(PupilId = coalesce(PersonId,-1),\n\t\tPupilUPN = coalesce(UP_ID,'-1'),\n\t\tPupilActive = iif(equals(ACTIVE,'T'),1,0),\n\t\tPupilCurrent = -1,\n\t\tPupilTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilSourceKey = STUD_ID,\n\t\tPupilDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilRowInsertedDate = currentTimestamp(),\n\t\tPupilSourceId = 2,\n\t\tPupilToHistory = -1) ~> AddFixedAndDerivedCols\nSelect3 alterRow(upsertIf(true())) ~> AlterRow1\nFilter1 select(mapColumn(\n\t\tLAST_UPDT,\n\t\tSTUD_ID,\n\t\tACTIVE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsEducation\nEducationDetails aggregate(groupBy(STUD_ID,\n\t\tACTIVE),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByMaxLastDT\nFilter2, SelectPRSId join(STUD_ID == PersonSourceKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerJoinPrs\nTblPerson select(mapColumn(\n\t\tPersonId,\n\t\tPersonSourceKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPRSId\nAddFixedAndDerivedCols select(mapColumn(\n\t\tPupilId,\n\t\tPupilUPN,\n\t\tPupilActive,\n\t\tPupilCurrent,\n\t\tPupilTransactionStartDate,\n\t\tPupilTransactionEndDate,\n\t\tPupilSourceKey,\n\t\tPupilDeleted,\n\t\tPupilRowInsertedDate,\n\t\tPupilSourceId,\n\t\tPupilToHistory\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nPeople aggregate(groupBy(PERSON_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> Aggregate1\nSelect1 aggregate(groupBy(PupilUPN,\n\t\tPupilId,\n\t\tPupilActive,\n\t\tPupilCurrent,\n\t\tPupilTransactionStartDate,\n\t\tPupilTransactionEndDate,\n\t\tPupilSourceKey,\n\t\tPupilDeleted,\n\t\tPupilRowInsertedDate,\n\t\tPupilSourceId,\n\t\tPupilToHistory),\n\tCountAll = count(1)) ~> RemoveDuplicates\nRemoveDuplicates select(mapColumn(\n\t\tPupilUPN,\n\t\tPupilId,\n\t\tPupilActive,\n\t\tPupilCurrent,\n\t\tPupilTransactionStartDate,\n\t\tPupilTransactionEndDate,\n\t\tPupilSourceKey,\n\t\tPupilDeleted,\n\t\tPupilRowInsertedDate,\n\t\tPupilSourceId,\n\t\tPupilToHistory\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nPeople2 select(mapColumn(\n\t\tPERSON_ID,\n\t\tUP_ID,\n\t\tLAST_UPDT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nAggregate1, Select4 join(Aggregate1@PERSON_ID == Select4@PERSON_ID\n\t&& Aggregate1@LAST_UPDT == Select4@LAST_UPDT,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nGroupByMaxLastDT filter(equals(ACTIVE, 'T')) ~> Filter1\nInnerJoinPeople filter(equals(ACTIVE, 'T')) ~> Filter2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilSourceKey','PupilUPN'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tPupilUPN,\n\t\tPupilTransactionStartDate,\n\t\tPupilTransactionEndDate,\n\t\tPupilSourceKey,\n\t\tPupilSourceId,\n\t\tPupilDeleted,\n\t\tPupilRowInsertedDate,\n\t\tPupilToHistory,\n\t\tPupilActive,\n\t\tPupilCurrent\n\t)) ~> TblPupil"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPerson')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPupilAttendance')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "StudentAttendance"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblAttendanceSummaryType",
								"type": "DatasetReference"
							},
							"name": "TblAttndSumryTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupilAttendanceType",
								"type": "DatasetReference"
							},
							"name": "TblPupilAttendanceType"
						},
						{
							"dataset": {
								"referenceName": "ds_TblInstitution",
								"type": "DatasetReference"
							},
							"name": "TblInstitution"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPupilAttendance",
								"type": "DatasetReference"
							},
							"name": "PupAttnd"
						}
					],
					"transformations": [
						{
							"name": "GroupByMorning"
						},
						{
							"name": "JoinPup"
						},
						{
							"name": "JoinInst"
						},
						{
							"name": "JoinAttndSummryTyp2"
						},
						{
							"name": "JoinPupAttndTyp"
						},
						{
							"name": "AddFixedCols"
						},
						{
							"name": "JoinAttndSumryTyp"
						},
						{
							"name": "AddFixedColsMorning"
						},
						{
							"name": "JoinPupAttndMorning"
						},
						{
							"name": "SelectColsAfternoon"
						},
						{
							"name": "DerivedColsAfternoon"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectColsMorning"
						},
						{
							"name": "DerivedColsMorning"
						},
						{
							"name": "UnionMorningAfternoon"
						},
						{
							"name": "SelectInst"
						},
						{
							"name": "CastInstSrcKey"
						},
						{
							"name": "SelectCols"
						},
						{
							"name": "GroupByDistinct"
						},
						{
							"name": "FilterPupId1"
						},
						{
							"name": "FilterInst"
						},
						{
							"name": "DerivedColumnPup"
						},
						{
							"name": "DerivedColumnInst"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "GroupByAfternoon"
						},
						{
							"name": "JoinPup2"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "FilterPupId"
						},
						{
							"name": "JoinInst2"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "FilterInst2"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "DerivedColumn7"
						},
						{
							"name": "DerivedColumn8"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						}
					],
					"script": "source(output(\n\t\tMORNING_MARK as string,\n\t\tRECORD_ID as double,\n\t\tSTUD_ID as decimal(38,18),\n\t\tSTART_DATE as timestamp,\n\t\tATT_DATE as timestamp,\n\t\tGROUP_ID as double,\n\t\tAFTERNOON_MARKS as string,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tBASE_ID as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/student_attendance') ~> StudentAttendance\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tInstitutionSourceKey as long,\n\t\tCode as string,\n\t\tMeaning as string,\n\t\tStatutoryMeaning as string,\n\t\tSchoolMeaning as string,\n\t\tTransactionalStartDate as timestamp,\n\t\tTransactionalEndDate as timestamp,\n\t\tInstitutionId as long,\n\t\tAttendanceSummaryTypeId as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblAttndSumryTyp\nsource(output(\n\t\tPupilAttendanceTypeDescription as string,\n\t\tPupilAttendanceTypeGroup as string,\n\t\tPupilAttendanceTypeDeleted as timestamp,\n\t\tPupilAttendanceTypeTransactionStartDate as timestamp,\n\t\tPupilAttendanceTypeTransactionEndDate as timestamp,\n\t\tPupilAttendanceTypeId as long,\n\t\tPupilAttendanceTypeSourceId as long,\n\t\tPupilAttendanceTypeInternalCode as string,\n\t\tPupilAttendanceTypeExternalCode as string,\n\t\tPupilAttendanceTypeSubGroup as string,\n\t\tPupilAttendanceTypeRowInsertedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupilAttendanceType\nsource(output(\n\t\tInstitutionId as long,\n\t\tInstitutionURN as integer,\n\t\tInstitutionPhase as string,\n\t\tInstitutionName as string,\n\t\tInstitutionSourceKey as integer,\n\t\tInstitutionDeleted as timestamp,\n\t\tInstitutionTransactionStartDate as timestamp,\n\t\tInstitutionTransactionEndDate as timestamp,\n\t\tInstitutionAgeRange as string,\n\t\tInstitutionDFE as integer,\n\t\tInstitutionSourceId as integer,\n\t\tInstitutionRowInstitutionDate as timestamp,\n\t\tInstitutionToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblInstitution\nStudentAttendance aggregate(groupBy(STUD_ID,\n\t\tATT_DATE,\n\t\tBASE_ID,\n\t\tMORNING_MARK),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByMorning\nGroupByMorning, TblPupil join(STUD_ID == PupilSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPup\nFilterPupId1, CastInstSrcKey join(BASE_ID == InstitutionSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinInst\nFilterInst2, TblAttndSumryTyp join(BASE_ID == TblAttndSumryTyp@InstitutionSourceKey\n\t&& AFTERNOON_MARKS == Code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAttndSummryTyp2\nAddFixedCols, TblPupilAttendanceType join(PUPIL_ATTENDANCE == PupilAttendanceTypeGroup\n\t&& AFTERNOON_MARK_COL == PupilAttendanceTypeExternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPupAttndTyp\nFilter3 derive(PUPIL_ATTENDANCE = \"PUPIL_SCHOOL_ATTENDANCE\",\n\t\tAFTERNOON_MARK_COL = \"AFTERNOON_MARK\") ~> AddFixedCols\nFilterInst, TblAttndSumryTyp join(BASE_ID == TblAttndSumryTyp@InstitutionSourceKey\n\t&& MORNING_MARK == Code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAttndSumryTyp\nFilter4 derive(PUPIL_ATTENDANCE = \"PUPIL_SCHOOL_ATTENDANCE\",\n\t\tMORNING_MARK_COL = \"MORNING_MARK\") ~> AddFixedColsMorning\nAddFixedColsMorning, TblPupilAttendanceType join(PUPIL_ATTENDANCE == PupilAttendanceTypeGroup\n\t&& MORNING_MARK_COL == PupilAttendanceTypeExternalCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPupAttndMorning\nFilter1 select(mapColumn(\n\t\tPupilId,\n\t\tInstitutionId = DerivedColumn6@InstitutionId,\n\t\tMEANING = Meaning,\n\t\tPupilAttendanceTypeId,\n\t\tAttendanceSummaryTypeId,\n\t\tATT_DATE,\n\t\tLAST_UPDT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsAfternoon\nSelectColsAfternoon derive(PupilAttendanceTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilAttendanceTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilAttendanceValidStartDate = coalesce(ATT_DATE,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilAttendanceValidEndDate = coalesce(ATT_DATE,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilId = coalesce(PupilId,-1),\n\t\tInstitutionId = coalesce(InstitutionId,-1),\n\t\tPupilAttendanceDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilAttendanceRowInsertedDate = currentTimestamp(),\n\t\tPupilAttendanceMarkDescription = PupilAttendanceTypeId,\n\t\tPupilAttendanceTypeId = coalesce(toInteger(PupilAttendanceTypeId),-1),\n\t\tPupilAttendanceCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)),random(100),toLong(0)),\n\t\tPupilAttendanceSummarySourceId = 2,\n\t\tAttendanceSummaryTypeId = toInteger(AttendanceSummaryTypeId)) ~> DerivedColsAfternoon\nSelectCols alterRow(upsertIf(true())) ~> AlterRow1\nFilter2 select(mapColumn(\n\t\tPupilId,\n\t\tInstitutionId = DerivedColumnInst@InstitutionId,\n\t\tMEANING = Meaning,\n\t\tPupilAttendanceTypeId,\n\t\tAttendanceSummaryTypeId,\n\t\tATT_DATE,\n\t\tLAST_UPDT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsMorning\nSelectColsMorning derive(PupilAttendanceTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilAttendanceTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilAttendanceValidStartDate = coalesce(ATT_DATE,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilAttendanceValidEndDate = coalesce(ATT_DATE,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilId = coalesce(PupilId,-1),\n\t\tInstitutionId = coalesce(InstitutionId,-1),\n\t\tPupilAttendanceDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilAttendanceRowInsertedDate = currentTimestamp(),\n\t\tPupilAttendanceMarkDescription = PupilAttendanceTypeId,\n\t\tPupilAttendanceTypeId = coalesce(toInteger(PupilAttendanceTypeId),-1),\n\t\tPupilAttendanceCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)),random(100),toLong(0)),\n\t\tPupilAttendanceSummarySourceId = 2,\n\t\tAttendanceSummaryTypeId = toInteger(AttendanceSummaryTypeId)) ~> DerivedColsMorning\nDerivedColsAfternoon, DerivedColsMorning union(byName: true)~> UnionMorningAfternoon\nTblInstitution select(mapColumn(\n\t\tInstitutionId,\n\t\tInstitutionSourceKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectInst\nSelectInst derive(InstitutionSourceKey = toInteger(InstitutionSourceKey)) ~> CastInstSrcKey\nGroupByDistinct select(mapColumn(\n\t\tPupilId,\n\t\tInstitutionId,\n\t\tMEANING,\n\t\tPupilAttendanceTypeId,\n\t\tAttendanceSummaryTypeId,\n\t\tATT_DATE,\n\t\tLAST_UPDT,\n\t\tPupilAttendanceTransactionStartDate,\n\t\tPupilAttendanceTransactionEndDate,\n\t\tPupilAttendanceValidStartDate,\n\t\tPupilAttendanceValidEndDate,\n\t\tPupilAttendanceDeleted,\n\t\tPupilAttendanceRowInsertedDate,\n\t\tPupilAttendanceMarkDescription,\n\t\tPupilAttendanceCounter,\n\t\tPupilAttendanceSummarySourceId,\n\t\tAttendanceSummaryTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCols\nUnionMorningAfternoon aggregate(groupBy(PupilId,\n\t\tInstitutionId,\n\t\tPupilAttendanceTypeId,\n\t\tMEANING,\n\t\tAttendanceSummaryTypeId,\n\t\tATT_DATE,\n\t\tLAST_UPDT,\n\t\tPupilAttendanceTransactionStartDate,\n\t\tPupilAttendanceTransactionEndDate,\n\t\tPupilAttendanceValidStartDate,\n\t\tPupilAttendanceValidEndDate,\n\t\tPupilAttendanceDeleted,\n\t\tPupilAttendanceRowInsertedDate,\n\t\tPupilAttendanceMarkDescription,\n\t\tPupilAttendanceCounter,\n\t\tPupilAttendanceSummarySourceId),\n\tCountAll = count(1)) ~> GroupByDistinct\nDerivedColumnPup filter(notEquals(PupilId,-1)) ~> FilterPupId1\nDerivedColumnInst filter(notEquals(InstitutionId,-1)) ~> FilterInst\nJoinPup derive(PupilId = coalesce(PupilId,-1)) ~> DerivedColumnPup\nJoinInst derive(InstitutionId = coalesce(InstitutionId,-1)) ~> DerivedColumnInst\nJoinPupAttndTyp derive(PupilAttendanceTypeId = coalesce(PupilAttendanceTypeId,-1)) ~> DerivedColumn3\nJoinPupAttndMorning derive(PupilAttendanceTypeId = coalesce(PupilAttendanceTypeId,-1)) ~> DerivedColumn4\nStudentAttendance aggregate(groupBy(STUD_ID,\n\t\tAFTERNOON_MARKS,\n\t\tATT_DATE,\n\t\tBASE_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByAfternoon\nGroupByAfternoon, TblPupil join(STUD_ID == PupilSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPup2\nJoinPup2 derive(PupilId = coalesce(PupilId,-1)) ~> DerivedColumn5\nDerivedColumn5 filter(notEquals(PupilId,-1)) ~> FilterPupId\nFilterPupId, CastInstSrcKey join(BASE_ID == InstitutionSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinInst2\nJoinInst2 derive(InstitutionId = coalesce(InstitutionId,-1)) ~> DerivedColumn6\nDerivedColumn6 filter(notEquals(InstitutionId,-1)) ~> FilterInst2\nDerivedColumn3 filter(notEquals(PupilAttendanceTypeId,-1)) ~> Filter1\nDerivedColumn4 filter(notEquals(PupilAttendanceTypeId,-1)) ~> Filter2\nJoinAttndSummryTyp2 derive(AttendanceSummaryTypeId = coalesce(AttendanceSummaryTypeId, -1)) ~> DerivedColumn7\nJoinAttndSumryTyp derive(AttendanceSummaryTypeId = coalesce(AttendanceSummaryTypeId, -1)) ~> DerivedColumn8\nDerivedColumn7 filter(notEquals(AttendanceSummaryTypeId,-1)) ~> Filter3\nDerivedColumn8 filter(notEquals(AttendanceSummaryTypeId,-1)) ~> Filter4\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilAttendanceTransactionStartDate as timestamp,\n\t\tPupilAttendanceTransactionEndDate as timestamp,\n\t\tPupilAttendanceValidStartDate as timestamp,\n\t\tPupilAttendanceValidEndDate as timestamp,\n\t\tPupilAttendanceCounter as long,\n\t\tPupilId as long,\n\t\tInstitutionId as long,\n\t\tPupilAttendanceDeleted as timestamp,\n\t\tPupilAttendanceRowInsertedDate as timestamp,\n\t\tPupilAttendanceMarkDescription as string,\n\t\tPupilAttendanceTypeId as long,\n\t\tPupilAttendanceSummarySourceId as string,\n\t\tAttendanceSummaryTypeId as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId','InstitutionId','PupilAttendanceTypeId','AttendanceSummaryTypeId','PupilAttendanceValidStartDate','PupilAttendanceTransactionStartDate','PupilAttendanceCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilAttendanceTransactionStartDate,\n\t\tPupilAttendanceTransactionEndDate,\n\t\tPupilAttendanceValidStartDate,\n\t\tPupilAttendanceValidEndDate,\n\t\tPupilAttendanceCounter,\n\t\tPupilId,\n\t\tInstitutionId,\n\t\tPupilAttendanceDeleted,\n\t\tPupilAttendanceRowInsertedDate,\n\t\tPupilAttendanceMarkDescription,\n\t\tPupilAttendanceTypeId,\n\t\tPupilAttendanceSummarySourceId,\n\t\tAttendanceSummaryTypeId\n\t)) ~> PupAttnd"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblAttendanceSummaryType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupilAttendanceType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitution')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupilAttendance')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPupilAttendanceType')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "SourceAllocation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPupilAttendanceType",
								"type": "DatasetReference"
							},
							"name": "TblPupilAttendanceType"
						}
					],
					"transformations": [
						{
							"name": "RenameCols"
						},
						{
							"name": "AddFixedColumns"
						},
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "FilterMorning"
						},
						{
							"name": "Union1"
						},
						{
							"name": "FilterAfternoon"
						},
						{
							"name": "SelectDistinct"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> SourceAllocation\nSelectDistinct select(mapColumn(\n\t\tPupilAttendanceTypeDescription = DESCRIPTION,\n\t\tPupilAttendanceTypeGroup = GROUP,\n\t\tPupilAttendanceTypeSubGroup = SUB_GROUP,\n\t\tPupilAttendanceTypeInternalCode = INTERNAL_CODE,\n\t\tPupilAttendanceTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nRenameCols derive(PupilAttendanceTypeTransactionStartDate = currentTimestamp(),\n\t\tPupilAttendanceTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilAttendanceTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilAttendanceTypeSourceId = 1,\n\t\tPupilAttendanceTypeRowInsertedDate = currentTimestamp()) ~> AddFixedColumns\nUnion1 alterRow(upsertIf(true())) ~> UpsertIfTrue\nAddFixedColumns filter(and(equals(PupilAttendanceTypeGroup, \"PUPIL_SCHOOL_ATTENDANCE\"), equals(PupilAttendanceTypeDescription, \"MORNING_MARK\"))) ~> FilterMorning\nFilterMorning, FilterAfternoon union(byName: true)~> Union1\nAddFixedColumns filter(and(equals(PupilAttendanceTypeGroup, \"PUPIL_SCHOOL_ATTENDANCE\"), equals(PupilAttendanceTypeDescription, \"AFTERNOON_MARK\"))) ~> FilterAfternoon\nSourceAllocation aggregate(groupBy(DESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tINTERNAL_CODE,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> SelectDistinct\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilAttendanceTypeDescription as string,\n\t\tPupilAttendanceTypeGroup as string,\n\t\tPupilAttendanceTypeDeleted as timestamp,\n\t\tPupilAttendanceTypeTransactionStartDate as timestamp,\n\t\tPupilAttendanceTypeTransactionEndDate as timestamp,\n\t\tPupilAttendanceTypeId as long,\n\t\tPupilAttendanceTypeSourceId as long,\n\t\tPupilAttendanceTypeInternalCode as string,\n\t\tPupilAttendanceTypeExternalCode as string,\n\t\tPupilAttendanceTypeSubGroup as string,\n\t\tPupilAttendanceTypeRowInsertedDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilAttendanceTypeGroup','PupilAttendanceTypeSubGroup','PupilAttendanceTypeExternalCode','PupilAttendanceTypeInternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilAttendanceTypeDescription,\n\t\tPupilAttendanceTypeGroup,\n\t\tPupilAttendanceTypeDeleted,\n\t\tPupilAttendanceTypeTransactionStartDate,\n\t\tPupilAttendanceTypeTransactionEndDate,\n\t\tPupilAttendanceTypeSourceId,\n\t\tPupilAttendanceTypeInternalCode,\n\t\tPupilAttendanceTypeExternalCode,\n\t\tPupilAttendanceTypeSubGroup,\n\t\tPupilAttendanceTypeRowInsertedDate\n\t)) ~> TblPupilAttendanceType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupilAttendanceType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPupilMetricTypeCode')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Reference"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "SourceAllocation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPupilMetricType",
								"type": "DatasetReference"
							},
							"name": "TblPupilMetricType"
						}
					],
					"transformations": [
						{
							"name": "RenameCols"
						},
						{
							"name": "AddFixedColumns"
						},
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "FilterMorning"
						},
						{
							"name": "SelectDistinct"
						}
					],
					"script": "source(output(\n\t\tENRICH_SOURCE as string,\n\t\tDOMAIN as string,\n\t\tDESCRIPTION as string,\n\t\tGROUP as string,\n\t\tSUB_GROUP as string,\n\t\tINTERNAL_CODE as string,\n\t\tEXTERNAL_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'schools/InternalReferenceData') ~> SourceAllocation\nSelectDistinct select(mapColumn(\n\t\tPupilMetricTypeDescription = DESCRIPTION,\n\t\tPupilMetricTypeGroup = GROUP,\n\t\tPupilMetricTypeSubGroup = SUB_GROUP,\n\t\tPupilMetricTypeInternalCode = INTERNAL_CODE,\n\t\tPupilMetricTypeExternalCode = EXTERNAL_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nRenameCols derive(PupilMetricTypeTransactionStartDate = currentTimestamp(),\n\t\tPupilMetricTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilMetricTypeDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilMetricTypeSourceId = 1,\n\t\tPupilMetricTypeRowInsertedDate = currentTimestamp()) ~> AddFixedColumns\nFilterMorning alterRow(upsertIf(true())) ~> UpsertIfTrue\nAddFixedColumns filter(and(equals(PupilMetricTypeGroup, \"STUDENT_EXCLUSION\"), equals(PupilMetricTypeDescription, \"STUDENT_EXCLUSION_DAYS\"))) ~> FilterMorning\nSourceAllocation aggregate(groupBy(DESCRIPTION,\n\t\tGROUP,\n\t\tSUB_GROUP,\n\t\tINTERNAL_CODE,\n\t\tEXTERNAL_CODE),\n\tCountAll = count(1)) ~> SelectDistinct\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilMetricTypeId as long,\n\t\tPupilMetricTypeDescription as string,\n\t\tPupilMetricTypeGroup as string,\n\t\tPupilMetricTypeTransactionStartDate as timestamp,\n\t\tPupilMetricTypeTransactionEndDate as timestamp,\n\t\tPupilMetricTypeDeleted as timestamp,\n\t\tPupilMetricTypeSourceId as integer,\n\t\tPupilMetricTypeRowInsertedDate as timestamp,\n\t\tPupilMetricTypeSubGroup as string,\n\t\tPupilMetricTypeExternalCode as string,\n\t\tPupilMetricTypeInternalCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilMetricTypeGroup','PupilMetricTypeSubGroup','PupilMetricTypeInternalCode','PupilMetricTypeExternalCode'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilMetricTypeDescription,\n\t\tPupilMetricTypeGroup,\n\t\tPupilMetricTypeTransactionStartDate,\n\t\tPupilMetricTypeTransactionEndDate,\n\t\tPupilMetricTypeDeleted,\n\t\tPupilMetricTypeSourceId,\n\t\tPupilMetricTypeRowInsertedDate,\n\t\tPupilMetricTypeSubGroup,\n\t\tPupilMetricTypeExternalCode,\n\t\tPupilMetricTypeInternalCode\n\t)) ~> TblPupilMetricType"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupilMetricType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPupilToMetric')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "Pup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "Ev"
						},
						{
							"dataset": {
								"referenceName": "ds_TblInstitution",
								"type": "DatasetReference"
							},
							"name": "Inst"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupilMetricType",
								"type": "DatasetReference"
							},
							"name": "PupMtrTyp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPupilToMetric",
								"type": "DatasetReference"
							},
							"name": "TblPupilToMetric"
						}
					],
					"transformations": [
						{
							"name": "GroupBy"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Join4"
						},
						{
							"name": "SelectRelevantCols"
						},
						{
							"name": "AddCols"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn3"
						}
					],
					"script": "source(output(\n\t\tLEA_DECISION as string,\n\t\tEXCL_ID as decimal(38,18),\n\t\tA_YEAR as string,\n\t\tTERM as string,\n\t\tBASE_ID as decimal(38,18),\n\t\tCATEGORY as string,\n\t\tREASON as string,\n\t\tSTART_DATE as timestamp,\n\t\tEXCL_DAYS as decimal(38,18),\n\t\tSTUD_ID as decimal(38,18),\n\t\tEND_DATE as timestamp,\n\t\tEXCL_MEMO as decimal(38,18),\n\t\tRESULT as string,\n\t\tNO_SUP_OFF as decimal(38,18),\n\t\tGOV_CON_DT as timestamp,\n\t\tOFF_ATTEND as decimal(38,18),\n\t\tUPHELD as string,\n\t\tAPPEAL_DT as timestamp,\n\t\tMEETING_DT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tLAST_UPDT as timestamp,\n\t\tSCH_APPEAL_RECVD as string,\n\t\tAM_PM as string,\n\t\tREFERRED_DC as string,\n\t\tDC_MEETING_DT as timestamp,\n\t\tDC_DECISION as string,\n\t\tREINSTATE_DATE as timestamp,\n\t\tREINSTATE_REASON as string,\n\t\tDATE_OFF_ROLL as timestamp,\n\t\tPASTORAL_RECD as string,\n\t\tEND_MONITOR_DATE as timestamp,\n\t\tMOTIVATION as string,\n\t\tSTAGE_WHEN_EXCLUDED as string,\n\t\tSTATUS_WHEN_EXCLUDED as string,\n\t\tSITE_ID as decimal(38,18),\n\t\tEND_AM_PM as string,\n\t\tCREATED_DATE as timestamp,\n\t\tCREATED_BY as decimal(38,18),\n\t\tNCY_WHEN_EXCLUDED as decimal(38,18),\n\t\tSEN_STAGE_WHEN_EXCLUDED as string,\n\t\tSIXTH_DAY as timestamp,\n\t\tINCARE_WHEN_EXCLUDED as string,\n\t\tADDRESS_ID as decimal(38,18),\n\t\tFSM as string,\n\t\tREFERRED_APPEALS as string,\n\t\tACL as string,\n\t\tEXCL_LUNCH_LENGTH as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tSENEXPERT_REVIEW as string,\n\t\tEXC_DAYS_OS as decimal(38,18),\n\t\tVERIFIEDDATE as timestamp,\n\t\tVERIFIEDBY as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/exclusions') ~> Source\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> Pup\nsource(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> Ev\nsource(output(\n\t\tInstitutionId as long,\n\t\tInstitutionURN as integer,\n\t\tInstitutionPhase as string,\n\t\tInstitutionName as string,\n\t\tInstitutionSourceKey as integer,\n\t\tInstitutionDeleted as timestamp,\n\t\tInstitutionTransactionStartDate as timestamp,\n\t\tInstitutionTransactionEndDate as timestamp,\n\t\tInstitutionAgeRange as string,\n\t\tInstitutionDFE as integer,\n\t\tInstitutionSourceId as integer,\n\t\tInstitutionRowInstitutionDate as timestamp,\n\t\tInstitutionToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> Inst\nsource(output(\n\t\tPupilMetricTypeId as long,\n\t\tPupilMetricTypeDescription as string,\n\t\tPupilMetricTypeGroup as string,\n\t\tPupilMetricTypeTransactionStartDate as timestamp,\n\t\tPupilMetricTypeTransactionEndDate as timestamp,\n\t\tPupilMetricTypeDeleted as timestamp,\n\t\tPupilMetricTypeSourceId as integer,\n\t\tPupilMetricTypeRowInsertedDate as timestamp,\n\t\tPupilMetricTypeSubGroup as string,\n\t\tPupilMetricTypeExternalCode as string,\n\t\tPupilMetricTypeInternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> PupMtrTyp\nSource aggregate(groupBy(STUD_ID,\n\t\tEXCL_ID,\n\t\tEXCL_DAYS,\n\t\tBASE_ID),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupBy\nDerivedColumn1, Pup join(toInteger(STUD_ID) == PupilSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1, Ev join(EXCL_ID == EventSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nGroupBy derive(EXCL_ID = toString(toInteger(EXCL_ID)),\n\t\tEXCL_INTRN_CD = 'STUDENT_EXCLUSION_DAYS',\n\t\tEXCL_GRP = 'STUDENT_EXCLUSION',\n\t\tEXCL_TRNS_END_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tEXCL_DEL = toDate('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn1\nJoin2, Inst join(toInteger(BASE_ID) == InstitutionSourceKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nDerivedColumn3, DerivedColumn2 join(EXCL_INTRN_CD == PupilMetricTypeInternalCode\n\t&& EXCL_GRP == PupilMetricTypeGroup\n\t&& TRNS_END_DT_COL == toDate(toString(PupilMetricTypeTransactionEndDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\")\n\t&& TYP_DEL_COL == toDate(toString(PupilMetricTypeDeleted, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nFilter2 select(mapColumn(\n\t\tPupilId,\n\t\tPupilToMetricValue = EXCL_DAYS,\n\t\tPupilMetricTypeId,\n\t\tPupilToMetricTransactionStartDate = LAST_UPDT,\n\t\tPupilToMetricValidStartDate = EventValidStartDate,\n\t\tPupilToMetricValidEndDate = EventValidEndDate,\n\t\tEventId,\n\t\tInstitutionId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantCols\nSelectRelevantCols derive(PupilToMetricTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToMetricSourceId = 2,\n\t\tPupilToMetricDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToMetricRowInsertedDate = currentTimestamp(),\n\t\tPupilToMetricCounter = iif(or(or(equals(EventId,0),equals(EventId,-1)),isNull(EventId)), toLong(random(100)),\r\n    iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)), toLong(random(100)),\r\ntoLong(0))),\n\t\tPupilId = coalesce(PupilId, -1),\n\t\tPupilToMetricValue = coalesce(PupilToMetricValue, -1),\n\t\tPupilMetricTypeId = coalesce(PupilMetricTypeId, -1),\n\t\tPupilToMetricTransactionStartDate = PupilToMetricTransactionStartDate,\n\t\tEventId = coalesce(EventId, -1),\n\t\tInstitutionId = coalesce(InstitutionId, -1)) ~> AddCols\nFilter1 alterRow(upsertIf(true())) ~> AlterRow1\nAggregate2 filter(and(notEquals(InstitutionId, -1), and(notEquals(PupilId, -1), notEquals(PupilMetricTypeId, -1)))) ~> Filter1\nPupMtrTyp derive(PupilMetricTypeTransactionEndDate = toDate(toString(PupilMetricTypeTransactionEndDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\t\tPupilMetricTypeDeleted = toDate(toString(PupilMetricTypeDeleted, \"dd-MM-yyyy\"), \"dd-MM-yyyy\")) ~> DerivedColumn2\nJoin4 filter(equals(isNull(PupilMetricTypeTransactionStartDate), false())) ~> Filter2\nAddCols aggregate(groupBy(PupilId,\n\t\tPupilToMetricTransactionStartDate,\n\t\tPupilToMetricCounter,\n\t\tPupilMetricTypeId,\n\t\tInstitutionId,\n\t\tPupilToMetricValidStartDate),\n\tPupilToMetricRowInsertedDate = max(PupilToMetricRowInsertedDate),\n\t\tEventId = max(EventId),\n\t\tPupilToMetricValidEndDate = max(PupilToMetricValidEndDate),\n\t\tPupilToMetricTransactionEndDate = max(PupilToMetricTransactionEndDate),\n\t\tPupilToMetricDeleted = max(PupilToMetricDeleted),\n\t\tPupilToMetricValue = max(PupilToMetricValue),\n\t\tPupilToMetricSourceId = max(PupilToMetricSourceId)) ~> Aggregate2\nJoin3 derive(TRNS_END_DT_COL = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL_COL = toDate('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn3\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tPupilToMetricValue as integer,\n\t\tPupilToMetricTransactionEndDate as timestamp,\n\t\tPupilToMetricSourceId as integer,\n\t\tPupilMetricTypeId as long,\n\t\tPupilToMetricTransactionStartDate as timestamp,\n\t\tPupilToMetricValidEndDate as timestamp,\n\t\tPupilToMetricValidStartDate as timestamp,\n\t\tPupilToMetricDeleted as timestamp,\n\t\tPupilToMetricRowInsertedDate as timestamp,\n\t\tEventId as long,\n\t\tInstitutionId as long,\n\t\tPupilToMetricCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId','PupilMetricTypeId','InstitutionId','PupilToMetricValidStartDate','PupilToMetricTransactionStartDate','PupilToMetricCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tPupilToMetricValue,\n\t\tPupilToMetricTransactionEndDate,\n\t\tPupilToMetricSourceId,\n\t\tPupilMetricTypeId,\n\t\tPupilToMetricTransactionStartDate,\n\t\tPupilToMetricValidEndDate,\n\t\tPupilToMetricValidStartDate,\n\t\tPupilToMetricDeleted,\n\t\tPupilToMetricRowInsertedDate,\n\t\tEventId,\n\t\tInstitutionId,\n\t\tPupilToMetricCounter\n\t)) ~> TblPupilToMetric"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblInstitution')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupilMetricType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupilToMetric')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblPupilToStatus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CapitaOne/Person"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "EducationDetails"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPupil",
								"type": "DatasetReference"
							},
							"name": "TblPupil"
						},
						{
							"dataset": {
								"referenceName": "ds_TblPersonStatusType",
								"type": "DatasetReference"
							},
							"name": "TblPersonStatusType"
						},
						{
							"linkedService": {
								"referenceName": "dls_gdp_contoso_enriched",
								"type": "LinkedServiceReference"
							},
							"name": "People"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_TblPupilToStatus",
								"type": "DatasetReference"
							},
							"name": "PupToSts"
						}
					],
					"transformations": [
						{
							"name": "FilterOnActive"
						},
						{
							"name": "InnerJoinPup"
						},
						{
							"name": "AddFixedAndDerivedCols"
						},
						{
							"name": "GroupByActiveSen"
						},
						{
							"name": "LeftJoinOnPrsStsTyp"
						},
						{
							"name": "GroupBySen"
						},
						{
							"name": "JoinOnPup"
						},
						{
							"name": "LeftJoinPrsStsTyp"
						},
						{
							"name": "ConvertDatesPup"
						},
						{
							"name": "ConvertDatesPrsStsTyp"
						},
						{
							"name": "CoalesceSenStage"
						},
						{
							"name": "AddFixedStudentSen"
						},
						{
							"name": "FilterSen"
						},
						{
							"name": "AddJoinCols"
						},
						{
							"name": "UnionStudentActiveSenStudentActive"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "SelectColsFinal"
						},
						{
							"name": "SelectColumnsActiveSen"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tTRAN_EDATE as timestamp,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tINACTDATE as timestamp,\n\t\tACTIVE as string,\n\t\tINACTRSN as string,\n\t\tADDRESSEE as string,\n\t\tAT_MEMO as decimal(38,18),\n\t\tEC_BASEID as decimal(38,18),\n\t\tES_ORD as string,\n\t\tFORM7_CAT as string,\n\t\tFSMEAL as string,\n\t\tFSM_END as timestamp,\n\t\tGB_RECS as decimal(38,18),\n\t\tINCARE as string,\n\t\tISREFCODE as string,\n\t\tLEA_ROUTE as string,\n\t\tLEA_TRAN as string,\n\t\tMON_SOC as string,\n\t\tPRIM_NEED as string,\n\t\tSEN as string,\n\t\tSENSTAGE as string,\n\t\tSERV_FAM as string,\n\t\tSTAT_ISSD as timestamp,\n\t\tSTAT_REPT as timestamp,\n\t\tSTAT_STOP as timestamp,\n\t\tSTUD_AMEND as timestamp,\n\t\tSTUD_ID as decimal(38,18),\n\t\tSTUD_TIME as string,\n\t\tSTUD_UPDT as string,\n\t\tSTUD_USER as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tTRAN_RECS as decimal(38,18),\n\t\tTRAV_FAM as string,\n\t\tLOCAL_UPI as string,\n\t\tASSESS_REC as string,\n\t\tACTIVE_SEN as string,\n\t\tACTIVE_TRN as string,\n\t\tCPD_BASE_ID as decimal(38,18),\n\t\tSTUD_ID_DESC as decimal(38,18),\n\t\tMOTHERTONGUE as string,\n\t\tMEDICAL as string,\n\t\tCONNEXIONS as string,\n\t\tNATIONALITY as string,\n\t\tPART_TIME as string,\n\t\tU_DATA_SHARING_CONSENT as string,\n\t\tEY_MEMO as decimal(38,18),\n\t\tU_CODE_RED as string,\n\t\tU_CODERED as string,\n\t\tU_CODES_RED as string,\n\t\tDEFERRED as string,\n\t\tU_U_KS5PLUS_GROUP as string,\n\t\tU_CIPC as string,\n\t\tU_CIE as string,\n\t\tAT_MEMO_EUPDATE as timestamp,\n\t\tGANDTINDICATOR as string,\n\t\tTRANSPORT_PROTECTED as string,\n\t\tTRANSPORT_PROTECTION_END as timestamp,\n\t\tCARER as string,\n\t\tPEP as string,\n\t\tTRAV_STATUS as string,\n\t\tTRAV_STATUS_DATA_SOURCE as string,\n\t\tTRAV_SITE_TYPE as string,\n\t\tTRAV_MOBILITY as string,\n\t\tDATE_FIRST_LOOKED_AFTER as timestamp,\n\t\tEOTAS as string,\n\t\tINCORRECT_DETAILS_ID as decimal(38,18),\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tEY_2YEAR_FUNDING as string,\n\t\tEY_EFFECTIVE_DATE as timestamp,\n\t\tADOPTEDFROMCARE as string,\n\t\tPROTECTEDFSM as string,\n\t\tPROTECTEDFSMUNTIL as timestamp,\n\t\tAPP_CURRENT_BASE_ID as decimal(38,18),\n\t\tAPP_CURRENT_BASE_NAME as string,\n\t\tEOTAS_NIP as string,\n\t\tU_PARENTRESPONSIBLE as string,\n\t\tU_DBTEST1 as string,\n\t\tU_LASTPASS as timestamp,\n\t\tU_PEREXCL as string,\n\t\tU_PNEED as string,\n\t\tU_SENAREACODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/education_details') ~> EducationDetails\nsource(output(\n\t\tPupilId as long,\n\t\tPupilUPN as string,\n\t\tPupilCurrent as boolean,\n\t\tPupilTransactionStartDate as timestamp,\n\t\tPupilTransactionEndDate as timestamp,\n\t\tPupilActive as boolean,\n\t\tPupilSourceKey as integer,\n\t\tPupilSourceId as integer,\n\t\tPupilDeleted as timestamp,\n\t\tPupilRowInsertedDate as timestamp,\n\t\tPupilToHistory as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPupil\nsource(output(\n\t\tPersonStatusTypeId as long,\n\t\tPersonStatusTypeDescription as string,\n\t\tPersonStatusTypeGroup as string,\n\t\tPersonStatusTypeTransactionStartDate as timestamp,\n\t\tPersonStatusTypeTransactionEndDate as timestamp,\n\t\tPersonStatusTypeDeleted as timestamp,\n\t\tPersonStatusTypeSourceId as integer,\n\t\tPersonStatusTypeRowInsertedDate as timestamp,\n\t\tPersonStatusTypeSubGroup as string,\n\t\tPersonStatusTypeInternalCode as string,\n\t\tPersonStatusTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblPersonStatusType\nsource(output(\n\t\tREFERENCE as string,\n\t\tBUS_PHONE as string,\n\t\tMOB_PHONE as string,\n\t\tFAX_NUMBER as string,\n\t\tEMAIL as string,\n\t\tPERSON_ID as decimal(38,18),\n\t\tDOB as timestamp,\n\t\tE_ORIGIN as string,\n\t\tFORENAME as string,\n\t\tGENDER as string,\n\t\tH_LANG as string,\n\t\tMIDNAME as string,\n\t\tSURNAME as string,\n\t\tTITLE as string,\n\t\tDISABILITY as string,\n\t\tREG_DISABL as string,\n\t\tGREEN_CARD as string,\n\t\tKIN_NAME as string,\n\t\tKIN_PHONE as string,\n\t\tKNOWN_BY as string,\n\t\tNI_NUMBER as string,\n\t\tPERSONNEL_CONTROL as string,\n\t\tEMPLOYEE as string,\n\t\tNI_KEY as string,\n\t\tNI_KEY_DESC as string,\n\t\tNAME_KEY as string,\n\t\tNAME_KEY_DESC as string,\n\t\tLAST_UPDT as timestamp,\n\t\tUPDATED_BY as decimal(38,18),\n\t\tMEMO_ID as decimal(38,18),\n\t\tPOST_CODE as string,\n\t\tACTIVE as string,\n\t\tINACRSN as string,\n\t\tINACDATE as timestamp,\n\t\tASYLUM_SEEKER as string,\n\t\tNOTES_MEMO_ID as decimal(38,18),\n\t\tBLOB_ID as decimal(38,18),\n\t\tUPDATE_CALENDAR_ONLINE as string,\n\t\tU_TEST as string,\n\t\tUTAKING_PGM_FOR_CTS as string,\n\t\tUTAKING_PGM_FOR_HEAD as string,\n\t\tACHD_STD_FOR_HEAD as string,\n\t\tLEGAL_SURNAME as string,\n\t\tLEGAL_FORENAME as string,\n\t\tUPPER_LEGAL_SURNAME as string,\n\t\tUPPER_LEGAL_FORENAME as string,\n\t\tCHANGEBYBASE as decimal(38,18),\n\t\tU_EMPLOYE_STATUS as string,\n\t\tU_UNEMPLYE_PERIOD as string,\n\t\tU_PUBLIC_SECTOR as string,\n\t\tU_PUBLIC as string,\n\t\tU_REDUNDANCY as string,\n\t\tU_LESS_249 as string,\n\t\tH_LANG2 as string,\n\t\tHOME_REL as string,\n\t\tASYLUM_STATUS as string,\n\t\tUP_ID as string,\n\t\tUPPER_SURNAME as string,\n\t\tUPPER_FORENAME as string,\n\t\tFORENAME_METAPHONE as string,\n\t\tMIDNAME_METAPHONE as string,\n\t\tSURNAME_METAPHONE as string,\n\t\tL_SNAME_METAPHONE as string,\n\t\tL_FNAME_METAPHONE as string,\n\t\tIMPAIRMENTSTATUS as string,\n\t\tDATE_DECEASED as timestamp,\n\t\tDATE_NOTIFIED as timestamp,\n\t\tDATE_CONFIRMED as timestamp,\n\t\tACL as string,\n\t\tCOORDINATOR_NAME as string,\n\t\tHAS_HISTORICAL_EPISODE as string,\n\t\tHAS_LIVE_EPISODE as string,\n\t\tCOORDINATOR_ID as decimal(38,18),\n\t\tSUFFIX as string,\n\t\tGENDER_EXTRA as string,\n\t\tNAME_KEY_STUD as string,\n\t\tNAME_KEY_STUD_DESC as string,\n\t\tNCY as decimal(38,18),\n\t\tOS_NCY as decimal(38,18),\n\t\tNON_NCY as string,\n\t\tSTAGE as string,\n\t\tNCYSTAGE as string,\n\t\tCOUNTRY_ID as decimal(38,18),\n\t\tETHSOURCE as string,\n\t\tETHNIC_OR as string,\n\t\tSTUD_BASE_ID as decimal(38,18),\n\t\tLEA as string,\n\t\tF_LEA as string,\n\t\tR_LEA as string,\n\t\tU_PAYROLL_NO as decimal(38,18),\n\t\tU_SOCIAL_WORK as string,\n\t\tU_SOCIAL_START as timestamp,\n\t\tU_SOICAL_END as timestamp,\n\t\tULN as decimal(38,18),\n\t\tUPPER_MIDNAME as string,\n\t\tU_REG_NUMBER as string,\n\t\tU_CWDC as timestamp,\n\t\tU_CG_REG as string,\n\t\tU_CWDC_START as timestamp,\n\t\tNATIONAL_IDENTITY as string,\n\t\tSTOP_NOTICE as string,\n\t\tLEFT_ENGLAND as string,\n\t\tADULT_TRANSITION_DATE as timestamp,\n\t\tCONSENT as string,\n\t\tU_ADDR_CONF as string,\n\t\tU_NASS as string,\n\t\tU_U_PAYROLL_NUM as string,\n\t\tU_U_DIRECTORATE as string,\n\t\tU_DIRECTORATE as string,\n\t\tU_SERVICE_AREA as string,\n\t\tU_HCC_DIRECTORATE as string,\n\t\tU_HCC_SERVICE_AREA as string,\n\t\tU_HCC_ORGANISATION as string,\n\t\tU_GRADE as string,\n\t\tCHANGEBYB2BS as decimal(38,18),\n\t\tBIRTH_CERT_SEEN as string,\n\t\tUCI as string,\n\t\tTRAN_MEMO as decimal(38,18),\n\t\tNASS_NUMBER as string,\n\t\tALERT_INFO as string,\n\t\tETAG as string,\n\t\tBIRTH_ID as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'refined',\n\tfolderPath: 'capitaone/people') ~> People\nGroupByActiveSen filter(equals(ACTIVE, 'T')) ~> FilterOnActive\nFilterOnActive, ConvertDatesPup join(STUD_ID == PupilSourceKey,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerJoinPup\nLeftJoinOnPrsStsTyp derive(PupilId = coalesce(PupilId,-1),\n\t\tPupilToStatusFlag = iif(equals(ACTIVE_SEN_COL,'T'),1,0),\n\t\tPupilToStatusTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToStatusSourceId = 2,\n\t\tPupilToStatusValidStartDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToStatusValidEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonStatusTypeId = PersonStatusTypeId,\n\t\tPupilToStatusTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilToStatusDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToStatusRowInsertedDate = currentTimestamp(),\n\t\tPupilToStatusCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)),toLong(random(100)),toLong(0)),\n\t\tInstitutionId = 0,\n\t\tEventId = 0) ~> AddFixedAndDerivedCols\nEducationDetails aggregate(groupBy(STUD_ID,\n\t\tACTIVE,\n\t\tACTIVE_SEN),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupByActiveSen\nAddJoinCols, ConvertDatesPrsStsTyp join(PUPIL_STATUS_COL == PersonStatusTypeGroup\n\t&& ACTIVE_SEN_COL == PersonStatusTypeDescription\n\t&& TRNS_END_DT_COL == PersonStatusTypeTransactionEndDate\n\t&& TYP_DEL_COL == PersonStatusTypeDeleted,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinOnPrsStsTyp\nEducationDetails aggregate(groupBy(STUD_ID,\n\t\tSEN,\n\t\tSENSTAGE),\n\tLAST_UPDT = max(LAST_UPDT)) ~> GroupBySen\nDerivedColumn1, ConvertDatesPup join(STUD_ID == PupilSourceKey\n\t&& PupilTransactionEndDate_COL == toDate(toString(PupilTransactionEndDate, \"dd-MM-yyyy\"), \"dd-MM-yyyy\")\n\t&& PupilDeleted_COL == toDate(toString(PupilDeleted, \"dd-MM-yyyy\"), \"dd-MM-yyyy\"),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinOnPup\nCoalesceSenStage, ConvertDatesPrsStsTyp join(SENSTAGE == PersonStatusTypeInternalCode\n\t&& PUPIL_STATUS_COL == PersonStatusTypeGroup\n\t&& PUPIL_SUB_GROUP_COL == PersonStatusTypeSubGroup\n\t&& END_DT == PersonStatusTypeTransactionEndDate\n\t&& DEL_COL == PersonStatusTypeDeleted,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinPrsStsTyp\nTblPupil derive(PupilTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilDeleted = toDate('31-12-9999','dd-MM-yyyy')) ~> ConvertDatesPup\nTblPersonStatusType derive(PersonStatusTypeTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonStatusTypeDeleted = toDate('31-12-9999','dd-MM-yyyy')) ~> ConvertDatesPrsStsTyp\nJoinOnPup derive(SENSTAGE = coalesce(SENSTAGE,'-1'),\n\t\tPUPIL_STATUS_COL = \"PUPIL_STATUS\",\n\t\tPUPIL_SUB_GROUP_COL = \"SEN_STAGE\",\n\t\tEND_DT = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tDEL_COL = toDate('31-12-9999','dd-MM-yyyy')) ~> CoalesceSenStage\nFilterSen derive(PupilId = coalesce(PupilId,-1),\n\t\tPupilToStatusFlag = iif(equals(SEN,'T'),1,0),\n\t\tPupilToStatusTransactionEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToStatusSourceId = 2,\n\t\tPupilToStatusValidStartDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToStatusValidEndDate = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPersonStatusTypeId = PersonStatusTypeId,\n\t\tPupilToStatusTransactionStartDate = coalesce(LAST_UPDT,toDate('31-12-9999','dd-MM-yyyy')),\n\t\tPupilToStatusDeleted = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilToStatusRowInsertedDate = currentTimestamp(),\n\t\tEventId = 0,\n\t\tInstitutionId = 0,\n\t\tPupilToStatusCounter = iif(or(or(equals(PupilId,0),equals(PupilId,-1)),isNull(PupilId)),toLong(random(100)),toLong(0))) ~> AddFixedStudentSen\nLeftJoinPrsStsTyp filter(and(\r\n    equals(PersonStatusTypeGroup,\"PUPIL_STATUS\"),\r\n    equals(PersonStatusTypeSubGroup,\"SEN_STAGE\")\r\n)) ~> FilterSen\nFilter2 derive(PUPIL_STATUS_COL = \"PUPIL_STATUS\",\n\t\tACTIVE_SEN_COL = \"ACTIVE_SEN\",\n\t\tTRNS_END_DT_COL = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tTYP_DEL_COL = toDate('31-12-9999','dd-MM-yyyy')) ~> AddJoinCols\nSelectColumns, SelectColumnsActiveSen union(byName: true)~> UnionStudentActiveSenStudentActive\nSelectColsFinal alterRow(upsertIf(true())) ~> AlterRow1\nAddFixedStudentSen select(mapColumn(\n\t\tPupilId,\n\t\tPersonStatusTypeId,\n\t\tPupilToStatusFlag,\n\t\tPupilToStatusTransactionEndDate,\n\t\tPupilToStatusSourceId,\n\t\tPupilToStatusValidStartDate,\n\t\tPupilToStatusValidEndDate,\n\t\tPupilToStatusTransactionStartDate,\n\t\tPupilToStatusDeleted,\n\t\tPupilToStatusRowInsertedDate,\n\t\tEventId,\n\t\tInstitutionId,\n\t\tPupilToStatusCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nAggregate1 select(mapColumn(\n\t\tPupilId,\n\t\tPersonStatusTypeId,\n\t\tPupilToStatusFlag,\n\t\tPupilToStatusTransactionEndDate,\n\t\tPupilToStatusSourceId,\n\t\tPupilToStatusValidStartDate,\n\t\tPupilToStatusValidEndDate,\n\t\tPupilToStatusTransactionStartDate,\n\t\tPupilToStatusDeleted,\n\t\tPupilToStatusRowInsertedDate,\n\t\tEventId,\n\t\tInstitutionId,\n\t\tPupilToStatusCounter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColsFinal\nAddFixedAndDerivedCols select(mapColumn(\n\t\tPupilId,\n\t\tPersonStatusTypeId,\n\t\tPUP_TO_STG_FLG = PupilToStatusFlag,\n\t\tPupilToStatusTransactionEndDate,\n\t\tPupilToStatusSourceId,\n\t\tPupilToStatusValidStartDate,\n\t\tPupilToStatusValidEndDate,\n\t\tPupilToStatusTransactionStartDate,\n\t\tPupilToStatusDeleted,\n\t\tPupilToStatusRowInsertedDate,\n\t\tPupilToStatusCounter,\n\t\tInstitutionId,\n\t\tEventId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsActiveSen\nUnionStudentActiveSenStudentActive filter(and(\r\n    notEquals(PupilId, -1),\r\n    \r\n    and(notEquals(isNull(PupilId), true()), \r\n        notEquals(EventId, -1)\r\n        )\r\n\r\n)) ~> Filter1\nInnerJoinPup filter(and(\r\n    notEquals(PupilId, -1),\r\n    notEquals(isNull(PupilId), true())\r\n)) ~> Filter2\nGroupBySen derive(PupilTransactionEndDate_COL = toDate('31-12-9999','dd-MM-yyyy'),\n\t\tPupilDeleted_COL = toDate('31-12-9999','dd-MM-yyyy')) ~> DerivedColumn1\nFilter1 aggregate(groupBy(PupilId,\n\t\tPersonStatusTypeId,\n\t\tPupilToStatusValidStartDate,\n\t\tPupilToStatusTransactionStartDate,\n\t\tPupilToStatusCounter),\n\tPupilToStatusFlag = max(PupilToStatusFlag),\n\t\tPupilToStatusTransactionEndDate = max(PupilToStatusTransactionEndDate),\n\t\tPupilToStatusSourceId = max(PupilToStatusSourceId),\n\t\tPupilToStatusValidEndDate = max(PupilToStatusValidEndDate),\n\t\tPupilToStatusDeleted = max(PupilToStatusDeleted),\n\t\tPupilToStatusRowInsertedDate = max(PupilToStatusRowInsertedDate),\n\t\tEventId = max(EventId),\n\t\tInstitutionId = max(InstitutionId)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPupilId as long,\n\t\tPupilToStatusFlag as boolean,\n\t\tPupilToStatusTransactionEndDate as timestamp,\n\t\tPupilToStatusSourceId as integer,\n\t\tPupilToStatusValidStartDate as timestamp,\n\t\tPupilToStatusValidEndDate as timestamp,\n\t\tPersonStatusTypeId as long,\n\t\tPupilToStatusTransactionStartDate as timestamp,\n\t\tPupilToStatusDeleted as timestamp,\n\t\tPupilToStatusRowInsertedDate as timestamp,\n\t\tEventId as long,\n\t\tInstitutionId as long,\n\t\tPupilToStatusCounter as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PupilId','InstitutionId','PersonStatusTypeId','PupilToStatusValidStartDate','PupilToStatusTransactionStartDate','PupilToStatusCounter'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPupilId,\n\t\tPupilToStatusTransactionEndDate,\n\t\tPupilToStatusSourceId,\n\t\tPupilToStatusValidStartDate,\n\t\tPupilToStatusValidEndDate,\n\t\tPersonStatusTypeId,\n\t\tPupilToStatusTransactionStartDate,\n\t\tPupilToStatusDeleted,\n\t\tEventId,\n\t\tInstitutionId,\n\t\tPupilToStatusCounter,\n\t\tPupilToStatusFlag,\n\t\tPupilToStatusRowInsertedDate\n\t)) ~> PupToSts"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dls_gdp_contoso_enriched')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPersonStatusType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblPupilToStatus')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/flow_TblTmpSchoolAttendance')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LiquidLogic/1_Assessment"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_TblEvent",
								"type": "DatasetReference"
							},
							"name": "TblEv"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventType",
								"type": "DatasetReference"
							},
							"name": "TblEvTyp"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToPupil",
								"type": "DatasetReference"
							},
							"name": "TblEvToPup"
						},
						{
							"dataset": {
								"referenceName": "ds_TblEventToInstitution",
								"type": "DatasetReference"
							},
							"name": "TblEvToInst"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "JoinTblEvTyp"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "JoinEvToPup"
						},
						{
							"name": "JoinEvToInst"
						},
						{
							"name": "DenseRank"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventReasonTypeId as long,\n\t\tEventTransactionStartDate as timestamp,\n\t\tEventTransactionEndDate as timestamp,\n\t\tEventCategoryTypeId as long,\n\t\tEventSourceId as integer,\n\t\tEventSourceKey as string,\n\t\tEventValidStartDate as timestamp,\n\t\tEventValidEndDate as timestamp,\n\t\tEventAcademicYear as string,\n\t\tEventDeleted as timestamp,\n\t\tEventRowInsertedDate as timestamp,\n\t\tEventValidCreationDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEv\nsource(output(\n\t\tEventTypeId as long,\n\t\tEventTypeDescription as string,\n\t\tEventTypeGroup as string,\n\t\tEventTypeTransactionStartDate as timestamp,\n\t\tEventTypeTransactionEndDate as timestamp,\n\t\tEventTypeDeleted as timestamp,\n\t\tEventTypeSourceId as integer,\n\t\tEventTypeRowInsertedDate as timestamp,\n\t\tEventTypeSubGroup as string,\n\t\tEventTypeInternalCode as string,\n\t\tEventTypeExternalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvTyp\nsource(output(\n\t\tPupilId as long,\n\t\tEventId as long,\n\t\tEventToPupilTransactionEndDate as timestamp,\n\t\tEventTypeId as long,\n\t\tEventToPupilSourceId as integer,\n\t\tEventToPupilTransactionStartDate as timestamp,\n\t\tEventToPupilDeleted as timestamp,\n\t\tEventToPupilValidStartDate as timestamp,\n\t\tEventToPupilValidEndDate as timestamp,\n\t\tEventToPupilRowInsertedDate as timestamp,\n\t\tEventToPupilCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToPup\nsource(output(\n\t\tInstitutionId as long,\n\t\tEventId as long,\n\t\tEventTypeId as long,\n\t\tEventToInstitutionTransactionEndDate as timestamp,\n\t\tEventToInstitutionTransactionStartDate as timestamp,\n\t\tEventToInstitutionSourceId as integer,\n\t\tEventToInstitutionDeleted as timestamp,\n\t\tEventToInstitutionValidStartDate as timestamp,\n\t\tEventToInstitutionValidEndDate as timestamp,\n\t\tEventToInstitutionRowInsertedDate as timestamp,\n\t\tEventToInstitutionCounter as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> TblEvToInst\nTblEv, Filter1 join(TblEv@EventTypeId == TblEvTyp@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinTblEvTyp\nTblEvTyp filter(and(\r\n    equals(EventTypeGroup, 'PUPIL_EVENT'),\r\n    equals(EventTypeDescription, 'SCHOOL_TRANSFER')\r\n)) ~> Filter1\nJoinTblEvTyp, TblEvToPup join(TblEv@EventId == TblEvToPup@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToPup@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToPup\nJoinEvToPup, TblEvToInst join(TblEv@EventId == TblEvToInst@EventId\n\t&& TblEvTyp@EventTypeId == TblEvToInst@EventTypeId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEvToInst\nJoinEvToInst window(over(PupilId),\n\tdesc(EventValidEndDate, true),\n\tdesc(EventValidStartDate, true),\n\tasc(InstitutionId, true),\n\tFormRank = count(1)) ~> DenseRank\nDenseRank aggregate(groupBy(PupilId,\n\t\tEventValidStartDate,\n\t\tEventValidEndDate,\n\t\tInstitutionId,\n\t\tFormRank),\n\tCountAll = count(1)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_TblEvent')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventType')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToPupil')]",
				"[concat(variables('workspaceId'), '/datasets/ds_TblEventToInstitution')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqldwhswiscontosouksdev001')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}